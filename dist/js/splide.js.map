{"version":3,"file":"splide.js","sources":["../../src/js/constants/project.ts","../../src/js/constants/states.ts","../../src/js/constants/priority.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/arrayLike/find/find.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/js/utils/dom/setAttribute/setAttribute.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/style/style.ts","../../src/js/utils/dom/display/display.ts","../../src/js/utils/dom/getAttribute/getAttribute.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/measure/measure.ts","../../src/js/utils/dom/parseHtml/parseHtml.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/noop/noop.ts","../../src/js/utils/function/raf/raf.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/math/approximatelyEqual/approximatelyEqual.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/sign/sign.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBus/EventBus.ts","../../src/js/constants/events.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constructors/RequestInterval/RequestInterval.ts","../../src/js/constructors/State/State.ts","../../src/js/constructors/Throttle/Throttle.ts","../../src/js/components/Options/Options.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/classes.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Style/Style.ts","../../src/js/constants/attributes.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Drag/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/constants/i18n.ts","../../src/js/constants/defaults.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 5;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  DESTROYED,\r\n};\r\n","/**\r\n * The default priority for internal handlers.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULT_EVENT_PRIORITY = 10;\r\n\r\n/**\r\n * The default priority for users' handlers.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULT_USER_EVENT_PRIORITY = 20;\r\n","/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\r\nexport function empty( array: any[] ): void {\r\n  array.length = 0;\r\n}\r\n","/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeof subject === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport function isArray<T>( subject: unknown ): subject is T[] {\r\n  return Array.isArray( subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport function isFunction( subject: unknown ): subject is ( ...args: any[] ) => any {\r\n  return typeof subject === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport function isString( subject: unknown ): subject is string {\r\n  return typeof subject === 'string';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport function isUndefined( subject: unknown ): subject is undefined {\r\n  return typeof subject === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\r\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\r\n  return subject instanceof HTMLButtonElement;\r\n}\r\n","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","/**\r\n * Checks if the array includes the value or not.\r\n * `Array#includes` is not supported by IE.\r\n *\r\n * @param array - An array.\r\n * @param value - A value to search for.\r\n *\r\n * @return `true` if the array includes the value, or otherwise `false`.\r\n */\r\nexport function includes<T>( array: T[], value: T ): boolean {\r\n  return array.indexOf( value ) > -1;\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","export { empty }    from './empty/empty';\r\nexport { forEach }  from './forEach/forEach';\r\nexport { includes } from './includes/includes';\r\nexport { push }     from './push/push';\r\nexport { toArray }  from './toArray/toArray';\r\n\r\nexport const arrayProto = Array.prototype;\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { slice } from '../slice/slice';\r\n\r\n\r\n/**\r\n * The find method for an array or array-like object, works in IE.\r\n * This method is not performant for a huge array.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param predicate - The predicate function to test each element in the object.\r\n *\r\n * @return A found value if available, or otherwise `undefined`.\r\n */\r\nexport function find<T>(\r\n  arrayLike: ArrayLike<T>,\r\n  predicate: ( value: T, index: number, array: T[] ) => any\r\n): T | undefined {\r\n  return slice( arrayLike ).filter( predicate )[ 0 ];\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Toggles the provided class or classes by following the `add` boolean.\r\n *\r\n * @param elm     - An element whose classes are toggled.\r\n * @param classes - A class or class names.\r\n * @param add     - Whether to add or remove a class.\r\n */\r\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\r\n  if ( elm ) {\r\n    forEach( classes, name => {\r\n      if ( name ) {\r\n        elm.classList[ add ? 'add' : 'remove' ]( name );\r\n      }\r\n    } );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, isString( classes ) ? classes.split( ' ' ) : classes, true );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  forEach( children, parent.appendChild.bind( parent ) );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node ): void {\r\n  forEach( nodes, node => {\r\n    const parent = ref.parentNode;\r\n\r\n    if ( parent ) {\r\n      parent.insertBefore( node, ref );\r\n    }\r\n  } );\r\n}\r\n","/**\r\n * Checks if the element can be selected by the provided selector or not.\r\n *\r\n * @param elm      - An element to check.\r\n * @param selector - A selector to test.\r\n *\r\n * @return `true` if the selector matches the element, or otherwise `false`.\r\n */\r\nexport function matches( elm: Element, selector: string ): boolean {\r\n  return ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\r\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n *\r\n * @return A provided object itself.\r\n */\r\nexport function forOwn<T extends object>(\r\n  object: T,\r\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\r\n): T {\r\n  if ( object ) {\r\n    const keys = Object.keys( object );\r\n\r\n    for ( let i = 0; i < keys.length; i++ ) {\r\n      const key = keys[ i ];\r\n\r\n      if ( key !== '__proto__' ) {\r\n        if ( iteratee( object[ key ], key ) === false ) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n","import { slice } from '../../arrayLike';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assign U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\r\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\r\n\r\nexport function assign<T extends object, U1 extends object, U2 extends object>(\r\n  object: T, source1: U1, source2: U2\r\n): Assign<Assign<T, U1>, U2>;\r\n\r\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\r\n  object: T, source1: U1, source2: U2, source3: U3\r\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object - An object to assign properties to.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { isArray, isObject } from '../../type/type';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Merges U to T.\r\n *\r\n * @typeParam T - An object to merge to.\r\n * @typeParam U - An object to to.\r\n *\r\n * @return An merged object type.\r\n */\r\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\r\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\r\n    ? U[ K ] extends any[]\r\n      ? T[ K ] extends any[]\r\n        ? Array<T[ K ][ number ] | U[ K ][ number ]>\r\n        : U[ K ]\r\n      : T[ K ] extends object\r\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Cast<A, object> : never\r\n        : U[ K ]\r\n    : U[ K ];\r\n} & Omit<U, keyof T>;\r\n\r\ntype Cast<T, U> = T extends U ? T : U;\r\n\r\n/**\r\n * Recursively merges source properties to the object.\r\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\r\n *\r\n * @param object - An object to merge properties to.\r\n * @param source - A source object to merge properties from.\r\n *\r\n * @return A new object with merged properties.\r\n */\r\nexport function merge<T extends object, U extends object>( object: T, source: U ): Merge<T, U> {\r\n  forOwn( source, ( value, key ) => {\r\n    if ( isArray( value ) ) {\r\n      object[ key ] = value.slice();\r\n    } else if ( isObject( value ) ) {\r\n      object[ key ] = merge( isObject( object[ key ] ) ? object[ key ] : {}, value );\r\n    } else {\r\n      object[ key ] = value;\r\n    }\r\n  } );\r\n\r\n  return object as Merge<T, U>;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes attributes from the element.\r\n *\r\n * @param elm   - An element.\r\n * @param attrs - An attribute or attributes to remove.\r\n */\r\nexport function removeAttribute( elm: Element, attrs: string | string[] ): void {\r\n  if ( elm ) {\r\n    forEach( attrs, attr => {\r\n      elm.removeAttribute( attr );\r\n    } );\r\n  }\r\n}\r\n","import { forOwn } from '../../object';\r\nimport { isNull, isObject } from '../../type/type';\r\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\r\n\r\n\r\nexport function setAttribute( elm: Element, attr: string, value: string | number | boolean ): void;\r\nexport function setAttribute( elm: Element, attrs: Record<string, string | number | boolean> ): void;\r\n\r\nexport function setAttribute(\r\n  elm: Element,\r\n  attrs: string | Record<string, string | number | boolean>,\r\n  value?: string | number | boolean\r\n): void {\r\n  if ( isObject( attrs ) ) {\r\n    forOwn( attrs, ( value, name ) => {\r\n      setAttribute( elm, name, value );\r\n    } );\r\n  } else {\r\n    isNull( value ) ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { addClass } from '../addClass/addClass';\r\nimport { append } from '../append/append';\r\nimport { setAttribute } from '../setAttribute/setAttribute';\r\n\r\n\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ];\r\n\r\nexport function create(\r\n  tag: string,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElement;\r\n\r\n/**\r\n * Creates a HTML element.\r\n *\r\n * @param tag    - A tag name.\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ] {\r\n  const elm = document.createElement( tag );\r\n\r\n  if ( attrs ) {\r\n    isString( attrs ) ? addClass( elm, attrs ) : setAttribute( elm, attrs );\r\n  }\r\n\r\n  parent && append( parent, elm );\r\n\r\n  return elm;\r\n}\r\n","import { forOwn } from '../../object';\r\nimport { isNull, isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * The union for CSS style properties, such as \"padding\", \"fontSize\", etc.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport type CSSStyleProperties = Exclude<keyof CSSStyleDeclaration, number>;\r\n\r\nexport function style(\r\n  elm: HTMLElement,\r\n  styles: Record<string, string | number>\r\n): void;\r\n\r\nexport function style<K extends CSSStyleProperties>(\r\n  elm: HTMLElement,\r\n  styles: K\r\n): CSSStyleDeclaration[ K ];\r\n\r\nexport function style(\r\n  elm: HTMLElement,\r\n  styles: string\r\n): string;\r\n\r\n\r\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elm    - An element to apply styles to.\r\n * @param styles - An object literal with styles.\r\n */\r\nexport function style<K extends CSSStyleProperties>(\r\n  elm: HTMLElement,\r\n  styles: Record<string, string | number> | K\r\n): CSSStyleDeclaration[ K ] | string | void {\r\n  if ( isString( styles ) ) {\r\n    return getComputedStyle( elm )[ styles ];\r\n  }\r\n\r\n  forOwn( styles, ( value, key ) => {\r\n    if ( ! isNull( value ) ) {\r\n      elm.style[ key ] = `${ value }`;\r\n    }\r\n  } );\r\n}\r\n","import { style } from '../style/style';\r\n\r\n\r\n/**\r\n * Sets the `display` CSS value to the element.\r\n *\r\n * @param elm     - An element to set a new value to.\r\n * @param display - A new `display` value.\r\n */\r\nexport function display( elm: HTMLElement, display: string ): void {\r\n  style( elm, { display } );\r\n}\r\n","/**\r\n * Returns the specified attribute value.\r\n *\r\n * @param elm  - An element.\r\n * @param attr - An attribute to get.\r\n */\r\nexport function getAttribute( elm: Element, attr: string ): string {\r\n  return elm.getAttribute( attr );\r\n}\r\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\r\n * Returns a DOMRect object of the provided element.\r\n *\r\n * @param target - An element.\r\n */\r\nexport function rect( target: Element ): DOMRect {\r\n  return target.getBoundingClientRect();\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { create } from '../create/create';\r\nimport { rect } from '../rect/rect';\r\nimport { remove } from '../remove/remove';\r\n\r\n\r\n/**\r\n * Attempts to convert the provided value to pixel as the relative value to the parent element.\r\n *\r\n * @param parent - A parent element.\r\n * @param value  - A value to convert.\r\n *\r\n * @return A converted value in pixel. Unhandled values will become 0.\r\n */\r\nexport function measure( parent: HTMLElement, value: number | string ): number {\r\n  if ( isString( value ) ) {\r\n    const div = create( 'div', { style: `width: ${ value }; position: absolute;` }, parent );\r\n    value = rect( div ).width;\r\n    remove( div );\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { child } from '../child/child';\r\n\r\n\r\n/**\r\n * Parses the provided HTML string and returns the first element.\r\n *\r\n * @param html - An HTML string to parse.\r\n *\r\n * @return An Element on success, or otherwise `undefined`.\r\n */\r\nexport function parseHtml<E extends HTMLElement>( html: string ): E | undefined {\r\n  return child<E>( new DOMParser().parseFromString( html, 'text/html' ).body );\r\n}\r\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  e.preventDefault();\r\n\r\n  if ( stopPropagation ) {\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector: string ): E | null {\r\n  return parent && parent.querySelector( selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\r\n  return slice<E>( parent.querySelectorAll( selector ) );\r\n}\r\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message = '' ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message }` );\r\n  }\r\n}\r\n","import { AnyFunction } from '../../../types';\r\n\r\n\r\n/**\r\n * Invokes the callback on the next tick.\r\n *\r\n * @param callback - A callback function.\r\n */\r\nexport function nextTick( callback: AnyFunction ): void {\r\n  setTimeout( callback );\r\n}\r\n","/**\r\n * No operation.\r\n */\r\nexport const noop = (): void => {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\r\n","/**\r\n * The arias of `window.requestAnimationFrame()`.\r\n */\r\nexport function raf( func: FrameRequestCallback ): number {\r\n  return requestAnimationFrame( func );\r\n}\r\n","export const { min, max, floor, ceil, abs } = Math;\r\n","import { abs } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the provided 2 numbers are approximately equal or not.\r\n *\r\n * @param x       - A number.\r\n * @param y       - Another number to compare.\r\n * @param epsilon - An accuracy that defines the approximation.\r\n *\r\n * @return `true` if 2 numbers are considered to be equal, or otherwise `false`.\r\n */\r\nexport function approximatelyEqual( x: number, y: number, epsilon: number ): boolean {\r\n  return abs( x - y ) < epsilon;\r\n}\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const minimum = min( minOrMax, maxOrMin );\r\n  const maximum = max( minOrMax, maxOrMin );\r\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\r\n}\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","/**\r\n * Returns the sign of the provided number.\r\n *\r\n * @param x - A number.\r\n *\r\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\r\n */\r\nexport function sign( x: number ): number {\r\n  return +( x > 0 ) - +( x < 0 );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Formats a string.\r\n *\r\n * @param string       - A string to format.\r\n * @param replacements - A replacement or replacements.\r\n *\r\n * @return A formatted string.\r\n */\r\nexport function format( string: string, replacements: string | number | Array<string | number> ): string {\r\n  forEach( replacements, replacement => {\r\n    string = string.replace( '%s', `${ replacement }` );\r\n  } );\r\n\r\n  return string;\r\n}\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","import { pad } from '../pad/pad';\r\n\r\n\r\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst ids: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\r\nexport function uniqueId( prefix: string ): string {\r\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\r\n}\r\n","import { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\r\nimport { AnyFunction } from '../../types';\r\nimport { forOwn, push, slice, toArray } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the EventBus instance.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventBusObject {\r\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority?: number ): void;\r\n  off( events: string | string[], key?: object ): void;\r\n  offBy( key: object ): void;\r\n  emit( event: string, ...args: any[] ): void;\r\n  destroy(): void;\r\n}\r\n\r\n/**\r\n * The interface for each event handler object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventHandler {\r\n  _event: string;\r\n  _callback: AnyFunction;\r\n  _namespace: string;\r\n  _priority: number;\r\n  _key?: object;\r\n}\r\n\r\n/**\r\n * The type for a callback function of the EventBus.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type EventBusCallback = AnyFunction;\r\n\r\n/**\r\n * The constructor to provided a simple event system.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @return An EventBus object.\r\n */\r\nexport function EventBus(): EventBusObject {\r\n  /**\r\n   * The collection of registered handlers.\r\n   */\r\n  let handlers: Record<string, EventHandler[]> = {};\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   * @param key      - Optional. An object for an identifier of the handler.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\r\n   */\r\n  function on(\r\n    events: string | string[],\r\n    callback: EventBusCallback,\r\n    key?: object,\r\n    priority = DEFAULT_EVENT_PRIORITY\r\n  ): void {\r\n    forEachEvent( events, ( event, namespace ) => {\r\n      handlers[ event ] = handlers[ event ] || [];\r\n\r\n      push( handlers[ event ], {\r\n        _event    : event,\r\n        _callback : callback,\r\n        _namespace: namespace,\r\n        _priority : priority,\r\n        _key      : key,\r\n      } ).sort( ( handler1, handler2 ) => handler1._priority - handler2._priority );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes event handlers registered by `on()`.\r\n   * If only the event name is provided, all handlers that associate with the event are removed.\r\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param key    - Optional. An object for an identifier of the handler.\r\n   */\r\n  function off( events: string | string[], key?: object ): void {\r\n    forEachEvent( events, ( event, namespace ) => {\r\n      const eventHandlers = handlers[ event ];\r\n\r\n      handlers[ event ] = eventHandlers && eventHandlers.filter( handler => {\r\n        return handler._key ? handler._key !== key : handler._namespace !== namespace;\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes all handlers locked by the specified key.\r\n   *\r\n   * @param key - A key.\r\n   */\r\n  function offBy( key: object ): void {\r\n    forOwn( handlers, ( eventHandlers, event ) => {\r\n      off( event, key );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Triggers callback functions.\r\n   * This accepts additional arguments and passes them to callbacks.\r\n   *\r\n   * @param event - An event name.\r\n   */\r\n  function emit( event: string ): void {\r\n    ( handlers[ event ] || [] ).forEach( handler => {\r\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n      handler._callback.apply( handler, slice( arguments, 1 ) );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes all handlers.\r\n   */\r\n  function destroy(): void {\r\n    handlers = {};\r\n  }\r\n\r\n  /**\r\n   * Parses provided events and iterates over them.\r\n   *\r\n   * @param events   - An event or events.\r\n   * @param iteratee - An iteratee function.\r\n   */\r\n  function forEachEvent( events: string | string[], iteratee: ( event: string, namespace: string ) => void ): void {\r\n    toArray( events ).join( ' ' ).split( ' ' ).forEach( eventNS => {\r\n      const fragments = eventNS.split( '.' );\r\n      iteratee( fragments[ 0 ], fragments[ 1 ] );\r\n    } );\r\n  }\r\n\r\n  return {\r\n    on,\r\n    off,\r\n    offBy,\r\n    emit,\r\n    destroy,\r\n  };\r\n}\r\n","export const EVENT_MOUNTED            = 'mounted';\nexport const EVENT_READY              = 'ready';\nexport const EVENT_MOVE               = 'move';\nexport const EVENT_MOVED              = 'moved';\nexport const EVENT_CLICK              = 'click';\nexport const EVENT_ACTIVE             = 'active';\nexport const EVENT_INACTIVE           = 'inactive';\nexport const EVENT_VISIBLE            = 'visible';\nexport const EVENT_HIDDEN             = 'hidden';\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\nexport const EVENT_REFRESH            = 'refresh';\nexport const EVENT_UPDATED            = 'updated';\nexport const EVENT_RESIZE             = 'resize';\nexport const EVENT_RESIZED            = 'resized';\nexport const EVENT_DRAG               = 'drag';\nexport const EVENT_DRAGGING           = 'dragging';\nexport const EVENT_DRAGGED            = 'dragged';\nexport const EVENT_SCROLL             = 'scroll';\nexport const EVENT_SCROLLED           = 'scrolled';\nexport const EVENT_DESTROY            = 'destroy';\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\n\n","import { EVENT_DESTROY } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction } from '../../types';\r\nimport { EventMap } from '../../types/events';\r\nimport { forEach } from '../../utils';\r\nimport { EventBusCallback } from '../EventBus/EventBus';\r\n\r\n\r\n/**\r\n * The interface for the EventInterface object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventInterfaceObject {\r\n  on<K extends keyof EventMap>( event: K, callback: ( ...args: EventMap[ K ] ) => void, priority?: number ): void;\r\n  on( events: string | string[], callback: EventBusCallback, priority?: number ): void;\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\r\n  emit<K extends keyof EventMap>( event: K, ...args: EventMap[ K ] ): void\r\n  emit( event: string, ...args: any[] ): void;\r\n  bind(\r\n    target: Element | Window | Document | Array<Element | Window | Document>,\r\n    events: string,\r\n    callback: AnyFunction,\r\n    options?: AddEventListenerOptions\r\n  ): void\r\n  unbind( target: Element | Window | Document | Array<Element | Window | Document>, events: string ): void;\r\n  destroy(): void;\r\n}\r\n\r\n/**\r\n * The type for event targets.\r\n *\r\n * @since 3.0.0\r\n */\r\ntype EventTarget = Element | Window | Document;\r\n\r\n/**\r\n * The function that provides interface for internal and native events.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide - A Splide instance.\r\n *\r\n * @return A collection of interface functions.\r\n */\r\nexport function EventInterface( Splide: Splide ): EventInterfaceObject {\r\n  /**\r\n   * Holds the event object.\r\n   */\r\n  const { event } = Splide;\r\n\r\n  /**\r\n   * The key for events.\r\n   */\r\n  const key = {};\r\n\r\n  /**\r\n   * Stores all handlers that listen to native events.\r\n   */\r\n  let listeners: [ EventTarget, string, AnyFunction, AddEventListenerOptions? ][] = [];\r\n\r\n  /**\r\n   * Registers an event handler with an unique key.\r\n   * It can only be removed by `off()` method below.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\r\n   */\r\n  function on( events: string | string[], callback: EventBusCallback, priority?: number ): void {\r\n    event.on( events, callback, key, priority );\r\n  }\r\n\r\n  /**\r\n   * Removes event handlers registered by `on()`.\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   */\r\n  function off( events: string | string[] ): void {\r\n    event.off( events, key );\r\n  }\r\n\r\n  /**\r\n   * Listens to native events.\r\n   * Splide#destory() will remove all registered listeners.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event or events to listen to.\r\n   * @param callback - A callback function.\r\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\r\n   */\r\n  function bind(\r\n    targets: EventTarget | EventTarget[],\r\n    events: string,\r\n    callback: AnyFunction,\r\n    options?: AddEventListenerOptions\r\n  ): void {\r\n    forEachEvent( targets, events, ( target, event ) => {\r\n      listeners.push( [ target, event, callback, options ] );\r\n      target.addEventListener( event, callback, options );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes the event handler.\r\n   *\r\n   * @param targets - A target element, the window object or the document object.\r\n   * @param events  - An event name or names to remove.\r\n   */\r\n  function unbind( targets: EventTarget | EventTarget[], events: string ): void {\r\n    forEachEvent( targets, events, ( target, event ) => {\r\n      listeners = listeners.filter( listener => {\r\n        if ( listener[ 0 ] === target && listener[ 1 ] === event ) {\r\n          target.removeEventListener( event, listener[ 2 ], listener[ 3 ] );\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Iterates over each target and event.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names.\r\n   * @param iteratee - An iteratee function.\r\n   */\r\n  function forEachEvent(\r\n    targets: EventTarget | EventTarget[],\r\n    events: string,\r\n    iteratee: ( target: EventTarget, event: string ) => void\r\n  ): void {\r\n    forEach( targets, target => {\r\n      if ( target ) {\r\n        events.split( ' ' ).forEach( iteratee.bind( null, target ) );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners.\r\n   */\r\n  function destroy(): void {\r\n    listeners = listeners.filter( data => unbind( data[ 0 ], data[ 1 ] ) );\r\n    event.offBy( key );\r\n  }\r\n\r\n  /**\r\n   * Invokes destroy when the slider is destroyed.\r\n   */\r\n  event.on( EVENT_DESTROY, destroy, key );\r\n\r\n  return {\r\n    on,\r\n    off,\r\n    emit: event.emit,\r\n    bind,\r\n    unbind,\r\n    destroy,\r\n  };\r\n}\r\n","import { raf } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface RequestIntervalInterface {\r\n  start( resume?: boolean ): void;\r\n  pause(): void;\r\n  rewind(): void;\r\n  cancel(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param interval   - The interval duration in milliseconds.\r\n * @param onInterval - The callback fired on every interval.\r\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\r\n * @param limit      - Optional. Limits the number of interval.\r\n */\r\nexport function RequestInterval(\r\n  interval: number,\r\n  onInterval: () => void,\r\n  onUpdate?: ( rate: number ) => void,\r\n  limit?: number\r\n): RequestIntervalInterface {\r\n  const { now } = Date;\r\n\r\n  /**\r\n   * The time when the interval starts.\r\n   */\r\n  let startTime: number;\r\n\r\n  /**\r\n   * The current progress rate.\r\n   */\r\n  let rate = 0;\r\n\r\n  /**\r\n   * The animation frame ID.\r\n   */\r\n  let id: number;\r\n\r\n  /**\r\n   * Indicates whether the interval is currently paused or not.\r\n   */\r\n  let paused = true;\r\n\r\n  /**\r\n   * The loop count. This only works when the `limit` argument is provided.\r\n   */\r\n  let count = 0;\r\n\r\n  /**\r\n   * The update function called on every animation frame.\r\n   */\r\n  function update(): void {\r\n    if ( ! paused ) {\r\n      const elapsed = now() - startTime;\r\n\r\n      if ( elapsed >= interval ) {\r\n        rate      = 1;\r\n        startTime = now();\r\n      } else {\r\n        rate = elapsed / interval;\r\n      }\r\n\r\n      if ( onUpdate ) {\r\n        onUpdate( rate );\r\n      }\r\n\r\n      if ( rate === 1 ) {\r\n        onInterval();\r\n\r\n        if ( limit && ++count >= limit ) {\r\n          return pause();\r\n        }\r\n      }\r\n\r\n      raf( update );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the interval.\r\n   *\r\n   * @param resume - Optional. Whether to resume the paused progress or not.\r\n   */\r\n  function start( resume?: boolean ): void {\r\n    ! resume && cancel();\r\n    startTime = now() - ( resume ? rate * interval : 0 );\r\n    paused    = false;\r\n    raf( update );\r\n  }\r\n\r\n  /**\r\n   * Pauses the interval.\r\n   */\r\n  function pause(): void {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Rewinds the current progress.\r\n   */\r\n  function rewind(): void {\r\n    startTime = now();\r\n    rate      = 0;\r\n\r\n    if ( onUpdate ) {\r\n      onUpdate( rate );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the interval.\r\n   */\r\n  function cancel() {\r\n    cancelAnimationFrame( id );\r\n    rate   = 0;\r\n    id     = 0;\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Checks if the interval is paused or not.\r\n   *\r\n   * @return `true` if the interval is paused, or otherwise `false`.\r\n   */\r\n  function isPaused(): boolean {\r\n    return paused;\r\n  }\r\n\r\n  return {\r\n    start,\r\n    rewind,\r\n    pause,\r\n    cancel,\r\n    isPaused,\r\n  };\r\n}\r\n","import { includes, toArray } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the State object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface StateObject {\r\n  set( state: number ): void;\r\n  is( states: number | number[] ): boolean;\r\n}\r\n\r\n/**\r\n * The function providing a super simple state system.\r\n *\r\n * @param initialState - Specifies the initial state.\r\n */\r\nexport function State( initialState: number ): StateObject {\r\n  /**\r\n   * The current state.\r\n   */\r\n  let state = initialState;\r\n\r\n  /**\r\n   * Sets a new state.\r\n   *\r\n   * @param value - A new state value.\r\n   */\r\n  function set( value: number ): void {\r\n    state = value;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state matches the provided one.\r\n   *\r\n   * @param states - A state to check.\r\n   *\r\n   * @return `true` if the current state is the provided one.\r\n   */\r\n  function is( states: number | number[] ): boolean {\r\n    return includes( toArray( states ), state );\r\n  }\r\n\r\n  return { set, is };\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { RequestInterval, RequestIntervalInterface } from '../RequestInterval/RequestInterval';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ThrottleInstance<F extends AnyFunction> extends Function {\r\n  ( ...args: Parameters<F> ): void;\r\n}\r\n\r\n/**\r\n * Returns the throttled function.\r\n *\r\n * @param func     - A function to throttle.\r\n * @param duration - Optional. Throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function Throttle<F extends AnyFunction>(\r\n  func: F,\r\n  duration?: number\r\n): ThrottleInstance<F> {\r\n  let interval: RequestIntervalInterface;\r\n\r\n  function throttled( this: ThisParameterType<F> ): void {\r\n    if ( ! interval ) {\r\n      interval = RequestInterval( duration || 0, () => {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        func.apply( this, arguments );\r\n        interval = null;\r\n      }, null, 1 );\r\n\r\n      interval.start();\r\n    }\r\n  }\r\n\r\n  return throttled;\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { DESTROYED } from '../../constants/states';\r\nimport { Throttle } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { assert, find, getAttribute, merge } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Options component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface OptionsComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for managing options.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Options component object.\r\n */\r\nexport function Options( Splide: Splide, Components: Components, options: Options ): OptionsComponent {\r\n  /**\r\n   * The throttled `observe` function.\r\n   */\r\n  const throttledObserve = Throttle( observe );\r\n\r\n  /**\r\n   * Keeps the initial options to apply when no matched query exists.\r\n   */\r\n  let initialOptions: Options;\r\n\r\n  /**\r\n   * Stores breakpoints with the MediaQueryList object.\r\n   */\r\n  let points: [ string, MediaQueryList ][];\r\n\r\n  /**\r\n   * Holds the current breakpoint.\r\n   */\r\n  let currPoint: string | undefined;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( Splide.root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, e.message );\r\n    }\r\n\r\n    initialOptions = merge( {}, options );\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    const { breakpoints } = options;\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    if ( breakpoints ) {\r\n      points = Object.keys( breakpoints )\r\n        .sort( ( n, m ) => isMin ? +m - +n : +n - +m )\r\n        .map( point => [\r\n          point,\r\n          matchMedia( `(${ isMin ? 'min' : 'max' }-width:${ point }px)` ),\r\n        ] );\r\n\r\n      addEventListener( 'resize', throttledObserve );\r\n      observe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      removeEventListener( 'resize', throttledObserve );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Observes breakpoints.\r\n   * The `currPoint` may be `undefined`.\r\n   */\r\n  function observe(): void {\r\n    const item = find( points, item => item[ 1 ].matches ) || [];\r\n\r\n    if ( item[ 0 ] !== currPoint ) {\r\n      onMatch( ( currPoint = item[ 0 ] ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the media query matches breakpoints.\r\n   *\r\n   * @param point - A matched point, or `undefined` that means no breakpoint matches a media query.\r\n   */\r\n  function onMatch( point: string | undefined ): void {\r\n    const newOptions = options.breakpoints[ point ] || initialOptions;\r\n\r\n    if ( newOptions.destroy ) {\r\n      Splide.options = initialOptions;\r\n      Splide.destroy( newOptions.destroy === 'completely' );\r\n    } else {\r\n      if ( Splide.state.is( DESTROYED ) ) {\r\n        destroy( true );\r\n        Splide.mount();\r\n      }\r\n\r\n      Splide.options = newOptions;\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve( prop: string, axisOnly?: boolean ): string;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  marginRight : [ 'marginBottom', 'marginLeft' ],\r\n  autoWidth   : [ 'autoHeight' ],\r\n  fixedWidth  : [ 'fixedHeight' ],\r\n  paddingLeft : [ 'paddingTop', 'paddingRight' ],\r\n  paddingRight: [ 'paddingBottom', 'paddingLeft' ],\r\n  width       : [ 'height' ],\r\n  left        : [ 'top', 'right' ],\r\n  right       : [ 'bottom', 'left' ],\r\n  x           : [ 'y' ],\r\n  X           : [ 'Y' ],\r\n  Y           : [ 'X' ],\r\n  ArrowLeft   : [ 'ArrowUp', 'ArrowRight' ],\r\n  ArrowRight  : [ 'ArrowDown', 'ArrowLeft' ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop     - A property name to translate.\r\n   * @param axisOnly - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   */\r\n  function resolve( prop: string, axisOnly?: boolean ): string {\r\n    const { direction } = options;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n    return ORIENTATION_MAP[ prop ][ index ] || prop;\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_SLIDER          = `${ PROJECT_CODE }__slider`;\r\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\r\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\r\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\r\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_AUTOPLAY        = `${ PROJECT_CODE }__autoplay`;\r\nexport const CLASS_PLAY            = `${ PROJECT_CODE }__play`;\r\nexport const CLASS_PAUSE           = `${ PROJECT_CODE }__pause`;\r\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\r\nexport const CLASS_INITIALIZED     = 'is-initialized';\r\nexport const CLASS_ACTIVE          = 'is-active';\r\nexport const CLASS_PREV            = 'is-prev';\r\nexport const CLASS_NEXT            = 'is-next';\r\nexport const CLASS_VISIBLE         = 'is-visible';\r\nexport const CLASS_LOADING         = 'is-loading';\r\n\r\n/**\r\n * The array with all status classes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [ CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING ];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import {\n  CLASS_ACTIVE,\n  CLASS_ARROW_NEXT,\n  CLASS_ARROW_PREV,\n  CLASS_ARROWS,\n  CLASS_AUTOPLAY,\n  CLASS_CLONE,\n  CLASS_LIST,\n  CLASS_PAUSE,\n  CLASS_PLAY,\n  CLASS_PROGRESS,\n  CLASS_PROGRESS_BAR,\n  CLASS_ROOT,\n  CLASS_SLIDE,\n  CLASS_SLIDER,\n  CLASS_TRACK,\n} from '../../constants/classes';\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { addClass, assert, assign, child, children, empty, push, query, removeClass, uniqueId } from '../../utils';\n\n\n/**\n * The interface for elements which the slider consists of.\n *\n * @since 3.0.0\n */\nexport interface ElementCollection {\n  root: HTMLElement;\n  slider: HTMLElement;\n  track: HTMLElement;\n  list: HTMLElement;\n  slides: HTMLElement[];\n  arrows: HTMLElement;\n  prev: HTMLButtonElement;\n  next: HTMLButtonElement;\n  bar: HTMLElement;\n  autoplay: HTMLElement;\n  play: HTMLButtonElement;\n  pause: HTMLButtonElement;\n}\n\n/**\n * The interface for the Elements component.\n *\n * @since 3.0.0\n */\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\n}\n\n/**\n * The component that collects and handles elements which the slider consists of.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Elements component object.\n */\nexport function Elements( Splide: Splide, Components: Components, options: Options ): ElementsComponent {\n  const { on } = EventInterface( Splide );\n  const { root } = Splide;\n  const elements: ElementCollection = {} as ElementCollection;\n\n  /**\n   * Stores all slide elements.\n   */\n  const slides: HTMLElement[] = [];\n\n  /**\n   * Stores all root classes.\n   */\n  let classes: string[];\n\n  /**\n   * The slider element that may be `undefined`.\n   */\n  let slider: HTMLElement;\n\n  /**\n   * The track element.\n   */\n  let track: HTMLElement;\n\n  /**\n   * The list element.\n   */\n  let list: HTMLElement;\n\n  /**\n   * Called when the component is constructed.\n   */\n  function setup(): void {\n    collect();\n    identify();\n    addClass( root, ( classes = getClasses() ) );\n  }\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    on( EVENT_REFRESH, refresh );\n    on( EVENT_UPDATED, update );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    empty( slides );\n    removeClass( root, classes );\n  }\n\n  /**\n   * Recollects slide elements.\n   */\n  function refresh(): void {\n    destroy();\n    setup();\n  }\n\n  /**\n   * Updates the status of elements.\n   */\n  function update(): void {\n    removeClass( root, classes );\n    addClass( root, ( classes = getClasses() ) );\n  }\n\n  /**\n   * Collects elements which the slider consists of.\n   */\n  function collect(): void {\n    slider = child( root, `.${ CLASS_SLIDER }` );\n    track  = query( root, `.${ CLASS_TRACK }` );\n    list   = child( track, `.${ CLASS_LIST }` );\n\n    assert( track && list, 'A track/list element is missing.' );\n\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\n\n    const autoplay = find( `.${ CLASS_AUTOPLAY }` );\n    const arrows   = find( `.${ CLASS_ARROWS }` );\n\n    assign( elements, {\n      root,\n      slider,\n      track,\n      list,\n      slides,\n      arrows,\n      autoplay,\n      prev : query( arrows, `.${ CLASS_ARROW_PREV }` ),\n      next : query( arrows, `.${ CLASS_ARROW_NEXT }` ),\n      bar  : query( find( `.${ CLASS_PROGRESS }` ), `.${ CLASS_PROGRESS_BAR }` ),\n      play : query( autoplay, `.${ CLASS_PLAY }` ),\n      pause: query( autoplay, `.${ CLASS_PAUSE }` ),\n    } );\n  }\n\n  /**\n   * Assigns unique IDs to essential elements.\n   */\n  function identify(): void {\n    const id = root.id || uniqueId( PROJECT_CODE );\n    root.id  = id;\n    track.id = track.id || `${ id }-track`;\n    list.id  = list.id || `${ id }-list`;\n  }\n\n  /**\n   * Finds an element only in children of the root or slider element.\n   *\n   * @return {Element} - A found element or undefined.\n   */\n  function find( selector: string ): HTMLElement {\n    return child( root, selector ) || child( slider, selector );\n  }\n\n  /**\n   * Return an array with classes for the root element.\n   *\n   * @return An array with classes.\n   */\n  function getClasses(): string[] {\n    return [\n      `${ CLASS_ROOT }--${ options.type }`,\n      `${ CLASS_ROOT }--${ options.direction }`,\n      options.drag && `${ CLASS_ROOT }--draggable`,\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\n      CLASS_ACTIVE,\n    ];\n  }\n\n  return assign( elements, {\n    setup,\n    mount,\n    destroy,\n  } );\n}\n","import { BaseComponent } from '../../types';\r\nimport { create, find, isHTMLElement, remove } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Style component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface StyleComponent extends BaseComponent {\r\n  rule( selector: string, prop: string, value: string | number ): void;\r\n  ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void;\r\n}\r\n\r\n/**\r\n * The component for managing styles of the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @return A Style component object.\r\n */\r\nexport function Style(): StyleComponent {\r\n  /**\r\n   * The style element for the slider.\r\n   */\r\n  let style: HTMLStyleElement;\r\n\r\n  /**\r\n   * The CSSStyleSheet object of the created style element.\r\n   */\r\n  let sheet: CSSStyleSheet;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    style = create( 'style', {}, document.head );\r\n    sheet = style.sheet;\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    remove( style );\r\n    sheet = null;\r\n  }\r\n\r\n  /**\r\n   * Registers the style for the selector.\r\n   *\r\n   * @param selector - A selector string.\r\n   * @param prop     - A CSS property, accepting the camel case.\r\n   * @param value    - A CSS value.\r\n   */\r\n  function rule( selector: string, prop: string, value: string | number ): void {\r\n    const { cssRules } = sheet;\r\n    const cssRule = find( cssRules, cssRule => isCSSStyleRule( cssRule ) && cssRule.selectorText === selector )\r\n      || cssRules[ sheet.insertRule( `${ selector }{}`, 0 ) ];\r\n\r\n    if ( isCSSStyleRule( cssRule ) ) {\r\n      const { style } = cssRule;\r\n      value = `${ value }`;\r\n\r\n      if ( style[ prop ] !== value ) {\r\n        style[ prop ] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the style by the element or the ID.\r\n   *\r\n   * @param target - A target element or ID.\r\n   * @param prop   - A CSS property, accepting the camel case.\r\n   * @param value  - A CSS value.\r\n   */\r\n  function ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void {\r\n    rule( `#${ isHTMLElement( target ) ? target.id : target }`, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided rule is a CSSStyleRule instance or not.\r\n   *\r\n   * @param cssRule - An instance to check.\r\n   *\r\n   * @return `true` if the cssRule is an instance of CSSStyleRule, or otherwise `false`.\r\n   */\r\n  function isCSSStyleRule( cssRule: CSSRule ): cssRule is CSSStyleRule {\r\n    return cssRule instanceof CSSStyleRule;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    rule,\r\n    ruleBy,\r\n  };\r\n}\r\n","export const ROLE             = 'role';\r\nexport const ARIA_CONTROLS    = 'aria-controls';\r\nexport const ARIA_CURRENT     = 'aria-current';\r\nexport const ARIA_LABEL       = 'aria-label';\r\nexport const ARIA_HIDDEN      = 'aria-hidden';\r\nexport const TAB_INDEX        = 'tabindex';\r\nexport const DISABLED         = 'disabled';\r\nexport const ARIA_ORIENTATION = 'aria-orientation';\r\n\r\n/**\r\n * The array with all attributes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n];\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { FADE, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  ceil,\r\n  child,\r\n  floor,\r\n  format,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  index: number;\r\n  slideIndex: number;\r\n  slide: HTMLElement;\r\n  container: HTMLElement;\r\n  isClone: boolean;\r\n  rule( prop: string, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The sub component for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide sub component.\r\n */\r\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\r\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface( Splide );\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove } = options;\r\n  const { resolve } = Components.Direction;\r\n  const isClone   = slideIndex > -1;\r\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    init();\r\n\r\n    bind( slide, 'click keydown', e => {\r\n      emit( e.type === 'click' ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, this, e );\r\n    } );\r\n\r\n    on( [ EVENT_RESIZED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update.bind( this ) );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove.bind( this ) );\r\n    }\r\n\r\n    update.call( this );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n    }\r\n\r\n    if ( isNavigation ) {\r\n      const idx      = isClone ? slideIndex : index;\r\n      const label    = format( options.i18n.slideX, idx + 1 );\r\n      const controls = Splide.splides.map( splide => splide.root.id ).join( ' ' );\r\n\r\n      setAttribute( slide, ARIA_LABEL, label );\r\n      setAttribute( slide, ARIA_CONTROLS, controls );\r\n      setAttribute( slide, ROLE, 'menuitem' );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    destroyEvents();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   *\r\n   * @param next - A next index.\r\n   * @param prev - A previous index.\r\n   * @param dest - A destination index.\r\n   */\r\n  function onMove( this: SlideComponent, next: number, prev: number, dest: number ): void {\r\n    if ( ! destroyed ) {\r\n      update.call( this );\r\n\r\n      if ( dest === index ) {\r\n        updateActivity.call( this, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update( this: SlideComponent ): void {\r\n    if ( ! destroyed ) {\r\n      const { index: currIndex } = Splide;\r\n\r\n      updateActivity.call( this, isActive() );\r\n      updateVisibility.call( this, isVisible() );\r\n\r\n      toggleClass( slide, CLASS_PREV, index === currIndex - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === currIndex + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   *\r\n   * @param active - Set `true` if the slide is active.\r\n   */\r\n  function updateActivity( this: SlideComponent, active: boolean ): void {\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n\r\n      if ( isNavigation ) {\r\n        setAttribute( slide, ARIA_CURRENT, active || null );\r\n      }\r\n\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   *\r\n   * @param visible - Set `true` if the slide is visible.\r\n   */\r\n  function updateVisibility( this: SlideComponent, visible: boolean ): void {\r\n    const { focusableNodes } = options;\r\n    const ariaHidden = ! visible && ! isActive();\r\n\r\n    setAttribute( slide, ARIA_HIDDEN, ariaHidden || null );\r\n    setAttribute( slide, TAB_INDEX, ! ariaHidden && options.slideFocus ? 0 : null );\r\n\r\n    if ( focusableNodes ) {\r\n      queryAll( slide, focusableNodes ).forEach( node => {\r\n        setAttribute( node, TAB_INDEX, ariaHidden ? -1 : null );\r\n      } );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function rule( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    const selector = `#${ slide.id }${ container && useContainer ? ` > .${ CLASS_CONTAINER }` : '' }`;\r\n    Components.Style.rule( selector, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    return Splide.index === index;\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Components.Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left' );\r\n    const right     = resolve( 'right' );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! Splide.is( SLIDE ) && ! isClone ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  return {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    rule,\r\n    isWithin,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  before,\r\n  between,\r\n  empty,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  remove as removeNode,\r\n  toArray,\r\n} from '../../utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlidesComponent extends BaseComponent {\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  rule( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport function Slides( Splide: Splide, Components: Components, options: Options ): SlidesComponent {\r\n  const { on, emit, bind } = EventInterface( Splide );\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, refresh );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Discards all Slide components and regenerates them.\r\n   */\r\n  function refresh(): void {\r\n    destroy();\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( slide, ref ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, emit.bind( null, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function rule( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.rule( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    rule,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { addClass, append, before, ceil, empty, measure, pad, push, rect, remove } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CloneComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport function Clones( Splide: Splide, Components: Components, options: Options ): CloneComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Elements, Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, refresh );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n  }\r\n\r\n  /**\r\n   * Removes all clones if available, and generates new clones.\r\n   */\r\n  function init(): void {\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    remove( clones );\r\n    empty( clones );\r\n  }\r\n\r\n  /**\r\n   * Discards all clones and regenerates them.\r\n   * Must do this before the Elements component collects slide elements.\r\n   */\r\n  function refresh(): void {\r\n    destroy();\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\r\n  function observe(): void {\r\n    if ( cloneCount !== computeCloneCount() ) {\r\n      emit( EVENT_REFRESH );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( ! clones ) {\r\n      const fixedSize  = measure( Elements.list, options[ resolve( 'fixedWidth' ) ] );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      const baseCount  = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage;\r\n\r\n      clones = baseCount * ( options.drag ? ( options.flickMaxPages || 1 ) + 1 : 2 );\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface, Throttle } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, assert, isObject, rect, style, unit } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize(): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component that layouts slider components and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport function Layout( Splide: Splide, Components: Components, options: Options ): LayoutComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { Slides } = Components;\r\n  const { ruleBy } = Components.Style;\r\n  const { resolve } = Components.Direction;\r\n  const { track, list } = Components.Elements;\r\n  const { getAt } = Slides;\r\n  const vertical = options.direction === TTB;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n\r\n    bind( window, 'resize load', Throttle( emit.bind( this, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    ruleBy( Splide.root, 'maxWidth', unit( options.width ) );\r\n    ruleBy( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    ruleBy( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    Slides.rule( resolve( 'marginRight' ), unit( options.gap ) );\r\n    Slides.rule( 'width', cssSlideWidth() );\r\n\r\n    setSlidesHeight();\r\n    resize();\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the slider is resized.\r\n   */\r\n  function resize(): void {\r\n    ruleBy( track, 'height', cssTrackHeight() );\r\n    options.heightRatio && setSlidesHeight();\r\n    emit( EVENT_RESIZED );\r\n  }\r\n\r\n  /**\r\n   * Updates the height of slides or their container elements if available.\r\n   */\r\n  function setSlidesHeight(): void {\r\n    Slides.rule( 'height', cssSlideHeight(), true );\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left', true );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string {\r\n    return options.autoWidth ? '' : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? '' : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index?: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index || 0 );\r\n    return Slide\r\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n\r\n    if ( Slide ) {\r\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\r\n      const left  = rect( list )[ resolve( 'left' ) ];\r\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize(): number {\r\n    return totalSize( Splide.length - 1, true ) - totalSize( -1, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the gap value.\r\n   *\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const Slide = getAt( 0 );\r\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style( track, resolve( `padding${ right ? 'Right' : 'Left' }`, true ) ) ) || 0;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n  };\r\n}\r\n","import {\n  EVENT_MOUNTED,\n  EVENT_MOVE,\n  EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_RESIZED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { IDLE, MOVING } from '../../constants/states';\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport { abs, clamp, isUndefined, rect } from '../../utils';\n\n\n/**\n * The interface for the Move component.\n *\n * @since 3.0.0\n */\nexport interface MoveComponent extends BaseComponent {\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\n  jump( index: number ): void;\n  translate( position: number ): void;\n  cancel( settle?: boolean ): void;\n  toIndex( position: number ): number;\n  toPosition( index: number, trimming?: boolean ): number;\n  getPosition(): number;\n  getLimit( max: boolean ): number;\n  isBusy(): boolean;\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\n}\n\n/**\n * The component for moving the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Move component object.\n */\nexport function Move( Splide: Splide, Components: Components, options: Options ): MoveComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\n  const { resolve, orient } = Components.Direction;\n  const { list, track } = Components.Elements;\n\n  /**\n   * Indicates whether the component can move the slider or not.\n   */\n  let waiting: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( ! Splide.is( FADE ) ) {\n      on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition, DEFAULT_EVENT_PRIORITY - 1 );\n    }\n  }\n\n  /**\n   * Repositions the slider.\n   * This must be called before the Slide component checks the visibility.\n   */\n  function reposition(): void {\n    Components.Scroll.cancel();\n    cancel( false );\n    jump( Splide.index );\n  }\n\n  /**\n   * Moves the slider to the dest index with the Transition component.\n   *\n   * @param dest     - A destination index to go to, including clones'.\n   * @param index    - A slide index.\n   * @param prev     - A previous index.\n   * @param callback - Optional. A callback function invoked after transition ends.\n   */\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\n    if ( ! isBusy() ) {\n      const { set } = Splide.state;\n      const position = getPosition();\n      const looping  = dest !== index;\n\n      waiting = looping || options.waitForTransition;\n      set( MOVING );\n      emit( EVENT_MOVE, index, prev, dest );\n\n      Components.Transition.start( dest, () => {\n        looping && jump( index );\n        waiting = false;\n        set( IDLE );\n        emit( EVENT_MOVED, index, prev, dest );\n\n        if ( options.trimSpace === 'move' && dest !== prev && position === getPosition() ) {\n          Components.Controller.go( dest > prev ? '>' : '<', false, callback );\n        } else {\n          callback && callback();\n        }\n      } );\n    }\n  }\n\n  /**\n   * Jumps to the slide at the specified index.\n   *\n   * @param index - An index to jump to.\n   */\n  function jump( index: number ): void {\n    translate( toPosition( index, true ) );\n  }\n\n  /**\n   * Moves the slider to the provided position.\n   *\n   * @param position - The position to move to.\n   */\n  function translate( position: number ): void {\n    Components.Style.ruleBy(\n      list,\n      'transform',\n      `translate${ resolve( 'X' ) }(${ loop( position ) }px)`\n    );\n  }\n\n  /**\n   * Loops the provided position if it exceeds bounds.\n   *\n   * @param position - A position to loop.\n   */\n  function loop( position: number ): number {\n    if ( ! waiting && Splide.is( LOOP ) ) {\n      const diff        = position - getPosition();\n      const exceededMin = exceededLimit( false, position );\n      const exceededMax = exceededLimit( true, position );\n\n      if ( ( exceededMin && diff > 0 ) || ( exceededMax && diff < 0 ) ) {\n        position += orient( sliderSize() * ( exceededMin ? 1 : -1 ) );\n      }\n    }\n\n    return position;\n  }\n\n  /**\n   * Cancels transition.\n   *\n   * @param settle - Determines whether to settle the position or not.\n   */\n  function cancel( settle?: boolean ): void {\n    waiting = false;\n    Components.Transition.cancel();\n\n    if ( settle ) {\n      translate( getPosition() );\n    }\n  }\n\n  /**\n   * Returns the closest index to the position.\n   *\n   * @param position - A position to convert.\n   *\n   * @return The closest index to the position.\n   */\n  function toIndex( position: number ): number {\n    const Slides = Components.Slides.get();\n\n    let index       = 0;\n    let minDistance = Infinity;\n\n    for ( let i = 0; i < Slides.length; i++ ) {\n      const slideIndex = Slides[ i ].index;\n      const distance   = abs( toPosition( slideIndex, true ) - position );\n\n      if ( distance < minDistance ) {\n        minDistance = distance;\n        index       = slideIndex;\n      } else {\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the slide index to the position.\n   *\n   * @param index    - An index to convert.\n   * @param trimming - Optional. Whether to trim edge spaces or not.\n   *\n   * @return The position corresponding with the index.\n   */\n  function toPosition( index: number, trimming?: boolean ): number {\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\n    return trimming ? trim( position ) : position;\n  }\n\n  /**\n   * Returns the current position.\n   *\n   * @return The position of the list element.\n   */\n  function getPosition(): number {\n    const left = resolve( 'left' );\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\n  }\n\n  /**\n   * Trims spaces on the edge of the slider.\n   *\n   * @param position - A position to trim.\n   *\n   * @return A trimmed position.\n   */\n  function trim( position: number ): number {\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\n      position = clamp( position, 0, orient( sliderSize() - listSize() ) );\n    }\n\n    return position;\n  }\n\n  /**\n   * Returns the offset amount.\n   *\n   * @param index - An index.\n   */\n  function offset( index: number ): number {\n    const { focus } = options;\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\n  }\n\n  /**\n   * Returns the limit number that the slider can move to.\n   *\n   * @param max - Determines whether to return the maximum or minimum limit.\n   *\n   * @return The border number.\n   */\n  function getLimit( max: boolean ): number {\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\n  }\n\n  /**\n   * Checks if the slider can move now or not.\n   *\n   * @return `true` if the slider can move, or otherwise `false`.\n   */\n  function isBusy(): boolean {\n    return !! waiting;\n  }\n\n  /**\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\n   *\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\n   * @param position - Optional. A position to test. If omitted, tests the current position.\n   *\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\n   */\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\n    position = isUndefined( position ) ? getPosition() : position;\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\n    return exceededMin || exceededMax;\n  }\n\n  return {\n    mount,\n    move,\n    jump,\n    translate,\n    cancel,\n    toIndex,\n    toPosition,\n    getPosition,\n    getLimit,\n    isBusy,\n    exceededLimit,\n  };\n}\n","import { EVENT_REFRESH, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport { approximatelyEqual, between, clamp, floor, isString, isUndefined, max } from '../../utils';\n\n\n/**\n * The interface for the Controller component.\n *\n * @since 3.0.0\n */\nexport interface ControllerComponent extends BaseComponent {\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\n  getNext( destination?: boolean ): number;\n  getPrev( destination?: boolean ): number;\n  getEnd(): number;\n  setIndex( index: number ): void;\n  getIndex( prev?: boolean ): number;\n  toIndex( page: number ): number;\n  toPage( index: number ): number;\n  hasFocus(): boolean;\n}\n\n/**\n * The component for controlling the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Controller component object.\n */\nexport function Controller( Splide: Splide, Components: Components, options: Options ): ControllerComponent {\n  const { on } = EventInterface( Splide );\n  const { Move } = Components;\n  const { getPosition, getLimit } = Move;\n  const { isEnough, getLength } = Components.Slides;\n  const isLoop = Splide.is( LOOP );\n\n  /**\n   * The current index.\n   */\n  let currIndex = options.start || 0;\n\n  /**\n   * The previous index.\n   */\n  let prevIndex = currIndex;\n\n  /**\n   * The latest number of slides.\n   */\n  let slideCount: number;\n\n  /**\n   * The latest `perMove` value.\n   */\n  let perMove: number;\n\n  /**\n   * The latest `perMove` value.\n   */\n  let perPage: number;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    // jump( currIndex );\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init, DEFAULT_EVENT_PRIORITY - 2 );\n    on( EVENT_SCROLLED, reindex, 0 );\n  }\n\n  /**\n   * Initializes some parameters.\n   * Needs to check the slides length since the current index may be out of the range after refresh.\n   */\n  function init(): void {\n    slideCount = getLength( true );\n    perMove    = options.perMove;\n    perPage    = options.perPage;\n    currIndex  = clamp( currIndex, 0, slideCount - 1 );\n  }\n\n  /**\n   * Calculates the index by the current position and updates the current index.\n   */\n  function reindex(): void {\n    setIndex( Move.toIndex( getPosition() ) );\n  }\n\n  /**\n   * Moves the slider by the control pattern.\n   *\n   * @see `Splide#go()`\n   *\n   * @param control        - A control pattern.\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\n   * @param callback       - Optional. A callback function invoked after transition ends.\n   */\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\n    const dest  = parse( control );\n    const index = loop( dest );\n\n    if ( index > -1 && ! Move.isBusy() && ( allowSameIndex || index !== currIndex ) ) {\n      setIndex( index );\n      Move.move( dest, index, prevIndex, callback );\n    }\n  }\n\n  /**\n   * Parses the control and returns a slide index.\n   *\n   * @param control - A control pattern to parse.\n   */\n  function parse( control: number | string ): number {\n    let index = currIndex;\n\n    if ( isString( control ) ) {\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\n\n      if ( indicator === '+' || indicator === '-' ) {\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex, true );\n      } else if ( indicator === '>' ) {\n        index = number ? toIndex( +number ) : getNext( true );\n      } else if ( indicator === '<' ) {\n        index = getPrev( true );\n      }\n    } else {\n      if ( isLoop ) {\n        index = clamp( control, -perPage, slideCount + perPage - 1 );\n      } else {\n        index = clamp( control, 0, getEnd() );\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns a next destination index.\n   *\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return A next index if available, or otherwise `-1`.\n   */\n  function getNext( destination?: boolean ): number {\n    return getAdjacent( false, destination );\n  }\n\n  /**\n   * Returns a previous destination index.\n   *\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return A previous index if available, or otherwise `-1`.\n   */\n  function getPrev( destination?: boolean ): number {\n    return getAdjacent( true, destination );\n  }\n\n  /**\n   * Returns an adjacent destination index.\n   *\n   * @param prev        - Determines whether to return a previous or next index.\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return An adjacent index if available, or otherwise `-1`.\n   */\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\n    const number = perMove || hasFocus() ? 1 : perPage;\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex );\n\n    if ( dest === -1 && Splide.is( SLIDE ) ) {\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\n        return prev ? 0 : getEnd();\n      }\n    }\n\n    return destination ? dest : loop( dest );\n  }\n\n  /**\n   * Converts the desired destination index to the valid one.\n   * - This may return clone indices if the editor is the loop mode,\n   *   or `-1` if there is no slide to go.\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\n   *\n   * @param dest        - The desired destination.\n   * @param from        - A base index.\n   * @param incremental - Optional. Whether the control is incremental or not.\n   *\n   * @return A converted destination index, including clones.\n   */\n  function computeDestIndex( dest: number, from: number, incremental?: boolean ): number {\n    if ( isEnough() ) {\n      const end = getEnd();\n\n      // Will overrun:\n      if ( dest < 0 || dest > end ) {\n        if ( between( 0, dest, from, true ) || between( end, from, dest, true ) ) {\n          dest = toIndex( toPage( dest ) );\n        } else {\n          if ( isLoop ) {\n            dest = perMove\n              ? dest\n              : dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount;\n          } else if ( options.rewind ) {\n            dest = dest < 0 ? end : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if ( ! isLoop && ! incremental && dest !== from ) {\n          dest = perMove ? dest : toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\n        }\n      }\n    } else {\n      dest = -1;\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns the end index where the slider can go.\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\n   * the slider can go to the slide 8 (the index is 7).\n   *\n   * @return An end index.\n   */\n  function getEnd(): number {\n    let end = slideCount - perPage;\n\n    if ( hasFocus() || ( isLoop && perMove ) ) {\n      end = slideCount - 1;\n    }\n\n    return max( end, 0 );\n  }\n\n  /**\n   * Loops the provided index only in the loop mode.\n   *\n   * @param index - An index to loop.\n   *\n   * @return A looped index.\n   */\n  function loop( index: number ): number {\n    if ( isLoop ) {\n      return isEnough() ? index % slideCount + ( index < 0 ? slideCount : 0 ) : -1;\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the page index to the slide index.\n   *\n   * @param page - A page index to convert.\n   *\n   * @return A slide index.\n   */\n  function toIndex( page: number ): number {\n    return clamp( hasFocus() ? page : perPage * page, 0, getEnd() );\n  }\n\n  /**\n   * Converts the slide index to the page index.\n   *\n   * @param index - An index to convert.\n   */\n  function toPage( index: number ): number {\n    if ( ! hasFocus() ) {\n      index = between( index, slideCount - perPage, slideCount - 1 ) ? slideCount - 1 : index;\n      index = floor( index / perPage );\n    }\n\n    return index;\n  }\n\n  /**\n   * Sets a new index and retains old one.\n   *\n   * @param index - A new index to set.\n   */\n  function setIndex( index: number ): void {\n    if ( index !== currIndex ) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n\n  /**\n   * Returns the current/previous index.\n   *\n   * @param prev - Optional. Whether to return previous index or not.\n   */\n  function getIndex( prev?: boolean ): number {\n    return prev ? prevIndex : currIndex;\n  }\n\n  /**\n   * Verifies if the focus option is available or not.\n   *\n   * @return `true` if the slider has the focus option.\n   */\n  function hasFocus(): boolean {\n    return ! isUndefined( options.focus ) || options.isNavigation;\n  }\n\n  return {\n    mount,\n    go,\n    getNext,\n    getPrev,\n    getEnd,\n    setIndex,\n    getIndex,\n    toIndex,\n    toPage,\n    hasFocus,\n  };\n}\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { append, before, child, create, display, parseHtml, remove, removeAttribute, setAttribute } from '../../utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport function Arrows( Splide: Splide, Components: Components, options: Options ): ArrowsComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = Elements.arrows;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    if ( options.arrows ) {\r\n      if ( ! prev || ! next ) {\r\n        createArrows();\r\n      }\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      if ( ! arrows.prev ) {\r\n        const { id } = Elements.track;\r\n\r\n        setAttribute( prev, ARIA_CONTROLS, id );\r\n        setAttribute( next, ARIA_CONTROLS, id );\r\n\r\n        arrows.prev = prev;\r\n        arrows.next = next;\r\n\r\n        listen();\r\n\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      } else {\r\n        display( wrapper, options.arrows === false ? 'none' : '' );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( created ) {\r\n      remove( wrapper );\r\n    } else {\r\n      removeAttribute( prev, ALL_ATTRIBUTES );\r\n      removeAttribute( next, ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    const { go } = Controller;\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update );\r\n    bind( next, 'click', () => { go( '>', true ) } );\r\n    bind( prev, 'click', () => { go( '<', true ) } );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    before( wrapper, child( options.arrows === 'slider' && Elements.slider || Splide.root ) );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    const index     = Splide.index;\r\n    const prevIndex = Controller.getPrev();\r\n    const nextIndex = Controller.getNext();\r\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n    prev.disabled = prevIndex < 0;\r\n    next.disabled = nextIndex < 0;\r\n\r\n    setAttribute( prev, ARIA_LABEL, prevLabel );\r\n    setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n    emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\nimport {\n  EVENT_AUTOPLAY_PAUSE,\n  EVENT_AUTOPLAY_PLAY,\n  EVENT_AUTOPLAY_PLAYING,\n  EVENT_MOVE,\n  EVENT_REFRESH,\n  EVENT_SCROLL,\n} from '../../constants/events';\nimport { EventInterface, RequestInterval } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { setAttribute, style } from '../../utils';\n\n\n/**\n * The interface for the Autoplay component.\n *\n * @since 3.0.0\n */\nexport interface AutoplayComponent extends BaseComponent {\n  play(): void;\n  pause(): void;\n  isPaused(): boolean;\n}\n\n/**\n * The component for auto playing sliders.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Autoplay component object.\n */\nexport function Autoplay( Splide: Splide, Components: Components, options: Options ): AutoplayComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const { Elements } = Components;\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), update );\n  const { isPaused } = interval;\n\n  /**\n   * Indicates whether the slider is hovered or not.\n   */\n  let hovered: boolean;\n\n  /**\n   * Indicates whether one of slider elements has focus or not.\n   */\n  let focused: boolean;\n\n  /**\n   * Turns into `true` when autoplay is manually paused.\n   */\n  let paused: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    const { autoplay } = options;\n\n    if ( autoplay ) {\n      initButton( true );\n      initButton( false );\n      listen();\n\n      if ( autoplay !== 'pause' ) {\n        play();\n      }\n    }\n  }\n\n  /**\n   * Initializes a play/pause button.\n   *\n   * @param forPause - Determines whether to initialize a pause or play button.\n   */\n  function initButton( forPause: boolean ): void {\n    const prop   = forPause ? 'pause' : 'play';\n    const button = Elements[ prop ];\n\n    if ( button ) {\n      setAttribute( button, ARIA_CONTROLS, Elements.track.id );\n      setAttribute( button, ARIA_LABEL, options.i18n[ prop ] );\n\n      bind( button, 'click', forPause ? pause : play );\n    }\n  }\n\n  /**\n   * Listens to some events.\n   */\n  function listen(): void {\n    const { root } = Elements;\n\n    if ( options.pauseOnHover ) {\n      bind( root, 'mouseenter mouseleave', e => {\n        hovered = e.type === 'mouseenter';\n        autoToggle();\n      } );\n    }\n\n    if ( options.pauseOnFocus ) {\n      bind( root, 'focusin focusout', e => {\n        focused = e.type === 'focusin';\n        autoToggle();\n      } );\n    }\n\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\n  }\n\n  /**\n   * Starts autoplay and clears all flags.\n   */\n  function play(): void {\n    if ( isPaused() && Components.Slides.isEnough() ) {\n      interval.start( ! options.resetProgress );\n      focused = hovered = paused = false;\n      emit( EVENT_AUTOPLAY_PLAY );\n    }\n  }\n\n  /**\n   * Pauses autoplay.\n   *\n   * @param manual - If `true`, autoplay keeps paused until `play()` is explicitly called.\n   */\n  function pause( manual = true ): void {\n    if ( ! isPaused() ) {\n      interval.pause();\n      emit( EVENT_AUTOPLAY_PAUSE );\n    }\n\n    paused = manual;\n  }\n\n  /**\n   * Toggles play/pause according to current flags.\n   * If autoplay is manually paused, this will do nothing.\n   */\n  function autoToggle(): void {\n    if ( ! paused ) {\n      if ( ! hovered && ! focused ) {\n        play();\n      } else {\n        pause( false );\n      }\n    }\n  }\n\n  /**\n   * Called on every animation frame when auto playing.\n   *\n   * @param rate - The progress rate between 0 to 1.\n   */\n  function update( rate: number ): void {\n    const { bar } = Elements;\n\n    if ( bar ) {\n      style( bar, { width: `${ rate * 100 }%` } );\n    }\n\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\n  }\n\n  return {\n    mount,\n    destroy: interval.cancel,\n    play,\n    pause,\n    isPaused,\n  };\n}\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { child, display } from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Cover component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CoverComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Cover component object.\r\n */\r\nexport function Cover( Splide: Splide, Components: Components, options: Options ): CoverComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.cover ) {\r\n      on( EVENT_LAZYLOAD_LOADED, ( img, Slide ) => { toggle( true, img, Slide ) } );\r\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply.bind( null, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    apply( false );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\r\n  function apply( cover: boolean ): void {\r\n    Components.Slides.forEach( Slide => {\r\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\r\n\r\n      if ( img && img.src ) {\r\n        toggle( cover, img, Slide );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\r\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\r\n    Slide.rule( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\r\n    display( img, cover ? 'none' : '' );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { EventInterface, RequestInterval, RequestIntervalInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, max } from '../../utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport function Scroll( Splide: Splide, Components: Components, options: Options ): ScrollComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit } = Move;\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestIntervalInterface;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination        - The destination to scroll to.\r\n   * @param duration           - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param suppressConstraint - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll( destination: number, duration?: number, suppressConstraint?: boolean ): void {\r\n    const start = getPosition();\r\n    let friction = 1;\r\n\r\n    duration = duration || computeDuration( abs( destination - start ) );\r\n    clear();\r\n\r\n    interval = RequestInterval( duration, onScrolled, rate => {\r\n      const position = getPosition();\r\n      const target   = start + ( destination - start ) * easing( rate );\r\n      const diff     = ( target - getPosition() ) * friction;\r\n\r\n      Move.translate( position + diff );\r\n\r\n      if ( Splide.is( SLIDE ) && ! suppressConstraint && exceededLimit() ) {\r\n        friction *= FRICTION_FACTOR;\r\n\r\n        if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n          bounce( exceededLimit( false ) );\r\n        }\r\n      }\r\n    }, 1 );\r\n\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Triggers the bounce effect when the slider reaches bounds.\r\n   *\r\n   * @param backwards - The direction the slider is going towards.\r\n   */\r\n  function bounce( backwards: boolean ): void {\r\n    scroll( getLimit( ! backwards ), BOUNCE_DURATION, true );\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or is canceled.\r\n   */\r\n  function onScrolled(): void {\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Computes the scroll duration by the distance and the base velocity.\r\n   *\r\n   * @param distance - Distance in pixel.\r\n   *\r\n   * @return The duration for scroll.\r\n   */\r\n  function computeDuration( distance: number ): number {\r\n    return max( distance / BASE_VELOCITY, MIN_DURATION );\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onScrolled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n}\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 50;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup mouseleave';\r\n","import { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, clamp, min, prevent, sign } from '../../utils';\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\n\n\n/**\n * The interface for the Drag component.\n *\n * @since 3.0.0\n */\nexport interface DragComponent extends BaseComponent {\n  disable( disabled: boolean ): void\n}\n\n/**\n * The component for dragging the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Drag component object.\n */\nexport function Drag( Splide: Splide, Components: Components, options: Options ): DragComponent {\n  const { on, emit, bind, unbind } = EventInterface( Splide );\n  const { Move, Scroll, Controller } = Components;\n  const { track } = Components.Elements;\n  const { resolve, orient } = Components.Direction;\n  const { getPosition, exceededLimit } = Move;\n  const isSlide = Splide.is( SLIDE );\n  const isFade  = Splide.is( FADE );\n\n  /**\n   * The base slider position to calculate the delta of coords.\n   */\n  let basePosition: number;\n\n  /**\n   * The base event object saved per specific sampling interval.\n   */\n  let baseEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Holds the previous base event object.\n   */\n  let prevBaseEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Keeps the last TouchEvent/MouseEvent object on pointermove.\n   */\n  let lastEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Indicates whether the drag mode is `free` or not.\n   */\n  let isFree: boolean;\n\n  /**\n   * Indicates whether the user is dragging the slider or not.\n   */\n  let isDragging: boolean;\n\n  /**\n   * Indicates whether the user drags the slider by the mouse or not.\n   */\n  let isMouse: boolean;\n\n  /**\n   * Indicates whether the slider exceeds limits or not.\n   * This must not be `undefined` for strict comparison.\n   */\n  let hasExceeded = false;\n\n  /**\n   * Turns into `true` when the user starts dragging the slider.\n   */\n  let clickPrevented: boolean;\n\n  /**\n   * Indicates whether the drag component is now disabled or not.\n   */\n  let disabled: boolean;\n\n  /**\n   * The target element to attach listeners.\n   */\n  let target: Window | HTMLElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, { passive: false, capture: true } );\n    bind( track, 'click', onClick, { capture: true } );\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    const { drag } = options;\n    disable( ! drag );\n    isFree = drag === 'free';\n  }\n\n  /**\n   * Called when the user clicks or touches the slider.\n   * Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images.\n   * Note that IE does not support MouseEvent and TouchEvent constructors.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\n    if ( ! disabled ) {\n      isMouse = e.type === 'mousedown';\n\n      if ( ! isMouse || ! ( e as MouseEvent ).button ) {\n        if ( ! Move.isBusy() ) {\n          target         = isMouse ? window : track;\n          prevBaseEvent  = null;\n          lastEvent      = null;\n          clickPrevented = false;\n\n          bind( target, POINTER_MOVE_EVENTS, onPointerMove );\n          bind( target, POINTER_UP_EVENTS, onPointerUp );\n          Move.cancel( true );\n          Scroll.cancel();\n          save( e );\n        } else {\n          prevent( e, true );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called while the user moves the pointer on the slider.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\n    if ( ! lastEvent ) {\n      clickPrevented = true;\n      emit( EVENT_DRAG );\n    }\n\n    lastEvent = e;\n\n    if ( e.cancelable ) {\n      if ( isDragging ) {\n        const expired  = timeOf( e ) - timeOf( baseEvent ) > LOG_INTERVAL;\n        const exceeded = hasExceeded !== ( hasExceeded = exceededLimit() );\n\n        if ( expired || exceeded ) {\n          save( e );\n        }\n\n        if ( ! isFade ) {\n          Move.translate( basePosition + constrain( coordOf( e ) - coordOf( baseEvent ) ) );\n        }\n\n        emit( EVENT_DRAGGING );\n        prevent( e );\n      } else {\n        const threshold = options.dragMinThreshold || 15;\n        isDragging = isMouse || abs( coordOf( e ) - coordOf( baseEvent ) ) > threshold;\n\n        if ( isSliderDirection() ) {\n          prevent( e );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when the user releases pointing devices.\n   * Be aware that the TouchEvent object provided by the `touchend` does not contain `Touch` objects,\n   * which means the last touch position is not available.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\n    unbind( target, `${ POINTER_MOVE_EVENTS } ${ POINTER_UP_EVENTS }` );\n\n    if ( lastEvent ) {\n      if ( isDragging || ( e.cancelable && isSliderDirection() ) ) {\n        const velocity    = computeVelocity( e );\n        const destination = computeDestination( velocity );\n\n        if ( isFree ) {\n          Scroll.scroll( destination );\n        } else if ( isFade ) {\n          Controller.go( Splide.index + orient( sign( velocity ) ) );\n        } else {\n          Controller.go( computeIndex( destination ), true );\n        }\n\n        prevent( e );\n      }\n\n      emit( EVENT_DRAGGED );\n    }\n\n    isDragging = false;\n  }\n\n  /**\n   * Saves data at the specific moment.\n   *\n   * @param e  A TouchEvent or MouseEvent object\n   */\n  function save( e: TouchEvent | MouseEvent ): void {\n    prevBaseEvent = baseEvent;\n    baseEvent     = e;\n    basePosition  = getPosition();\n  }\n\n  /**\n   * Called when the track element is clicked.\n   * Disables click any elements inside it while dragging.\n   *\n   * @param e - A MouseEvent object.\n   */\n  function onClick( e: MouseEvent ): void {\n    if ( ! disabled && clickPrevented ) {\n      prevent( e, true );\n    }\n  }\n\n  /**\n   * Checks whether dragging towards the slider or scroll direction.\n   *\n   * @return `true` if going towards the slider direction, or otherwise `false`.\n   */\n  function isSliderDirection(): boolean {\n    const diffX = abs( coordOf( lastEvent ) - coordOf( baseEvent ) );\n    const diffY = abs( coordOf( lastEvent, true ) - coordOf( baseEvent, true ) );\n    return diffX > diffY;\n  }\n\n  /**\n   * Computes the drag velocity.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   *\n   * @return The drag velocity.\n   */\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\n    if ( Splide.is( LOOP ) || ! hasExceeded ) {\n      const base      = baseEvent === lastEvent && prevBaseEvent || baseEvent;\n      const diffCoord = coordOf( lastEvent ) - coordOf( base );\n      const diffTime  = timeOf( e ) - timeOf( base );\n      const isFlick   = timeOf( e ) - timeOf( lastEvent ) < LOG_INTERVAL;\n\n      if ( diffTime && isFlick ) {\n        return diffCoord / diffTime;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Computes the destination by the velocity and the `flickPower` option.\n   *\n   * @param velocity - The drag velocity.\n   *\n   * @return The destination.\n   */\n  function computeDestination( velocity: number ): number {\n    return getPosition() + sign( velocity ) * min(\n      abs( velocity ) * ( options.flickPower || 600 ),\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\n    );\n  }\n\n  /**\n   * Converts the destination to the slide index.\n   *\n   * @param destination - The target destination.\n   *\n   * @return The destination index.\n   */\n  function computeIndex( destination: number ): number {\n    const dest = Move.toIndex( destination );\n    return isSlide ? clamp( dest, 0, Controller.getEnd() ) : dest;\n  }\n\n  /**\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\n   *\n   * @param e          - A TouchEvent or MouseEvent object.\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\n   *\n   * @return A pageX or pageY coordinate.\n   */\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\n    const prop = `page${ resolve( orthogonal ? 'Y' : 'X' ) }`;\n    return ( isMouse ? e : ( e as TouchEvent ).touches[ 0 ] )[ prop ];\n  }\n\n  /**\n   * Returns the time stamp in the provided event object.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   *\n   * @return A time stamp.\n   */\n  function timeOf( e: TouchEvent | MouseEvent ): number {\n    return e.timeStamp;\n  }\n\n  /**\n   * Reduces the distance to move by the predefined friction.\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\n   *\n   * @param diff - Diff to constrain.\n   *\n   * @return The constrained diff.\n   */\n  function constrain( diff: number ): number {\n    return diff / ( hasExceeded && isSlide ? FRICTION : 1 );\n  }\n\n  /**\n   * Disables the component.\n   *\n   * @param value - Set `true` to disable the component.\n   */\n  function disable( value: boolean ): void {\n    disabled = value;\n  }\n\n  return {\n    mount,\n    disable,\n  };\n}\n","import { TAB_INDEX } from '../../constants/attributes';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { includes, isHTMLElement, removeAttribute, setAttribute } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The collection of arrow keys of IE.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst IE_ARROW_KEYS = [ 'Left', 'Right', 'Up', 'Down' ];\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport function Keyboard( Splide: Splide, Components: Components, options: Options ): KeyboardComponent {\r\n  const { on, bind, unbind } = EventInterface( Splide );\r\n  const { root } = Components.Elements;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n\r\n    on( EVENT_UPDATED, () => {\r\n      destroy();\r\n      init();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard = 'global' } = options;\r\n\r\n    if ( keyboard ) {\r\n      if ( keyboard === 'focused' ) {\r\n        target = root;\r\n        setAttribute( root, TAB_INDEX, 0 );\r\n      } else {\r\n        target = window;\r\n      }\r\n\r\n      bind( target, 'keydown', onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy() {\r\n    unbind( target, 'keydown' );\r\n\r\n    if ( isHTMLElement( target ) ) {\r\n      removeAttribute( target, TAB_INDEX );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    const { key } = e;\r\n    const normalizedKey = includes( IE_ARROW_KEYS, key ) ? `Arrow${ key }` : key;\r\n\r\n    if ( normalizedKey === resolve( 'ArrowLeft' ) ) {\r\n      Splide.go( '<' );\r\n    } else if ( normalizedKey === resolve( 'ArrowRight' ) ) {\r\n      Splide.go( '>' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ROLE } from '../../constants/attributes';\r\nimport { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  create,\r\n  display,\r\n  getAttribute,\r\n  queryAll,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The interface for all components.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadImagesData {\r\n  _img: HTMLImageElement;\r\n  _spinner: HTMLSpanElement;\r\n  _Slide: SlideComponent;\r\n  src: string | null;\r\n  srcset: string | null;\r\n}\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport function LazyLoad( Splide: Splide, Components: Components, options: Options ): LazyLoadComponent {\r\n  const { on, off, bind, emit } = EventInterface( Splide );\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let images: LazyLoadImagesData[] = [];\r\n\r\n  /**\r\n   * The current index of images.\r\n   */\r\n  let index = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n        destroy();\r\n        init();\r\n      } );\r\n\r\n      if ( ! isSequential ) {\r\n        on( [ EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED ], observe );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images that contain specific data attributes.\r\n   */\r\n  function init() {\r\n    Components.Slides.forEach( _Slide => {\r\n      queryAll<HTMLImageElement>( _Slide.slide, IMAGE_SELECTOR ).forEach( _img => {\r\n        const src    = getAttribute( _img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( _img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== _img.src || srcset !== _img.srcset ) {\r\n          const _spinner = create( 'span', options.classes.spinner, _img.parentElement );\r\n          setAttribute( _spinner, ROLE, 'presentation' );\r\n          images.push( { _img, _Slide, src, srcset, _spinner } );\r\n          display( _img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy() {\r\n    index  = 0;\r\n    images = [];\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function observe(): void {\r\n    images = images.filter( data => {\r\n      if ( data._Slide.isWithin( Splide.index, options.perPage * ( ( options.preloadPages || 1 ) + 1 ) ) ) {\r\n        return load( data );\r\n      }\r\n\r\n      return true;\r\n    } );\r\n\r\n    if ( ! images.length ) {\r\n      off( EVENT_MOVED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the data.\r\n   *\r\n   * @param data - A LazyLoadImagesData object.\r\n   */\r\n  function load( data: LazyLoadImagesData ): void {\r\n    const { _img } = data;\r\n\r\n    addClass( data._Slide.slide, CLASS_LOADING );\r\n    bind( _img, 'load error', e => { onLoad( data, e.type === 'error' ) } );\r\n\r\n    [ 'src', 'srcset' ].forEach( name => {\r\n      if ( data[ name ] ) {\r\n        setAttribute( _img, name, data[ name ] );\r\n        removeAttribute( _img, name === 'src' ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data  - A LazyLoadImagesData object.\r\n   * @param error - `true` if this method is called on error.\r\n   */\r\n  function onLoad( data: LazyLoadImagesData, error: boolean ): void {\r\n    const { _Slide } = data;\r\n\r\n    removeClass( _Slide.slide, CLASS_LOADING );\r\n\r\n    if ( ! error ) {\r\n      remove( data._spinner );\r\n      display( data._img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, data._img, _Slide );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    if ( index < images.length ) {\r\n      load( images[ index++ ] );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL } from '../../constants/attributes';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport {\n  EVENT_MOVE,\n  EVENT_PAGINATION_MOUNTED,\n  EVENT_PAGINATION_UPDATED,\n  EVENT_REFRESH,\n  EVENT_SCROLLED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { addClass, ceil, create, empty, format, remove, removeAttribute, removeClass, setAttribute } from '../../utils';\n\n\n/**\n * The interface for the Pagination component.\n *\n * @since 3.0.0\n */\nexport interface PaginationComponent extends BaseComponent {\n  items: PaginationItem[];\n  getAt( index: number ): PaginationItem;\n}\n\n/**\n * The interface for data of the pagination.\n *\n * @since 3.0.0\n */\nexport interface PaginationData {\n  list: HTMLUListElement;\n  items: PaginationItem[];\n}\n\n/**\n * The interface for each pagination item.\n *\n * @since 3.0.0\n */\nexport interface PaginationItem {\n  li: HTMLLIElement;\n  button: HTMLButtonElement;\n  page: number;\n}\n\n/**\n * The component for handling previous and next arrows.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Arrows component object.\n */\nexport function Pagination( Splide: Splide, Components: Components, options: Options ): PaginationComponent {\n  const { on, emit, bind, unbind } = EventInterface( Splide );\n  const { Slides, Elements, Controller } = Components;\n  const { hasFocus, getIndex } = Controller;\n\n  /**\n   * Stores all pagination items.\n   */\n  const items: PaginationItem[] = [];\n\n  /**\n   * The pagination element.\n   */\n  let list: HTMLUListElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\n    on( [ EVENT_MOVE, EVENT_SCROLLED ], update );\n  }\n\n  /**\n   * Initializes the pagination.\n   */\n  function init(): void {\n    destroy();\n\n    if ( options.pagination && Slides.isEnough() ) {\n      createPagination();\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\n      update();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    if ( list ) {\n      remove( list );\n      items.forEach( item => { unbind( item.button, 'click' ) } );\n      empty( items );\n      list = null;\n    }\n  }\n\n  /**\n   * Creates the pagination element and appends it to the slider.\n   */\n  function createPagination(): void {\n    const { length } = Splide;\n    const { classes, i18n, perPage } = options;\n    const parent = options.pagination === 'slider' && Elements.slider || Elements.root;\n    const max    = hasFocus() ? length : ceil( length / perPage );\n\n    list = create( 'ul', classes.pagination, parent );\n\n    for ( let i = 0; i < max; i++ ) {\n      const li       = create( 'li', null, list );\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n\n      bind( button, 'click', onClick.bind( null, i ) );\n\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\n\n      items.push( { li, button, page: i } );\n    }\n  }\n\n  /**\n   * Called when the user clicks each pagination dot.\n   * Moves the focus to the active slide for accessibility.\n   *\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\n   *\n   * @param page - A clicked page index.\n   */\n  function onClick( page: number ): void {\n    Controller.go( `>${ page }`, true, () => {\n      const Slide = Slides.getAt( Controller.toIndex( page ) );\n      Slide && Slide.slide.focus();\n    } );\n  }\n\n  /**\n   * Returns the pagination item at the specified index.\n   *\n   * @param index - An index.\n   *\n   * @return A pagination item object if available, or otherwise `undefined`.\n   */\n  function getAt( index: number ): PaginationItem | undefined {\n    return items[ Controller.toPage( index ) ];\n  }\n\n  /**\n   * Updates the pagination status.\n   */\n  function update(): void {\n    const prev = getAt( getIndex( true ) );\n    const curr = getAt( getIndex() );\n\n    if ( prev ) {\n      removeClass( prev.button, CLASS_ACTIVE );\n      removeAttribute( prev.button, ARIA_CURRENT );\n    }\n\n    if ( curr ) {\n      addClass( curr.button, CLASS_ACTIVE );\n      setAttribute( curr.button, ARIA_CURRENT, true );\n    }\n\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\n  }\n\n  return {\n    items,\n    mount,\n    destroy,\n    getAt,\n  };\n}\n","import { ALL_ATTRIBUTES, ARIA_ORIENTATION, ROLE } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport { EVENT_CLICK, EVENT_MOVE, EVENT_NAVIGATION_MOUNTED, EVENT_SLIDE_KEYDOWN } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { empty, includes, prevent, removeAttribute, setAttribute } from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter', 'Spacebar' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport function Sync( Splide: Splide, Components: Components, options: Options ): SyncComponent {\r\n  const { splides } = Splide;\r\n  const { list } = Components.Elements;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.isNavigation ) {\r\n      navigate();\r\n    } else {\r\n      sync();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( list, ALL_ATTRIBUTES );\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index among all slides.\r\n   * The `processed` array prevents recursive call of handlers.\r\n   */\r\n  function sync(): void {\r\n    const processed: Splide[] = [];\r\n\r\n    splides.concat( Splide ).forEach( ( splide, index, instances ) => {\r\n      EventInterface( splide ).on( EVENT_MOVE, ( index, prev, dest ) => {\r\n        instances.forEach( instance => {\r\n          if ( instance !== splide && ! includes( processed, splide ) ) {\r\n            processed.push( instance );\r\n            instance.go( instance.is( LOOP ) ? dest : index );\r\n          }\r\n        } );\r\n\r\n        empty( processed );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const { on, emit } = EventInterface( Splide );\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n\r\n    setAttribute( list, ROLE, 'menu' );\r\n    setAttribute( list, ARIA_ORIENTATION, options.direction !== TTB ? 'horizontal' : null );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { prevent } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel( Splide: Splide, Components: Components, options: Options ): WheelComponent {\r\n  const { bind } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      bind( Components.Elements.track, 'wheel', onWheel, { passive: false, capture: true } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    const { deltaY } = e;\r\n\r\n    if ( deltaY ) {\r\n      Splide.go( deltaY < 0 ? '<' : '>' );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev  : 'Previous slide',\r\n  next  : 'Next slide',\r\n  first : 'Go to first slide',\r\n  last  : 'Go to last slide',\r\n  slideX: 'Go to slide %s',\r\n  pageX : 'Go to page %s',\r\n  play  : 'Start autoplay',\r\n  pause : 'Pause autoplay',\r\n};\r\n","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type             : 'slide',\r\n  speed            : 400,\r\n  waitForTransition: true,\r\n  perPage          : 1,\r\n  arrows           : true,\r\n  pagination       : true,\r\n  interval         : 5000,\r\n  pauseOnHover     : true,\r\n  pauseOnFocus     : true,\r\n  resetProgress    : true,\r\n  easing           : 'cubic-bezier(.42,.65,.27,.99)',\r\n  drag             : true,\r\n  direction        : 'ltr',\r\n  slideFocus       : true,\r\n  trimSpace        : true,\r\n  focusableNodes   : 'a, button, textarea, input, select, iframe',\r\n  classes          : CLASSES,\r\n  i18n             : I18N,\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { nextTick, noop, rect, unit } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Fade( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { ruleBy } = Components.Style;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * The nextTick disables the initial fade transition of the first slide.\r\n   */\r\n  function mount(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n      nextTick( () => {\r\n        Components.Slides.forEach( Slide => {\r\n          ruleBy( Slide.slide, 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n        } );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * Explicitly sets the track height to avoid it will collapse in Safari.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const { track } = Components.Elements;\r\n    ruleBy( track, 'height', unit( rect( track ).height ) );\r\n\r\n    nextTick( () => {\r\n      done();\r\n      ruleBy( track, 'height', '' );\r\n    } );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n}\r\n","import { SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { abs } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Slide( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { bind } = EventInterface( Splide );\r\n  const { Move, Controller } = Components;\r\n  const { list } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      apply( `transform ${ speed }ms ${ options.easing }` );\r\n      Move.translate( destination );\r\n      endCallback = done;\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    apply( '' );\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  /**\r\n   * Applies the transition CSS property to the list element.\r\n   *\r\n   * @param transition - A transition CSS value.\r\n   */\r\n  function apply( transition: string ): void {\r\n    Components.Style.ruleBy( list, 'transition', transition );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n}\r\n","import * as ComponentConstructors from '../../components';\nimport { SlideMatcher } from '../../components/Slides/Slides';\nimport { CLASS_INITIALIZED } from '../../constants/classes';\nimport { DEFAULTS } from '../../constants/defaults';\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_USER_EVENT_PRIORITY } from '../../constants/priority';\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\nimport { FADE } from '../../constants/types';\nimport { EventBus, EventBusCallback, EventBusObject, State, StateObject } from '../../constructors';\nimport { Fade, Slide } from '../../transitions';\nimport { ComponentConstructor, Components, Options } from '../../types';\nimport { EventMap } from '../../types/events';\nimport { addClass, assert, assign, empty, forOwn, isString, merge, query, slice } from '../../utils';\n\n\n/**\n * The frontend class for the Splide slider.\n *\n * @since 3.0.0\n */\nexport class Splide {\n  /**\n   * Changes the default options for all Splide instances.\n   */\n  static defaults: Options = {};\n\n  /**\n   * The collection of state numbers.\n   */\n  static readonly STATES = STATES;\n\n  /**\n   * The root element where the Splide is applied.\n   */\n  readonly root: HTMLElement;\n\n  /**\n   * The EventBusObject object.\n   */\n  readonly event: EventBusObject = EventBus();\n\n  /**\n   * The collection of all component objects.\n   */\n  readonly Components: Components = {} as Components;\n\n  /**\n   * The StateObject object.\n   */\n  readonly state: StateObject = State( CREATED );\n\n  /**\n   * Splide instances to sync with.\n   */\n  readonly splides: Splide[] = [];\n\n  /**\n   * The collection of options.\n   */\n  private readonly _options: Options = {};\n\n  /**\n   * The collection of all components.\n   */\n  private _Components: Components;\n\n  /**\n   * The collection of extensions.\n   */\n  private _Extensions: Record<string, ComponentConstructor> = {};\n\n  /**\n   * The Transition component.\n   */\n  private _Transition: ComponentConstructor;\n\n  /**\n   * The Splide constructor.\n   *\n   * @param target  - The selector for the target element, or the element itself.\n   * @param options - Optional. An object with options.\n   */\n  constructor( target: string | HTMLElement, options?: Options ) {\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\n    assert( root, `${ root } is invalid.` );\n\n    this.root = root;\n\n    merge( DEFAULTS, Splide.defaults );\n    merge( merge( this._options, DEFAULTS ), options || {} );\n  }\n\n  /**\n   * Initializes the instance.\n   *\n   * @param Extensions - Optional. An object with extensions.\n   * @param Transition - Optional. A Transition component.\n   *\n   * @return `this`\n   */\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\n    const { state, Components } = this;\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\n\n    state.set( CREATED );\n\n    this._Components = Components;\n    this._Transition = Transition || this._Transition || ( this.is( FADE ) ? Fade : Slide );\n    this._Extensions = Extensions || this._Extensions;\n\n    const Constructors = assign( {}, ComponentConstructors, this._Extensions, { Transition: this._Transition } );\n\n    forOwn( Constructors, ( Component, key ) => {\n      const component = Component( this, Components, this._options );\n      Components[ key ] = component;\n      component.setup && component.setup();\n    } );\n\n    forOwn( Components, component => {\n      component.mount && component.mount();\n    } );\n\n    this.emit( EVENT_MOUNTED );\n\n    addClass( this.root, CLASS_INITIALIZED );\n\n    state.set( IDLE );\n    this.emit( EVENT_READY );\n\n    return this;\n  }\n\n  /**\n   * Syncs the slider with the provided one.\n   * This method must be called before the `mount()`.\n   *\n   * @example\n   * ```ts\n   * var primary   = new Splide();\n   * var secondary = new Splide();\n   *\n   * primary.sync( secondary );\n   * primary.mount();\n   * secondary.mount();\n   * ```\n   *\n   * @param splide - A Splide instance to sync with.\n   *\n   * @return `this`\n   */\n  sync( splide: Splide ): this {\n    this.splides.push( splide );\n    splide.splides.push( this );\n    return this;\n  }\n\n  /**\n   * Moves the slider with the following control pattern.\n   *\n   * | Pattern | Description |\n   * |---|---|\n   * | `i` | Goes to the slide `i` |\n   * | `'+${i}'` | Increments the slide index by `i` |\n   * | `'-${i}'` | Decrements the slide index by `i` |\n   * | `'>'` | Goes to the next page |\n   * | `'<'` | Goes to the previous page |\n   * | `>${i}` | Goes to the page `i` |\n   *\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\n   * because they respect `perPage` and `perMove` options.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Goes to the slide 1:\n   * splide.go( 1 );\n   *\n   * // Increments the index:\n   * splide.go( '+2' );\n   *\n   * // Goes to the next page:\n   * splide.go( '>' );\n   *\n   * // Goes to the page 2:\n   * splide.go( '>2' );\n   * ```\n   *\n   * @param control - A control pattern.\n   *\n   * @return `this`\n   */\n  go( control: number | string ): this {\n    this._Components.Controller.go( control );\n    return this;\n  }\n\n  /**\n   * Registers an event handler.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Listens to a single event:\n   * splide.on( 'move', function() {} );\n   *\n   * // Listens to multiple events:\n   * splide.on( 'move resize', function() {} );\n   *\n   * // Appends a namespace:\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\n   * ```\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\n   * @param callback - A callback function.\n   *\n   * @return `this`\n   */\n  on<K extends keyof EventMap>( events: K, callback: ( ...args: EventMap[ K ] ) => void ): this;\n  on( events: string | string[], callback: EventBusCallback ): this {\n    this.event.on( events, callback, null, DEFAULT_USER_EVENT_PRIORITY );\n    return this;\n  }\n\n  /**\n   * Removes the registered all handlers for the specified event or events.\n   * If you want to only remove a particular handler, use namespace to identify it.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Removes all handlers assigned to \"move\":\n   * splide.off( 'move' );\n   *\n   * // Only removes handlers that belong to the specified namespace:\n   * splide.off( 'move.myNamespace' );\n   * ```\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\n   *\n   * @return `this`\n   */\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): this {\n    this.event.off( events );\n    return this;\n  }\n\n  /**\n   * Emits an event and triggers registered handlers.\n   *\n   * @param event - An event name to emit.\n   * @param args  - Optional. Any number of arguments to pass to handlers.\n   *\n   * @return `this`\n   */\n  emit<K extends keyof EventMap>( event: K, ...args: EventMap[ K ] ): this;\n  emit( event: string, ...args: any[] ): this;\n  emit( event: string ): this {\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\n    this.event.emit( event, ...slice( arguments, 1 ) );\n    return this;\n  }\n\n  /**\n   * Inserts a slide at the specified position.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   * splide.mount();\n   *\n   * // Adds the slide by the HTML:\n   * splide.add( '<li></li> );\n   *\n   * // or adds the element:\n   * splide.add( document.createElement( 'li' ) );\n   * ```\n   *\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\n   * @param index  - Optional. An index to insert a slide at.\n   *\n   * @return `this`\n   */\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\n    this._Components.Slides.add( slides, index );\n    return this;\n  }\n\n  /**\n   * Removes slides that match the matcher\n   * that can be an index, an array with indices, a selector, or an iteratee function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\n   */\n  remove( matcher: SlideMatcher ): this {\n    this._Components.Slides.remove( matcher );\n    return this;\n  }\n\n  /**\n   * Checks the slider type.\n   *\n   * @param type - A type to test.\n   *\n   * @return `true` if the type matches the current one, or otherwise `false`.\n   */\n  is( type: string ): boolean {\n    return this._options.type === type;\n  }\n\n  /**\n   * Refreshes the slider.\n   *\n   * @return `this`\n   */\n  refresh(): this {\n    this.emit( EVENT_REFRESH );\n    return this;\n  }\n\n  /**\n   * Destroys the slider.\n   *\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\n   *\n   * @return `this`\n   */\n  destroy( completely = true ): this {\n    const { event, state } = this;\n\n    if ( state.is( CREATED ) ) {\n      // Postpones destruction requested before the slider becomes ready.\n      event.on( EVENT_READY, this.destroy.bind( this, completely ), this );\n    } else {\n      forOwn( this._Components, component => {\n        component.destroy && component.destroy( completely );\n      } );\n\n      event.emit( EVENT_DESTROY );\n      event.destroy();\n      empty( this.splides );\n      state.set( DESTROYED );\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns options.\n   *\n   * @return An object with the latest options.\n   */\n  get options(): Options {\n    return this._options;\n  }\n\n  /**\n   * Merges options to the current options and emits `updated` event.\n   *\n   * @param options - An object with new options.\n   */\n  set options( options: Options ) {\n    const { _options } = this;\n    merge( _options, options );\n\n    if ( ! this.state.is( CREATED ) ) {\n      this.emit( EVENT_UPDATED, _options );\n    }\n  }\n\n  /**\n   * Returns the number of slides without clones.\n   *\n   * @return The number of slides.\n   */\n  get length(): number {\n    return this._Components.Slides.getLength( true );\n  }\n\n  /**\n   * Returns the active slide index.\n   *\n   * @return The active slide index.\n   */\n  get index(): number {\n    return this._Components.Controller.getIndex();\n  }\n}\n"],"names":["PROJECT_CODE","DATA_ATTRIBUTE","CREATED","MOUNTED","IDLE","MOVING","DESTROYED","STATES","DEFAULT_EVENT_PRIORITY","DEFAULT_USER_EVENT_PRIORITY","array","length","subject","isNull","Array","isArray","HTMLElement","value","values","iteratee","forEach","indexOf","items","push","toArray","arrayProto","prototype","arrayLike","start","end","slice","call","predicate","filter","elm","classes","add","name","classList","isString","split","parent","children","appendChild","bind","nodes","ref","parentNode","insertBefore","node","selector","matches","child","firstElementChild","object","keys","Object","i","key","arguments","source","isObject","merge","attrs","removeAttribute","attr","value2","setAttribute","String","tag","document","createElement","addClass","append","styles","getComputedStyle","style","display2","display","getAttribute","className","contains","target","getBoundingClientRect","removeChild","div","create","rect","width","html","DOMParser","parseFromString","body","e","stopPropagation","preventDefault","stopImmediatePropagation","querySelector","querySelectorAll","condition","message","Error","callback","noop","func","requestAnimationFrame","min","Math","max","floor","ceil","abs","x","y","epsilon","number","minOrMax","maxOrMin","exclusive","minimum","maximum","string","replacements","replace","replacement","ids","prefix","pad","handlers","events","priority","event","namespace","_event","_callback","_namespace","_priority","_key","sort","handler1","handler2","eventHandlers","handler","apply","join","fragments","eventNS","on","off","offBy","emit","destroy","EVENT_MOUNTED","EVENT_READY","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_SLIDE_KEYDOWN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_DRAG","EVENT_DRAGGING","EVENT_DRAGGED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_DESTROY","EVENT_ARROWS_MOUNTED","EVENT_ARROWS_UPDATED","EVENT_PAGINATION_MOUNTED","EVENT_PAGINATION_UPDATED","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PLAYING","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","Splide2","listeners","targets","options","event2","addEventListener","listener","removeEventListener","unbind","data","interval","onInterval","onUpdate","limit","now","Date","startTime","rate","id","paused","count","elapsed","pause","update","resume","cancel","rewind","isPaused","initialState","state","states","includes","set","is","duration","RequestInterval","throttled","Components2","throttledObserve","Throttle","observe","initialOptions","points","currPoint","JSON","parse","root","breakpoints","isMin","mediaQuery","n","m","map","point","matchMedia","completely","item","find","item2","newOptions","mount","setup","RTL","TTB","ORIENTATION_MAP","marginRight","autoWidth","fixedWidth","paddingLeft","paddingRight","left","right","X","Y","ArrowLeft","ArrowRight","prop","axisOnly","direction","index","resolve","orient","CLASS_ROOT","CLASS_SLIDER","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS","CLASS_PROGRESS_BAR","CLASS_AUTOPLAY","CLASS_PLAY","CLASS_PAUSE","CLASS_SPINNER","CLASS_INITIALIZED","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","prev","next","pagination","page","spinner","EventInterface","elements","slides","slider","track","list","getClasses","refresh","query","autoplay","bar","play","uniqueId","type","drag","isNavigation","assign","sheet","head","cssRules","cssRule","isCSSStyleRule","cssRule2","selectorText","insertRule","style2","isHTMLElement","CSSStyleRule","rule","ruleBy","ROLE","ARIA_CONTROLS","ARIA_CURRENT","ARIA_LABEL","ARIA_HIDDEN","TAB_INDEX","DISABLED","ARIA_ORIENTATION","ALL_ATTRIBUTES","SLIDE","LOOP","FADE","slideIndex","destroyEvents","Components","updateOnMove","Direction","isClone","container","destroyed","onMove","idx","label","format","i18n","slideX","controls","splides","splide","dest","currIndex","isActive","isVisible","active","hasClass","visible","focusableNodes","ariaHidden","slideFocus","useContainer","Style","trackRect","Elements","slideRect","from","distance","diff","isWithin","Slides2","Slide","excludeClones","Slide2","Controller","toIndex","hasFocus","perPage","between","parseHtml","before","matcher","isFunction","images","queryAll","img","register","get","getIn","getAt","remove","getLength","isEnough","Slides","clones","cloneCount","computeCloneCount","isHead","cloneDeep","cloneNode","clones2","fixedSize","measure","fixedCount","baseCount","flickMaxPages","vertical","window","init","resize","unit","cssPadding","gap","cssSlideWidth","cssTrackHeight","heightRatio","setSlidesHeight","cssSlideHeight","padding","height","cssHeight","cssSlideSize","fixedHeight","autoHeight","withoutGap","getGap","totalSize","parseFloat","listSize","slideSize","sliderSize","getPadding","Layout","waiting","reposition","Scroll","isBusy","position","getPosition","looping","waitForTransition","Transition","jump","trimSpace","go","toPosition","loop","exceededMin","exceededLimit","exceededMax","settle","minDistance","Infinity","trimming","offset","trim","clamp","focus","getEnd","isUndefined","getLimit","move","translate","Move","isLoop","prevIndex","slideCount","perMove","reindex","control","allowSameIndex","match","indicator","computeDestIndex","getNext","getPrev","destination","getAdjacent","approximatelyEqual","incremental","toPage","setIndex","getIndex","XML_NAME_SPACE","PATH","SIZE","wrapper","created","createArrow","prev2","arrowPath","nextIndex","prevLabel","last","nextLabel","first","disabled","hovered","focused","forPause","button","pauseOnHover","pauseOnFocus","resetProgress","manual","cover","src","BOUNCE_DIFF_THRESHOLD","BOUNCE_DURATION","FRICTION_FACTOR","BASE_VELOCITY","MIN_DURATION","clear","suppressConstraint","friction","computeDuration","onScrolled","easing","backwards","t","easingFunc","pow","scroll","FRICTION","LOG_INTERVAL","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","isSlide","isFade","basePosition","baseEvent","prevBaseEvent","lastEvent","isFree","isDragging","isMouse","hasExceeded","clickPrevented","onPointerDown","passive","capture","onClick","onPointerMove","onPointerUp","cancelable","expired","timeOf","exceeded","constrain","coordOf","threshold","dragMinThreshold","isSliderDirection","velocity","computeVelocity","computeDestination","sign","computeIndex","diffX","diffY","base","diffCoord","diffTime","isFlick","flickPower","orthogonal","touches","timeStamp","disable","IE_ARROW_KEYS","keyboard","onKeydown","normalizedKey","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","isSequential","lazyLoad","_Slide","_img","srcset","_spinner","parentElement","preloadPages","load","error","li","class","text","pageX","curr","TRIGGER_KEYS","processed","concat","instances","index2","instance","wheel","onWheel","deltaY","I18N","DEFAULTS","speed","done","endCallback","getSpeed","rewindSpeed","transition","EventBus","State","_Splide","defaults","_options","Extensions","_Components","_Transition","Fade","_Extensions","Constructors","ComponentConstructors","Component","component","sync","Splide"],"mappings":"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"}