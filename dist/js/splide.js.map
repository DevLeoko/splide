{"version":3,"file":"splide.js","sources":["../../src/js/constants/project.ts","../../src/js/constants/states.ts","../../src/js/constants/priority.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/arrayLike/find/find.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/js/utils/dom/setAttribute/setAttribute.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/style/style.ts","../../src/js/utils/dom/display/display.ts","../../src/js/utils/dom/getAttribute/getAttribute.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/parseHtml/parseHtml.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/noop/noop.ts","../../src/js/utils/function/raf/raf.ts","../../src/js/utils/math/approximatelyEqual/approximatelyEqual.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/sign/sign.ts","../../src/js/utils/math/index.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBus/EventBus.ts","../../src/js/constants/events.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constructors/RequestInterval/RequestInterval.ts","../../src/js/constructors/State/State.ts","../../src/js/constructors/Throttle/Throttle.ts","../../src/js/components/Options/Options.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/classes.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Style/Style.ts","../../src/js/constants/attributes.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Move/constants.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Drag/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/constants/i18n.ts","../../src/js/constants/defaults.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\n * The project code.\n *\n * @since 3.0.0\n */\nexport const PROJECT_CODE = 'splide';\n\n/**\n * The data attribute prefix.\n *\n * @since 3.0.0\n */\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\n","/**\n * Splide has been just created.\n */\nexport const CREATED = 1;\n\n/**\n * Splide has mounted components.\n */\nexport const MOUNTED = 2;\n\n/**\n * Splide is ready.\n */\nexport const IDLE = 3;\n\n/**\n * Splide is moving.\n */\nexport const MOVING = 4;\n\n/**\n * Splide has been destroyed.\n */\nexport const DESTROYED = 5;\n\n/**\n * The collection of all states.\n *\n * @since 3.0.0\n */\nexport const STATES = {\n  CREATED,\n  MOUNTED,\n  IDLE,\n  MOVING,\n  DESTROYED,\n};\n","/**\n * The default priority for internal handlers.\n *\n * @since 3.0.0\n */\nexport const DEFAULT_EVENT_PRIORITY = 10;\n\n/**\n * The default priority for users' handlers.\n *\n * @since 3.0.0\n */\nexport const DEFAULT_USER_EVENT_PRIORITY = 20;\n","/**\n * Empties the array.\n *\n * @param array - A array to empty.\n */\nexport function empty( array: any[] ): void {\n  array.length = 0;\n}\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject( subject: unknown ): subject is object {\n  return ! isNull( subject ) && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: unknown ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: unknown ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: unknown ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: unknown ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is `null` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `null`, or otherwise `false`.\n */\nexport function isNull( subject: unknown ): subject is null {\n  return subject === null;\n}\n\n/**\n * Checks if the given subject is an HTMLElement or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n\n/**\n * Checks if the given subject is an HTMLButtonElement or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\n */\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\n  return subject instanceof HTMLButtonElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray( value ) ? value : [ value ];\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * The extended `Array#forEach` method that accepts a single value as an argument.\n *\n * @param values   - A value or values to iterate over.\n * @param iteratee - An iteratee function.\n */\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\n  toArray( values ).forEach( iteratee );\n}\n","/**\n * Checks if the array includes the value or not.\n * `Array#includes` is not supported by IE.\n *\n * @param array - An array.\n * @param value - A value to search for.\n *\n * @return `true` if the array includes the value, or otherwise `false`.\n */\nexport function includes<T>( array: T[], value: T ): boolean {\n  return array.indexOf( value ) > -1;\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * Extended `Array#push()` that accepts an item or an array with items.\n *\n * @param array - An array to push items.\n * @param items - An item or items to push.\n *\n * @return A provided array itself.\n */\nexport function push<T>( array: T[], items: T | T[] ): T[] {\n  array.push( ...toArray( items ) );\n  return array;\n}\n","export { empty }    from './empty/empty';\nexport { forEach }  from './forEach/forEach';\nexport { includes } from './includes/includes';\nexport { push }     from './push/push';\nexport { toArray }  from './toArray/toArray';\n\nexport const arrayProto = Array.prototype;\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { slice } from '../slice/slice';\n\n\n/**\n * The find method for an array or array-like object, works in IE.\n * This method is not performant for a huge array.\n *\n * @param arrayLike - An array-like object.\n * @param predicate - The predicate function to test each element in the object.\n *\n * @return A found value if available, or otherwise `undefined`.\n */\nexport function find<T>(\n  arrayLike: ArrayLike<T>,\n  predicate: ( value: T, index: number, array: T[] ) => any\n): T | undefined {\n  return slice( arrayLike ).filter( predicate )[ 0 ];\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Toggles the provided class or classes by following the `add` boolean.\n *\n * @param elm     - An element whose classes are toggled.\n * @param classes - A class or class names.\n * @param add     - Whether to add or remove a class.\n */\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\n  if ( elm ) {\n    forEach( classes, name => {\n      if ( name ) {\n        elm.classList[ add ? 'add' : 'remove' ]( name );\n      }\n    } );\n  }\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: Element, classes: string | string[] ): void {\n  toggleClass( elm, classes, true );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Appends children to the parent element.\n *\n * @param parent   - A parent element.\n * @param children - A child or children to append to the parent.\n */\nexport function append( parent: Element, children: Node | Node[] ): void {\n  forEach( children, parent.appendChild.bind( parent ) );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Inserts a node or nodes before the specified reference node.\n *\n * @param nodes - A node or nodes to insert.\n * @param ref   - A reference node.\n */\nexport function before( nodes: Node | Node[], ref: Node ): void {\n  forEach( nodes, node => {\n    const parent = ref.parentNode;\n\n    if ( parent ) {\n      parent.insertBefore( node, ref );\n    }\n  } );\n}\n","/**\n * Checks if the element can be selected by the provided selector or not.\n *\n * @param elm      - An element to check.\n * @param selector - A selector to test.\n *\n * @return `true` if the selector matches the element, or otherwise `false`.\n */\nexport function matches( elm: Element, selector: string ): boolean {\n  return ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\n}\n","import { slice } from '../../arrayLike';\nimport { matches } from '../matches/matches';\n\n\n/**\n * Finds children that has the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return An array with filtered children.\n */\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\n}\n","import { children } from '../children/children';\n\n\n/**\n * Returns a child element that matches the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return A matched child element if available, or otherwise `undefined`.\n */\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\n): T {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      const key = keys[ i ];\n\n      if ( key !== '__proto__' ) {\n        if ( iteratee( object[ key ], key ) === false ) {\n          break;\n        }\n      }\n    }\n  }\n\n  return object;\n}\n","import { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    forOwn( source, ( value, key ) => {\n      object[ key ] = source[ key ];\n    } );\n  } );\n\n  return object;\n}\n","import { isArray, isObject } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Merges U to T.\n *\n * @typeParam T - An object to merge to.\n * @typeParam U - An object to to.\n *\n * @return An merged object type.\n */\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\n    ? U[ K ] extends any[]\n      ? T[ K ] extends any[]\n        ? Array<T[ K ][ number ] | U[ K ][ number ]>\n        : U[ K ]\n      : T[ K ] extends object\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Cast<A, object> : never\n        : U[ K ]\n    : U[ K ];\n} & Omit<U, keyof T>;\n\ntype Cast<T, U> = T extends U ? T : U;\n\n/**\n * Recursively merges source properties to the object.\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\n *\n * @param object - An object to merge properties to.\n * @param source - A source object to merge properties from.\n *\n * @return A new object with merged properties.\n */\nexport function merge<T extends object, U extends object>( object: T, source: U ): Merge<T, U> {\n  forOwn( source, ( value, key ) => {\n    if ( isArray( value ) ) {\n      object[ key ] = value.slice();\n    } else if ( isObject( value ) ) {\n      object[ key ] = merge( isObject( object[ key ] ) ? object[ key ] : {}, value );\n    } else {\n      object[ key ] = value;\n    }\n  } );\n\n  return object as Merge<T, U>;\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes attributes from the element.\n *\n * @param elm   - An element.\n * @param attrs - An attribute or attributes to remove.\n */\nexport function removeAttribute( elm: Element, attrs: string | string[] ): void {\n  if ( elm ) {\n    forEach( attrs, attr => {\n      elm.removeAttribute( attr );\n    } );\n  }\n}\n","import { forOwn } from '../../object';\nimport { isNull, isObject } from '../../type/type';\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\n\n\nexport function setAttribute( elm: Element, attr: string, value: string | number | boolean ): void;\nexport function setAttribute( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\nexport function setAttribute(\n  elm: Element,\n  attrs: string | Record<string, string | number | boolean>,\n  value?: string | number | boolean\n): void {\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, name ) => {\n      setAttribute( elm, name, value );\n    } );\n  } else {\n    isNull( value ) ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\n  }\n}\n","import { isArray, isString } from '../../type/type';\nimport { addClass } from '../addClass/addClass';\nimport { append } from '../append/append';\nimport { setAttribute } from '../setAttribute/setAttribute';\n\n\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ];\n\nexport function create(\n  tag: string,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElement;\n\n/**\n * Creates a HTML element.\n *\n * @param tag    - A tag name.\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\n * @param parent - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( attrs ) {\n    if ( isString( attrs ) || isArray( attrs ) ) {\n      addClass( elm, attrs );\n    } else {\n      setAttribute( elm, attrs );\n    }\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { forEach } from '../../array';\nimport { forOwn } from '../../object';\nimport { isArray, isNull, isString } from '../../type/type';\n\n\n/**\n * The union for CSS style properties, such as \"padding\", \"fontSize\", etc.\n *\n * @since 0.1.0\n */\nexport type CSSStyleProperties = Exclude<keyof CSSStyleDeclaration, number>;\n\nexport function style(\n  elms: HTMLElement | HTMLElement[],\n  styles: Record<string, string | number>\n): void;\n\nexport function style<K extends CSSStyleProperties>(\n  elms: HTMLElement,\n  styles: K\n): CSSStyleDeclaration[ K ];\n\nexport function style(\n  elms: HTMLElement,\n  styles: string\n): string;\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elms   - An element or elements to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function style<K extends CSSStyleProperties>(\n  elms: HTMLElement | HTMLElement[],\n  styles: Record<string, string | number> | K\n): CSSStyleDeclaration[ K ] | string | void {\n  if ( isString( styles ) ) {\n    return isArray( elms ) ? null : getComputedStyle( elms )[ styles ];\n  }\n\n  forOwn( styles, ( value, key ) => {\n    if ( ! isNull( value ) ) {\n      forEach( elms, elm => {\n        if ( elm ) {\n          elm.style[ key ] = `${ value }`;\n        }\n      } );\n    }\n  } );\n}\n","import { style } from '../style/style';\n\n\n/**\n * Sets the `display` CSS value to the element.\n *\n * @param elm     - An element to set a new value to.\n * @param display - A new `display` value.\n */\nexport function display( elm: HTMLElement, display: string ): void {\n  style( elm, { display } );\n}\n","/**\n * Returns the specified attribute value.\n *\n * @param elm  - An element.\n * @param attr - An attribute to get.\n */\nexport function getAttribute( elm: Element, attr: string ): string {\n  return elm.getAttribute( attr );\n}\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","import { child } from '../child/child';\n\n\n/**\n * Parses the provided HTML string and returns the first element.\n *\n * @param html - An HTML string to parse.\n *\n * @return An Element on success, or otherwise `undefined`.\n */\nexport function parseHtml<E extends HTMLElement>( html: string ): E | undefined {\n  return child<E>( new DOMParser().parseFromString( html, 'text/html' ).body );\n}\n","/**\n * Call the `preventDefault()` of the provided event.\n *\n * @param e               - An Event object.\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\n */\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\n  e.preventDefault();\n\n  if ( stopPropagation ) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n","/**\n * Returns an element that matches the provided selector.\n *\n * @param parent   - A parent element to start searching from.\n * @param selector - A selector to query.\n *\n * @return A found element or `null`.\n */\nexport function query<E extends Element = Element>( parent: Element | Document, selector: string ): E | null {\n  return parent && parent.querySelector( selector );\n}\n","import { slice } from '../../arrayLike';\n\n\n/**\n * Returns elements that match the provided selector.\n *\n * @param parent   - A parent element to start searching from.\n * @param selector - A selector to query.\n *\n * @return An array with matched elements.\n */\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\n  return slice<E>( parent.querySelectorAll( selector ) );\n}\n","/**\n * Returns a DOMRect object of the provided element.\n *\n * @param target - An element.\n */\nexport function rect( target: Element ): DOMRect {\n  return target.getBoundingClientRect();\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  forEach( nodes, node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the provided number.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n *\n * @return A string with the CSS unit.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : value ? `${ value }px` : '';\n}\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message = '' ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message }` );\r\n  }\r\n}\r\n","import { AnyFunction } from '../../../types';\n\n\n/**\n * Invokes the callback on the next tick.\n *\n * @param callback - A callback function.\n */\nexport function nextTick( callback: AnyFunction ): void {\n  setTimeout( callback );\n}\n","/**\n * No operation.\n */\nexport const noop = (): void => {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\n","/**\n * The arias of `window.requestAnimationFrame()`.\n */\nexport function raf( func: FrameRequestCallback ): number {\n  return requestAnimationFrame( func );\n}\n","/**\n * Checks if the provided 2 numbers are approximately equal or not.\n *\n * @param x       - A number.\n * @param y       - Another number to compare.\n * @param epsilon - An accuracy that defines the approximation.\n *\n * @return `true` if 2 numbers are considered to be equal, or otherwise `false`.\n */\nexport function approximatelyEqual( x: number, y: number, epsilon: number ): boolean {\n  return Math.abs( x - y ) < epsilon;\n}\n","/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const min = Math.min( minOrMax, maxOrMin );\r\n  const max = Math.max( minOrMax, maxOrMin );\r\n  return exclusive ? min < number && number < max : min <= number && number <= max;\r\n}\r\n","const { max, min } = Math;\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","/**\n * Returns the sign of the provided number.\n *\n * @param x - A number.\n *\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\n */\nexport function sign( x: number ): number {\n  return +( x > 0 ) - +( x < 0 );\n}\n","export { approximatelyEqual } from './approximatelyEqual/approximatelyEqual';\nexport { between }            from './between/between';\nexport { clamp }              from './clamp/clamp';\nexport { sign }               from './sign/sign';\n\nexport const { min, max, floor, ceil, abs, round } = Math;\n","import { forEach } from '../../array';\n\n\n/**\n * Formats a string.\n *\n * @param string       - A string to format.\n * @param replacements - A replacement or replacements.\n *\n * @return A formatted string.\n */\nexport function format( string: string, replacements: string | number | Array<string | number> ): string {\n  forEach( replacements, replacement => {\n    string = string.replace( '%s', `${ replacement }` );\n  } );\n\n  return string;\n}\n","/**\n * Pads the number with 0.\n *\n * @param number - A number to pad.\n *\n * @return string - Padded number.\n */\nexport function pad( number: number ): string {\n  return number < 10 ? `0${ number }` : `${ number }`;\n}\n","import { pad } from '../pad/pad';\n\n\n/**\n * Stores unique IDs.\n *\n * @since 3.0.0\n */\nconst ids: Record<string, number> = {};\n\n/**\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\n *\n * @param prefix - A prefix for the ID.\n */\nexport function uniqueId( prefix: string ): string {\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\n}\n","import { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { AnyFunction } from '../../types';\nimport { forOwn, push, slice, toArray } from '../../utils';\n\n\n/**\n * The interface for the EventBus instance.\n *\n * @since 3.0.0\n */\nexport interface EventBusObject {\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority?: number ): void;\n  off( events: string | string[], key?: object ): void;\n  offBy( key: object ): void;\n  emit( event: string, ...args: any[] ): void;\n  destroy(): void;\n}\n\n/**\n * The interface for each event handler object.\n *\n * @since 3.0.0\n */\nexport interface EventHandler {\n  _event: string;\n  _callback: AnyFunction;\n  _namespace: string;\n  _priority: number;\n  _key?: object;\n}\n\n/**\n * The type for a callback function of the EventBus.\n *\n * @since 3.0.0\n */\nexport type EventBusCallback = AnyFunction;\n\n/**\n * The constructor to provided a simple event system.\n *\n * @since 3.0.0\n *\n * @return An EventBus object.\n */\nexport function EventBus(): EventBusObject {\n  /**\n   * The collection of registered handlers.\n   */\n  let handlers: Record<string, EventHandler[]> = {};\n\n  /**\n   * Registers an event handler.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param key      - Optional. An object for an identifier of the handler.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  function on(\n    events: string | string[],\n    callback: EventBusCallback,\n    key?: object,\n    priority = DEFAULT_EVENT_PRIORITY\n  ): void {\n    forEachEvent( events, ( event, namespace ) => {\n      handlers[ event ] = handlers[ event ] || [];\n\n      push( handlers[ event ], {\n        _event    : event,\n        _callback : callback,\n        _namespace: namespace,\n        _priority : priority,\n        _key      : key,\n      } ).sort( ( handler1, handler2 ) => handler1._priority - handler2._priority );\n    } );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   * If only the event name is provided, all handlers that associate with the event are removed.\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param key    - Optional. An object for an identifier of the handler.\n   */\n  function off( events: string | string[], key?: object ): void {\n    forEachEvent( events, ( event, namespace ) => {\n      const eventHandlers = handlers[ event ];\n\n      handlers[ event ] = eventHandlers && eventHandlers.filter( handler => {\n        return handler._key ? handler._key !== key : handler._namespace !== namespace;\n      } );\n    } );\n  }\n\n  /**\n   * Removes all handlers locked by the specified key.\n   *\n   * @param key - A key.\n   */\n  function offBy( key: object ): void {\n    forOwn( handlers, ( eventHandlers, event ) => {\n      off( event, key );\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   * This accepts additional arguments and passes them to callbacks.\n   *\n   * @param event - An event name.\n   */\n  function emit( event: string ): void {\n    ( handlers[ event ] || [] ).forEach( handler => {\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\n      handler._callback.apply( handler, slice( arguments, 1 ) );\n    } );\n  }\n\n  /**\n   * Removes all handlers.\n   */\n  function destroy(): void {\n    handlers = {};\n  }\n\n  /**\n   * Parses provided events and iterates over them.\n   *\n   * @param events   - An event or events.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent( events: string | string[], iteratee: ( event: string, namespace: string ) => void ): void {\n    toArray( events ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const fragments = eventNS.split( '.' );\n      iteratee( fragments[ 0 ], fragments[ 1 ] );\n    } );\n  }\n\n  return {\n    on,\n    off,\n    offBy,\n    emit,\n    destroy,\n  };\n}\n","export const EVENT_MOUNTED            = 'mounted';\nexport const EVENT_READY              = 'ready';\nexport const EVENT_MOVE               = 'move';\nexport const EVENT_MOVED              = 'moved';\nexport const EVENT_CLICK              = 'click';\nexport const EVENT_ACTIVE             = 'active';\nexport const EVENT_INACTIVE           = 'inactive';\nexport const EVENT_VISIBLE            = 'visible';\nexport const EVENT_HIDDEN             = 'hidden';\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\nexport const EVENT_REFRESH            = 'refresh';\nexport const EVENT_UPDATED            = 'undated';\nexport const EVENT_RESIZE             = 'resize';\nexport const EVENT_RESIZED            = 'resized';\nexport const EVENT_DRAG               = 'drag';\nexport const EVENT_DRAGGING           = 'dragging';\nexport const EVENT_DRAGGED            = 'dragged';\nexport const EVENT_SCROLL             = 'scroll';\nexport const EVENT_SCROLLED           = 'scrolled';\nexport const EVENT_DESTROY            = 'destroy';\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\nexport const EVENT_PAGINATION_PAGE    = 'pagination:page';\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\n\n","import { EVENT_DESTROY } from '../../constants/events';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction } from '../../types';\nimport { forEach } from '../../utils';\nimport { EventBusCallback } from '../EventBus/EventBus';\n\n\n/**\n * The interface for the EventInterface object.\n *\n * @since 3.0.0\n */\nexport interface EventInterfaceObject {\n  on( events: string | string[], callback: EventBusCallback, priority?: number ): void;\n  off( events: string | string[] ): void;\n  emit( event: string, ...args: any[] ): void;\n  bind(\n    target: Element | Window | Document | Array<Element | Window | Document>,\n    events: string,\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void\n  unbind( target: Element | Window | Document | Array<Element | Window | Document>, events: string ): void;\n  destroy(): void;\n}\n\n/**\n * The type for event targets.\n *\n * @since 3.0.0\n */\ntype EventTarget = Element | Window | Document;\n\n/**\n * The function that provides interface for internal and native events.\n *\n * @since 3.0.0\n *\n * @param Splide - A Splide instance.\n *\n * @return A collection of interface functions.\n */\nexport function EventInterface( Splide: Splide ): EventInterfaceObject {\n  /**\n   * Holds the event object.\n   */\n  const { event } = Splide;\n\n  /**\n   * The key for events.\n   */\n  const key = {};\n\n  /**\n   * Stores all handlers that listen to native events.\n   */\n  let listeners: [ EventTarget, string, AnyFunction, AddEventListenerOptions? ][] = [];\n\n  /**\n   * Registers an event handler with an unique key.\n   * It can only be removed by `off()` method below.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  function on( events: string | string[], callback: EventBusCallback, priority?: number ): void {\n    event.on( events, callback, key, priority );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   */\n  function off( events: string | string[] ): void {\n    event.off( events, key );\n  }\n\n  /**\n   * Listens to native events.\n   * Splide#destory() will remove all registered listeners.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event or events to listen to.\n   * @param callback - A callback function.\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\n   */\n  function bind(\n    targets: EventTarget | EventTarget[],\n    events: string,\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void {\n    forEachEvent( targets, events, ( target, event ) => {\n      listeners.push( [ target, event, callback, options ] );\n      target.addEventListener( event, callback, options );\n    } );\n  }\n\n  /**\n   * Removes the event handler.\n   *\n   * @param targets - A target element, the window object or the document object.\n   * @param events  - An event name or names to remove.\n   */\n  function unbind( targets: EventTarget | EventTarget[], events: string ): void {\n    forEachEvent( targets, events, ( target, event ) => {\n      listeners = listeners.filter( listener => {\n        if ( listener[ 0 ] === target && listener[ 1 ] === event ) {\n          target.removeEventListener( event, listener[ 2 ], listener[ 3 ] );\n          return false;\n        }\n\n        return true;\n      } );\n    } );\n  }\n\n  /**\n   * Iterates over each target and event.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent(\n    targets: EventTarget | EventTarget[],\n    events: string,\n    iteratee: ( target: EventTarget, event: string ) => void\n  ): void {\n    forEach( targets, target => {\n      if ( target ) {\n        events.split( ' ' ).forEach( iteratee.bind( null, target ) );\n      }\n    } );\n  }\n\n  /**\n   * Removes all listeners.\n   */\n  function destroy(): void {\n    listeners = listeners.filter( data => unbind( data[ 0 ], data[ 1 ] ) );\n    event.offBy( key );\n  }\n\n  /**\n   * Invokes destroy when the slider is destroyed.\n   */\n  event.on( EVENT_DESTROY, destroy, key );\n\n  return {\n    on,\n    off,\n    emit: event.emit,\n    bind,\n    unbind,\n    destroy,\n  };\n}\n","import { raf } from '../../utils';\n\n\n/**\n * The interface for the returning value of the RequestInterval.\n *\n * @since 3.0.0\n */\nexport interface RequestIntervalInterface {\n  start( resume?: boolean ): void;\n  pause(): void;\n  rewind(): void;\n  cancel(): void;\n  isPaused(): boolean;\n}\n\n/**\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\n *\n * @since 3.0.0\n *\n * @param interval   - The interval duration in milliseconds.\n * @param onInterval - The callback fired on every interval.\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\n * @param limit      - Optional. Limits the number of interval.\n */\nexport function RequestInterval(\n  interval: number,\n  onInterval: () => void,\n  onUpdate?: ( rate: number ) => void,\n  limit?: number\n): RequestIntervalInterface {\n  const { now } = Date;\n\n  /**\n   * The time when the interval starts.\n   */\n  let startTime: number;\n\n  /**\n   * The current progress rate.\n   */\n  let rate = 0;\n\n  /**\n   * The animation frame ID.\n   */\n  let id: number;\n\n  /**\n   * Indicates whether the interval is currently paused or not.\n   */\n  let paused = true;\n\n  /**\n   * The loop count. This only works when the `limit` argument is provided.\n   */\n  let count = 0;\n\n  /**\n   * The update function called on every animation frame.\n   */\n  function update(): void {\n    if ( ! paused ) {\n      const elapsed = now() - startTime;\n\n      if ( elapsed >= interval ) {\n        rate      = 1;\n        startTime = now();\n      } else {\n        rate = elapsed / interval;\n      }\n\n      if ( onUpdate ) {\n        onUpdate( rate );\n      }\n\n      if ( rate === 1 ) {\n        onInterval();\n\n        if ( limit && ++count >= limit ) {\n          pause();\n          return;\n        }\n      }\n\n      raf( update );\n    }\n  }\n\n  /**\n   * Starts the interval.\n   *\n   * @param resume - Optional. Whether to resume the paused progress or not.\n   */\n  function start( resume?: boolean ): void {\n    ! resume && cancel();\n    startTime = now() - ( resume ? rate * interval : 0 );\n    paused    = false;\n    raf( update );\n  }\n\n  /**\n   * Pauses the interval.\n   */\n  function pause(): void {\n    paused = true;\n  }\n\n  /**\n   * Rewinds the current progress.\n   */\n  function rewind(): void {\n    startTime = now();\n    rate      = 0;\n\n    if ( onUpdate ) {\n      onUpdate( rate );\n    }\n  }\n\n  /**\n   * Cancels the interval.\n   */\n  function cancel() {\n    cancelAnimationFrame( id );\n    rate   = 0;\n    id     = 0;\n    paused = true;\n  }\n\n  /**\n   * Checks if the interval is paused or not.\n   *\n   * @return `true` if the interval is paused, or otherwise `false`.\n   */\n  function isPaused(): boolean {\n    return paused;\n  }\n\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    isPaused,\n  };\n}\n","import { includes, toArray } from '../../utils';\n\n\n/**\n * The interface for the State object.\n *\n * @since 3.0.0\n */\nexport interface StateObject {\n  set( state: number ): void;\n  is( states: number | number[] ): boolean;\n}\n\n/**\n * The function providing a super simple state system.\n *\n * @param initialState - Specifies the initial state.\n */\nexport function State( initialState: number ): StateObject {\n  /**\n   * The current state.\n   */\n  let state = initialState;\n\n  /**\n   * Sets a new state.\n   *\n   * @param value - A new state value.\n   */\n  function set( value: number ): void {\n    state = value;\n  }\n\n  /**\n   * Checks if the current state matches the provided one.\n   *\n   * @param states - A state to check.\n   *\n   * @return `true` if the current state is the provided one.\n   */\n  function is( states: number | number[] ): boolean {\n    return includes( toArray( states ), state );\n  }\n\n  return { set, is };\n}\n","import { AnyFunction } from '../../types';\nimport { RequestInterval, RequestIntervalInterface } from '../RequestInterval/RequestInterval';\n\n\n/**\n * The interface for the returning value of the RequestInterval.\n *\n * @since 3.0.0\n */\nexport interface ThrottleInstance<F extends AnyFunction> extends Function {\n  ( ...args: Parameters<F> ): void;\n}\n\n/**\n * Returns the throttled function.\n *\n * @param func     - A function to throttle.\n * @param duration - Optional. Throttle duration in milliseconds.\n *\n * @return A throttled function.\n */\nexport function Throttle<F extends AnyFunction>(\n  func: F,\n  duration?: number\n): ThrottleInstance<F> {\n  let interval: RequestIntervalInterface;\n\n  function throttled( this: ThisParameterType<F> ): void {\n    if ( ! interval ) {\n      interval = RequestInterval( duration || 0, () => {\n        // eslint-disable-next-line prefer-rest-params\n        func.apply( this, arguments );\n        interval = null;\n      }, null, 1 );\n\n      interval.start();\n    }\n  }\n\n  return throttled;\n}\n","import { DATA_ATTRIBUTE } from '../../constants/project';\nimport { DESTROYED } from '../../constants/states';\nimport { Throttle } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { assert, find, getAttribute, merge } from '../../utils';\n\n\n/**\n * The interface for the Options component.\n *\n * @since 3.0.0\n */\nexport interface OptionsComponent extends BaseComponent {\n}\n\n/**\n * The component for managing options.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Options component object.\n */\nexport function Options( Splide: Splide, Components: Components, options: Options ): OptionsComponent {\n  /**\n   * The throttled `observe` function.\n   */\n  const throttledObserve = Throttle( observe );\n\n  /**\n   * Keeps the initial options to apply when no matched query exists.\n   */\n  let initialOptions: Options;\n\n  /**\n   * Stores breakpoints with the MediaQueryList object.\n   */\n  let points: [ string, MediaQueryList ][];\n\n  /**\n   * Holds the current breakpoint.\n   */\n  let currPoint: string | undefined;\n\n  /**\n   * Called when the component is constructed.\n   */\n  function setup(): void {\n    try {\n      merge( options, JSON.parse( getAttribute( Splide.root, DATA_ATTRIBUTE ) ) );\n    } catch ( e ) {\n      assert( false, e.message );\n    }\n\n    initialOptions = merge( {}, options );\n  }\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    const { breakpoints } = options;\n\n    if ( breakpoints ) {\n      points = Object.keys( breakpoints )\n        .sort( ( n, m ) => +n - +m )\n        .map( point => [\n          point,\n          matchMedia( `(${ options.mediaQuery || 'max' }-width:${ point }px)` ),\n        ] );\n\n      addEventListener( 'resize', throttledObserve );\n      observe();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * @param completely - Will be `true` for complete destruction.\n   */\n  function destroy( completely: boolean ): void {\n    if ( completely ) {\n      removeEventListener( 'resize', throttledObserve );\n    }\n  }\n\n  /**\n   * Observes breakpoints.\n   * The `currPoint` may be `undefined`.\n   */\n  function observe(): void {\n    const item = find( points, item => item[ 1 ].matches ) || [];\n\n    if ( item[ 0 ] !== currPoint ) {\n      onMatch( ( currPoint = item[ 0 ] ) );\n    }\n  }\n\n  /**\n   * Called when the media query matches breakpoints.\n   *\n   * @param point - A matched point, or `undefined` that means no breakpoint matches a media query.\n   */\n  function onMatch( point: string | undefined ): void {\n    const newOptions = options.breakpoints[ point ] || initialOptions;\n\n    if ( newOptions.destroy ) {\n      Splide.options = initialOptions;\n      Splide.destroy( newOptions.destroy === 'completely' );\n    } else {\n      if ( Splide.state.is( DESTROYED ) ) {\n        destroy( true );\n        Splide.mount();\n      }\n\n      Splide.options = newOptions;\n    }\n  }\n\n  return {\n    setup,\n    mount,\n    destroy,\n  };\n}\n","/**\n * Enumerates slides from left to right.\n */\nexport const LTR = 'ltr';\n\n/**\n * Enumerates slides from right to left.\n */\nexport const RTL = 'rtl';\n\n/**\n * Enumerates slides in a col.\n */\nexport const TTB = 'ttb';\n","import { RTL, TTB } from '../../constants/directions';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\n\n\n/**\n * The interface for the Direction component.\n *\n * @since 3.0.0\n */\nexport interface DirectionComponent extends BaseComponent {\n  resolve( prop: string, axisOnly?: boolean ): string;\n  orient( value: number ): number;\n}\n\n/**\n * The translation map for directions.\n *\n * @since 3.0.0\n */\nexport const ORIENTATION_MAP = {\n  marginRight : [ 'marginBottom', 'marginLeft' ],\n  width       : [ 'height' ],\n  autoWidth   : [ 'autoHeight' ],\n  fixedWidth  : [ 'fixedHeight' ],\n  paddingLeft : [ 'paddingTop', 'paddingRight' ],\n  paddingRight: [ 'paddingBottom', 'paddingLeft' ],\n  left        : [ 'top', 'right' ],\n  right       : [ 'bottom', 'left' ],\n  x           : [ 'y' ],\n  X           : [ 'Y' ],\n  Y           : [ 'X' ],\n  ArrowLeft   : [ 'ArrowUp', 'ArrowRight' ],\n  ArrowRight  : [ 'ArrowDown', 'ArrowLeft' ],\n};\n\n/**\n * The component that absorbs the difference among directions.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Direction component object.\n */\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\n  /**\n   * Resolves the provided property name.\n   *\n   * @param prop     - A property name to translate.\n   * @param axisOnly - Optional. If `ture`, returns the same property for LTR and RTL.\n   */\n  function resolve( prop: string, axisOnly?: boolean ): string {\n    const { direction } = options;\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[ prop ][ index ] || prop;\n  }\n\n  /**\n   * Orients the value towards the current direction.\n   *\n   * @param value - A value to orient.\n   *\n   * @return The oriented value.\n   */\n  function orient( value: number ): number {\n    return value * ( options.direction === RTL ? 1 : -1 );\n  }\n\n  return {\n    resolve,\n    orient,\n  };\n}\n","import { PROJECT_CODE } from './project';\n\n\nexport const CLASS_ROOT            = PROJECT_CODE;\nexport const CLASS_SLIDER          = `${ PROJECT_CODE }__slider`;\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\nexport const CLASS_AUTOPLAY        = `${ PROJECT_CODE }__autoplay`;\nexport const CLASS_PLAY            = `${ PROJECT_CODE }__play`;\nexport const CLASS_PAUSE           = `${ PROJECT_CODE }__pause`;\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\nexport const CLASS_INITIALIZED     = 'is-initialized';\nexport const CLASS_ACTIVE          = 'is-active';\nexport const CLASS_PREV            = 'is-prev';\nexport const CLASS_NEXT            = 'is-next';\nexport const CLASS_VISIBLE         = 'is-visible';\nexport const CLASS_LOADING         = 'is-loading';\n\n/**\n * The array with all status classes.\n *\n * @since 3.0.0\n */\nexport const STATUS_CLASSES = [ CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING ];\n\n/**\n * The collection of classes for elements that Splide dynamically creates.\n *\n * @since 3.0.0\n */\nexport const CLASSES = {\n  slide     : CLASS_SLIDE,\n  clone     : CLASS_CLONE,\n  arrows    : CLASS_ARROWS,\n  arrow     : CLASS_ARROW,\n  prev      : CLASS_ARROW_PREV,\n  next      : CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page      : CLASS_PAGINATION_PAGE,\n  spinner   : CLASS_SPINNER,\n};\n","import {\n  CLASS_ACTIVE,\n  CLASS_ARROW_NEXT,\n  CLASS_ARROW_PREV,\n  CLASS_ARROWS,\n  CLASS_AUTOPLAY,\n  CLASS_CLONE,\n  CLASS_LIST,\n  CLASS_PAUSE,\n  CLASS_PLAY,\n  CLASS_PROGRESS,\n  CLASS_PROGRESS_BAR,\n  CLASS_ROOT,\n  CLASS_SLIDE,\n  CLASS_SLIDER,\n  CLASS_TRACK,\n} from '../../constants/classes';\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { addClass, assert, assign, child, children, empty, push, query, removeClass, uniqueId } from '../../utils';\n\n\n/**\n * The interface for elements which the slider consists of.\n *\n * @since 3.0.0\n */\nexport interface ElementCollection {\n  root: HTMLElement;\n  slider: HTMLElement;\n  track: HTMLElement;\n  list: HTMLElement;\n  slides: HTMLElement[];\n  arrows: HTMLElement;\n  prev: HTMLButtonElement;\n  next: HTMLButtonElement;\n  bar: HTMLElement;\n  play: HTMLElement;\n  pause: HTMLElement;\n}\n\n/**\n * The interface for the Elements component.\n *\n * @since 3.0.0\n */\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\n}\n\n/**\n * The component that collects and handles elements which the slider consists of.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Elements component object.\n */\nexport function Elements( Splide: Splide, Components: Components, options: Options ): ElementsComponent {\n  const { on } = EventInterface( Splide );\n  const { root } = Splide;\n  const elements: ElementCollection = {} as ElementCollection;\n\n  /**\n   * Stores all slide elements.\n   */\n  const slides: HTMLElement[] = [];\n\n  /**\n   * Stores all root classes.\n   */\n  let classes: string[];\n\n  /**\n   * The slider element that may be `undefined`.\n   */\n  let slider: HTMLElement;\n\n  /**\n   * The track element.\n   */\n  let track: HTMLElement;\n\n  /**\n   * The list element.\n   */\n  let list: HTMLElement;\n\n  /**\n   * Called when the component is constructed.\n   */\n  function setup(): void {\n    collect();\n    identify();\n    addClass( root, ( classes = getClasses() ) );\n  }\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    on( EVENT_REFRESH, refresh );\n    on( EVENT_UPDATED, update );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    empty( slides );\n    removeClass( root, classes );\n  }\n\n  /**\n   * Recollects slide elements.\n   */\n  function refresh(): void {\n    destroy();\n    setup();\n  }\n\n  /**\n   * Updates the status of elements.\n   */\n  function update(): void {\n    removeClass( root, classes );\n    addClass( root, ( classes = getClasses() ) );\n  }\n\n  /**\n   * Collects elements which the slider consists of.\n   */\n  function collect(): void {\n    slider = child( root, `.${ CLASS_SLIDER }` );\n    track  = query( root, `.${ CLASS_TRACK }` );\n    list   = child( track, `.${ CLASS_LIST }` );\n\n    assert( track && list, 'Missing a track/list element.' );\n\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\n\n    const autoplay = find( `.${ CLASS_AUTOPLAY }` );\n    const arrows   = find( `.${ CLASS_ARROWS }` );\n\n    assign( elements, {\n      root,\n      slider,\n      track,\n      list,\n      slides,\n      arrows,\n      prev : query( arrows, `.${ CLASS_ARROW_PREV }` ),\n      next : query( arrows, `.${ CLASS_ARROW_NEXT }` ),\n      bar  : query( find( `.${ CLASS_PROGRESS }` ), `.${ CLASS_PROGRESS_BAR }` ),\n      play : query( autoplay, `.${ CLASS_PLAY }` ),\n      pause: query( autoplay, `.${ CLASS_PAUSE }` ),\n    } );\n  }\n\n  /**\n   * Assigns unique IDs to essential elements.\n   */\n  function identify(): void {\n    const id = root.id || uniqueId( PROJECT_CODE );\n    root.id  = id;\n    track.id = track.id || `${ id }-track`;\n    list.id  = list.id || `${ id }-list`;\n  }\n\n  /**\n   * Finds an element only in children of the root or slider element.\n   *\n   * @return {Element} - A found element or undefined.\n   */\n  function find( selector: string ): HTMLElement {\n    return child( root, selector ) || child( slider, selector );\n  }\n\n  /**\n   * Return an array with classes for the root element.\n   *\n   * @return An array with classes.\n   */\n  function getClasses(): string[] {\n    return [\n      `${ CLASS_ROOT }--${ options.type }`,\n      `${ CLASS_ROOT }--${ options.direction }`,\n      options.drag && `${ CLASS_ROOT }--draggable`,\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\n      CLASS_ACTIVE,\n    ];\n  }\n\n  return assign( elements, {\n    setup,\n    mount,\n    destroy,\n  } );\n}\n","import { BaseComponent } from '../../types';\nimport { create, find, isHTMLElement, remove } from '../../utils';\n\n/**\n * The interface for the Style component.\n *\n * @since 3.0.0\n */\nexport interface StyleComponent extends BaseComponent {\n  rule( selector: string, prop: string, value: string | number ): void;\n  ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void;\n}\n\n/**\n * The component for managing styles of the slider.\n *\n * @since 3.0.0\n *\n * @return A Style component object.\n */\nexport function Style(): StyleComponent {\n  /**\n   * The style element for the slider.\n   */\n  let style: HTMLStyleElement;\n\n  /**\n   * The CSSStyleSheet object of the created style element.\n   */\n  let sheet: CSSStyleSheet;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    style = create( 'style', {}, document.head );\n    sheet = style.sheet;\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    remove( style );\n    sheet = null;\n  }\n\n  /**\n   * Registers the style for the selector.\n   *\n   * @param selector - A selector string.\n   * @param prop     - A CSS property, accepting the camel case.\n   * @param value    - A CSS value.\n   */\n  function rule( selector: string, prop: string, value: string | number ): void {\n    const { cssRules } = sheet;\n    const cssRule = find( cssRules, cssRule => isCSSStyleRule( cssRule ) && cssRule.selectorText === selector )\n      || cssRules[ sheet.insertRule( `${ selector }{}`, 0 ) ];\n\n    if ( isCSSStyleRule( cssRule ) ) {\n      cssRule.style[ prop ] = `${ value }`;\n    }\n  }\n\n  /**\n   * Registers the style by the element or the ID.\n   *\n   * @param target - A target element or ID.\n   * @param prop   - A CSS property, accepting the camel case.\n   * @param value  - A CSS value.\n   */\n  function ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void {\n    rule( `#${ isHTMLElement( target ) ? target.id : target }`, prop, value );\n  }\n\n  /**\n   * Checks if the provided rule is a CSSStyleRule instance or not.\n   *\n   * @param cssRule - An instance to check.\n   *\n   * @return `true` if the cssRule is an instance of CSSStyleRule, or otherwise `false`.\n   */\n  function isCSSStyleRule( cssRule: CSSRule ): cssRule is CSSStyleRule {\n    return cssRule instanceof CSSStyleRule;\n  }\n\n  return {\n    mount,\n    destroy,\n    rule,\n    ruleBy,\n  };\n}\n","export const ROLE           = 'role';\nexport const ARIA_CONTROLS  = 'aria-controls';\nexport const ARIA_CURRENT   = 'aria-current';\nexport const ARIA_LABEL     = 'aria-label';\nexport const ARIA_HIDDEN    = 'aria-hidden';\nexport const TAB_INDEX      = 'tabindex';\nexport const DISABLED       = 'disabled';\n\n/**\n * The array with all attributes.\n *\n * @since 3.0.0\n */\nexport const ALL_ATTRIBUTES = [\n  ROLE,\n  ARIA_CONTROLS,\n  ARIA_CURRENT,\n  ARIA_LABEL,\n  ARIA_HIDDEN,\n  TAB_INDEX,\n  DISABLED,\n];\n","/**\n * The type for the regular slider.\n *\n * @since 3.0.0\n */\nexport const SLIDE = 'slide';\n\n/**\n * The type for the carousel slider.\n *\n * @since 3.0.0\n */\nexport const LOOP = 'loop';\n\n/**\n * The type for the fade slider that can not have multiple slides in a page.\n *\n * @since 3.0.0\n */\nexport const FADE = 'fade';\n","import {\n  ALL_ATTRIBUTES,\n  ARIA_CONTROLS,\n  ARIA_CURRENT,\n  ARIA_HIDDEN,\n  ARIA_LABEL,\n  ROLE,\n  TAB_INDEX,\n} from '../../constants/attributes';\nimport {\n  CLASS_ACTIVE,\n  CLASS_CONTAINER,\n  CLASS_NEXT,\n  CLASS_PREV,\n  CLASS_VISIBLE,\n  STATUS_CLASSES,\n} from '../../constants/classes';\nimport {\n  EVENT_ACTIVE,\n  EVENT_CLICK,\n  EVENT_HIDDEN,\n  EVENT_INACTIVE,\n  EVENT_MOVE,\n  EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_RESIZED,\n  EVENT_SCROLLED,\n  EVENT_SLIDE_KEYDOWN,\n  EVENT_UPDATED,\n  EVENT_VISIBLE,\n} from '../../constants/events';\nimport { FADE, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent } from '../../types';\nimport {\n  abs,\n  ceil,\n  child,\n  floor,\n  format,\n  hasClass,\n  isHTMLButtonElement,\n  min,\n  pad,\n  rect,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  toggleClass,\n} from '../../utils';\n\n\n/**\n * The interface for the Slide sub component.\n *\n * @since 3.0.0\n */\nexport interface  SlideComponent extends BaseComponent {\n  index: number;\n  slideIndex: number;\n  slide: HTMLElement;\n  container: HTMLElement;\n  isClone: boolean;\n  rule( prop: string, value: string | number, useContainer?: boolean ): void\n  isWithin( from: number, distance: number ): boolean;\n}\n\n/**\n * The sub component for managing each slide.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param index      - A slide index.\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not clone.\n * @param slide      - A slide element.\n *\n * @return A Slide sub component.\n */\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface( Splide );\n  const { Components, root, options } = Splide;\n  const { isNavigation, updateOnMove } = options;\n  const { resolve } = Components.Direction;\n  const isClone   = slideIndex > -1;\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\n\n  /**\n   * Turns into `true` when the component is destroyed.\n   */\n  let destroyed: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount( this: SlideComponent ): void {\n    init();\n\n    bind( slide, 'click keydown', e => {\n      emit( e.type === 'click' ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, this, e );\n    } );\n\n    on( [ EVENT_RESIZED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update.bind( this ) );\n\n    if ( updateOnMove ) {\n      on( EVENT_MOVE, onMove.bind( this ) );\n    }\n\n    update.call( this );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    if ( ! isClone ) {\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\n    }\n\n    if ( isNavigation ) {\n      if ( ! isHTMLButtonElement( slide ) ) {\n        setAttribute( slide, ROLE, 'button' );\n      }\n\n      const idx      = isClone ? slideIndex : index;\n      const label    = format( options.i18n.slideX, idx + 1 );\n      const controls = Splide.splides.map( splide => splide.root.id ).join( ' ' );\n\n      setAttribute( slide, ARIA_LABEL, label );\n      setAttribute( slide, ARIA_CONTROLS, controls );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    destroyed = true;\n    destroyEvents();\n    removeClass( slide, STATUS_CLASSES );\n    removeAttribute( slide, ALL_ATTRIBUTES );\n  }\n\n  /**\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\n   *\n   * @param next - A next index.\n   * @param prev - A previous index.\n   * @param dest - A destination index.\n   */\n  function onMove( this: SlideComponent, next: number, prev: number, dest: number ): void {\n    if ( ! destroyed ) {\n      if ( dest === index ) {\n        updateActivity.call( this, true );\n      }\n\n      update.call( this );\n    }\n  }\n\n  /**\n   * Updates attribute and classes of the slide.\n   */\n  function update( this: SlideComponent ): void {\n    if ( ! destroyed ) {\n      const { index: currIndex } = Splide;\n\n      updateActivity.call( this, isActive() );\n      updateVisibility.call( this, isVisible() );\n\n      toggleClass( slide, CLASS_PREV, index === currIndex - 1 );\n      toggleClass( slide, CLASS_NEXT, index === currIndex + 1 );\n    }\n  }\n\n  /**\n   * Updates the status related with activity.\n   *\n   * @param active - Set `true` if the slide is active.\n   */\n  function updateActivity( this: SlideComponent, active: boolean ): void {\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\n      toggleClass( slide, CLASS_ACTIVE, active );\n\n      if ( isNavigation ) {\n        setAttribute( slide, ARIA_CURRENT, active || null );\n      }\n\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, this );\n    }\n  }\n\n  /**\n   * Updates the status related with visibility.\n   *\n   * @param visible - Set `true` if the slide is visible.\n   */\n  function updateVisibility( this: SlideComponent, visible: boolean ): void {\n    const ariaHidden = ! visible && ! isActive();\n\n    setAttribute( slide, ARIA_HIDDEN, ariaHidden || null );\n    setAttribute( slide, TAB_INDEX, ! ariaHidden && options.slideFocus ? 0 : null );\n\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\n      toggleClass( slide, CLASS_VISIBLE, visible );\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, this );\n    }\n  }\n\n\n  /**\n   * Adds a CSS rule to the slider or the container.\n   *\n   * @param prop         - A property name.\n   * @param value        - A CSS value to add.\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\n   */\n  function rule( prop: string, value: string | number, useContainer?: boolean ): void {\n    const selector = `#${ slide.id }${ container && useContainer ? ` > .${ CLASS_CONTAINER }` : '' }`;\n    Components.Style.rule( selector, prop, value );\n  }\n\n  /**\n   * Checks if the slide is active or not.\n   *\n   * @return `true` if the slide is active.\n   */\n  function isActive(): boolean {\n    return Splide.index === index;\n  }\n\n  /**\n   * Checks if the slide is visible or not.\n   */\n  function isVisible(): boolean {\n    if ( Splide.is( FADE ) ) {\n      return isActive();\n    }\n\n    const trackRect = rect( Components.Elements.track );\n    const slideRect = rect( slide );\n    const left      = resolve( 'left' );\n    const right     = resolve( 'right' );\n\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\n  }\n\n  /**\n   * Calculates how far this slide is from another slide and\n   * returns `true` if the distance is within the given number.\n   *\n   * @param from     - An index of a base slide.\n   * @param distance - `true` if the slide is within this number.\n   *\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\n   */\n  function isWithin( from: number, distance: number ): boolean {\n    let diff = abs( from - index );\n\n    if ( ! Splide.is( SLIDE ) && ! isClone ) {\n      diff = min( diff, Splide.length - diff );\n    }\n\n    return diff <= distance;\n  }\n\n  return {\n    index,\n    slideIndex,\n    slide,\n    container,\n    isClone,\n    mount,\n    destroy,\n    rule,\n    isWithin,\n  };\n}\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\nimport { Splide } from '../../core/Splide/Splide';\nimport { EventInterface } from '../../constructors';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass,\n  append,\n  before,\n  between,\n  empty,\n  forEach as forEachItem,\n  includes,\n  isFunction,\n  isHTMLElement,\n  isString,\n  matches,\n  parseHtml,\n  queryAll,\n  remove as removeNode,\n  toArray,\n} from '../../utils';\nimport { Slide, SlideComponent } from './Slide';\n\n\n/**\n * The interface for the Slides component.\n *\n * @since 3.0.0\n */\nexport interface  SlidesComponent extends BaseComponent {\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\n  get( excludeClones?: boolean ): SlideComponent[];\n  getIn( page: number ): SlideComponent[];\n  getAt( index: number ): SlideComponent | undefined;\n  add( slide: string | Element | Array<string | Element>, index?: number, callback?: AnyFunction ): void;\n  remove( selector: SlideMatcher ): void;\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\n  filter( matcher: SlideMatcher ): SlideComponent[];\n  rule( prop: string, value: string | number, useContainer?: boolean ): void\n  getLength( excludeClones?: boolean ): number;\n  isEnough(): boolean;\n}\n\n/**\n * The iteratee function for Slides.\n *\n * @since 3.0.0\n */\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\n\n/**\n * The predicate function for Slides.\n *\n * @since 3.0.0\n */\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\n\n/**\n * The type for filtering SlideComponent objects.\n *\n * @since 3.0.0\n */\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\n\n/**\n * The component for managing all slides include clones.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Slides component object.\n */\nexport function Slides( Splide: Splide, Components: Components, options: Options ): SlidesComponent {\n  const { on, emit, bind } = EventInterface( Splide );\n  const { slides, list } = Components.Elements;\n\n  /**\n   * Stores all SlideComponent objects.\n   */\n  const Slides: SlideComponent[] = [];\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_REFRESH, refresh );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    forEach( Slide => { Slide.destroy() } );\n    empty( Slides );\n  }\n\n  /**\n   * Discards all Slide components and regenerates them.\n   */\n  function refresh(): void {\n    destroy();\n    init();\n  }\n\n  /**\n   * Registers a slide element and creates a Slide object.\n   *\n   * @param slide      - A slide element to register.\n   * @param index      - A slide index.\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\n   */\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\n    const object = Slide( Splide, index, slideIndex, slide );\n    object.mount();\n    Slides.push( object );\n  }\n\n  /**\n   * Returns all Slide objects.\n   *\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   *\n   * @return An array with Slide objects.\n   */\n  function get( excludeClones?: boolean ): SlideComponent[] {\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\n  }\n\n  /**\n   * Returns slides in the specified page.\n   *\n   * @param page - A page index.\n   *\n   * @return An array with slides that belong to the page.\n   */\n  function getIn( page: number ): SlideComponent[] {\n    const { Controller } = Components;\n    const index = Controller.toIndex( page );\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\n  }\n\n  /**\n   * Returns a Slide object at the specified index.\n   *\n   * @param index - A slide index.\n   *\n   * @return A Slide object if available, or otherwise `undefined`.\n   */\n  function getAt( index: number ): SlideComponent | undefined {\n    return filter( index )[ 0 ];\n  }\n\n  /**\n   * Inserts a slide or slides at a specified index.\n   *\n   * @param items - A slide element, an HTML string or an array with them.\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\n   */\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\n    forEachItem( items, slide => {\n      if ( isString( slide ) ) {\n        slide = parseHtml( slide );\n      }\n\n      if ( isHTMLElement( slide ) ) {\n        const ref = slides[ index ];\n        ref ? before( slide, ref ) : append( list, slide );\n        addClass( slide, options.classes.slide );\n        observeImages( slide, emit.bind( null, EVENT_RESIZE ) );\n      }\n    } );\n\n    emit( EVENT_REFRESH );\n  }\n\n  /**\n   * Removes slides that match the matcher\n   * that can be an index, an array with indices, a selector, or an iteratee function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\n   */\n  function remove( matcher: SlideMatcher ): void {\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\n    emit( EVENT_REFRESH );\n  }\n\n  /**\n   * Iterates over Slide objects by the iteratee function.\n   *\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   */\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\n    get( excludeClones ).forEach( iteratee );\n  }\n\n  /**\n   * Filters Slides by the matcher\n   * that can be an index, an array with indices, a selector, or an predicate function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an predicate function.\n   *\n   * @return An array with SlideComponent objects.\n   */\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\n    return Slides.filter( isFunction( matcher )\n      ? matcher\n      : Slide => isString( matcher )\n        ? matches( Slide.slide, matcher )\n        : includes( toArray( matcher ), Slide.index )\n    );\n  }\n\n  /**\n   * Adds a CSS rule to all slides or containers.\n   *\n   * @param prop         - A property name.\n   * @param value        - A CSS value to add.\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\n   */\n  function rule( prop: string, value: string | number, useContainer?: boolean ): void {\n    forEach( Slide => { Slide.rule( prop, value, useContainer ) } );\n  }\n\n  /**\n   * Invokes the callback after all images in the element are loaded.\n   *\n   * @param elm      - An element that may contain images.\n   * @param callback - A callback function.\n   */\n  function observeImages( elm: Element, callback: AnyFunction ): void {\n    const images = queryAll( elm, 'img' );\n    let { length } = images;\n\n    if ( length ) {\n      images.forEach( img => {\n        bind( img, 'load error', () => {\n          if ( ! --length ) {\n            callback();\n          }\n        } );\n      } );\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Returns the length of slides.\n   *\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   *\n   * @return The length of slides.\n   */\n  function getLength( excludeClones?: boolean ): number {\n    return excludeClones ? slides.length : Slides.length;\n  }\n\n  /**\n   * Checks if the number of slides is over than the `perPage` option, including clones.\n   *\n   * @return `true` if there are enough slides, or otherwise `false`.\n   */\n  function isEnough(): boolean {\n    return Slides.length > options.perPage;\n  }\n\n  return {\n    mount,\n    destroy,\n    register,\n    get,\n    getIn,\n    getAt,\n    add,\n    remove,\n    forEach,\n    filter,\n    rule,\n    getLength,\n    isEnough,\n  };\n}\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\nimport { LOOP } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { addClass, append, before, ceil, empty, pad, push, rect, remove } from '../../utils';\n\n\n/**\n * The interface for the Clone component.\n *\n * @since 3.0.0\n */\nexport interface CloneComponent extends BaseComponent {\n}\n\n/**\n * The component that generates clones for the loop slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Clones component object.\n */\nexport function Clones( Splide: Splide, Components: Components, options: Options ): CloneComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { Elements, Slides } = Components;\n  const { resolve } = Components.Direction;\n\n  /**\n   * Stores all cloned elements.\n   */\n  const clones: HTMLElement[] = [];\n\n  /**\n   * Keeps the current number of clones.\n   */\n  let cloneCount: number;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_REFRESH, refresh );\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\n  }\n\n  /**\n   * Removes all clones if available, and generates new clones.\n   */\n  function init(): void {\n    if ( ( cloneCount = computeCloneCount() ) ) {\n      generate( cloneCount );\n    }\n  }\n\n  /**\n   * Destroys clones.\n   */\n  function destroy(): void {\n    remove( clones );\n    empty( clones );\n  }\n\n  /**\n   * Discards all clones and regenerates them.\n   * Must do this before the Elements component collects slide elements.\n   */\n  function refresh(): void {\n    destroy();\n    init();\n  }\n\n  /**\n   * Observes the required clone count and refreshes the slider if necessary.\n   */\n  function observe(): void {\n    if ( cloneCount !== computeCloneCount() ) {\n      emit( EVENT_REFRESH );\n    }\n  }\n\n  /**\n   * Generates the specified number of clones.\n   *\n   * @param count - The number of clones to generate for each side.\n   */\n  function generate( count: number ): void {\n    const slides = Slides.get().slice();\n    const { length } = slides;\n\n    if ( length ) {\n      while ( slides.length < count ) {\n        push( slides, slides );\n      }\n\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\n        const isHead = index < count;\n        const clone  = cloneDeep( Slide.slide, index );\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\n        push( clones, clone );\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\n      } );\n    }\n  }\n\n  /**\n   * Deeply clones the provided element with removing the ID attribute.\n   *\n   * @param elm   - An element to clone.\n   * @param index - An index of the clone.\n   *\n   * @return A cloned element.\n   */\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\n    const clone = elm.cloneNode( true ) as HTMLElement;\n    addClass( clone, options.classes.clone );\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\n    return clone;\n  }\n\n  /**\n   * Returns the number of elements to generate.\n   * This always returns 0 if the slider type is not `'loop'`.\n   *\n   * @return The number of clones.\n   */\n  function computeCloneCount(): number {\n    let { clones } = options;\n\n    if ( ! Splide.is( LOOP ) ) {\n      clones = 0;\n    } else if ( ! clones ) {\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ];\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\n      const baseCount  = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage;\n\n      clones = baseCount * ( options.drag ? ( options.flickMaxPages || 1 ) + 1 : 2 );\n    }\n\n    return clones;\n  }\n\n  return {\n    mount,\n    destroy,\n  };\n}\n","import { TTB } from '../../constants/directions';\nimport { EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\nimport { EventInterface, Throttle } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, assert, isObject, rect, style, unit } from '../../utils';\n\n\n/**\n * The interface for the Layout component.\n *\n * @since 3.0.0\n */\nexport interface LayoutComponent extends BaseComponent {\n  listSize(): number;\n  slideSize( index: number, withoutGap?: boolean ): number;\n  sliderSize(): number;\n  totalSize( index?: number, withoutGap?: boolean ): number;\n  getPadding( right: boolean ): number;\n}\n\n/**\n * The component that layouts slider components and provides methods for dimensions.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Layout component object.\n */\nexport function Layout( Splide: Splide, Components: Components, options: Options ): LayoutComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const { Slides } = Components;\n  const { ruleBy } = Components.Style;\n  const { resolve } = Components.Direction;\n  const { track, list } = Components.Elements;\n  const { getAt } = Slides;\n  const vertical = options.direction === TTB;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n\n    bind( window, 'resize load', Throttle( emit.bind( this, EVENT_RESIZE ) ) );\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\n    on( EVENT_RESIZE, resize );\n  }\n\n  /**\n   * Initializes the component on `mount` or `updated`.\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\n   */\n  function init(): void {\n    ruleBy( Splide.root, 'maxWidth', unit( options.width ) );\n    ruleBy( track, resolve( 'paddingLeft' ), cssPadding( false ) );\n    ruleBy( track, resolve( 'paddingRight' ), cssPadding( true ) );\n\n    Slides.rule( resolve( 'marginRight' ), unit( options.gap ) );\n    Slides.rule( 'width', cssSlideWidth() );\n\n    setSlidesHeight();\n    resize();\n  }\n\n  /**\n   * Updates dimensions of some elements when the slider is resized.\n   */\n  function resize(): void {\n    ruleBy( track, 'height', cssTrackHeight() );\n    options.heightRatio && setSlidesHeight();\n    emit( EVENT_RESIZED );\n  }\n\n  /**\n   * Updates the height of slides or their container elements if available.\n   */\n  function setSlidesHeight(): void {\n    Slides.rule( 'height', cssSlideHeight(), true );\n  }\n\n  /**\n   * Parses the padding option and returns the value for each side.\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\n   *\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\n   *\n   * @return The padding value as a CSS string.\n   */\n  function cssPadding( right: boolean ): string {\n    const { padding } = options;\n    const prop = resolve( right ? 'right' : 'left', true );\n    return padding ? unit( padding[ prop ] || ( isObject( padding ) ? '0' : padding ) ) : '';\n  }\n\n  /**\n   * Returns the height of the track element as a CSS string.\n   *\n   * @return The height of the track.\n   */\n  function cssTrackHeight(): string {\n    let height = '';\n\n    if ( vertical ) {\n      height = cssHeight();\n      assert( height, '\"height\" or \"heightRatio\" is missing.' );\n\n      const paddingTop    = cssPadding( false );\n      const paddingBottom = cssPadding( true );\n\n      if ( paddingTop || paddingBottom ) {\n        height = `calc(${ height }`;\n        height += `${ paddingTop ? ` - ${ paddingTop }` : '' }${ paddingBottom ? ` - ${ paddingBottom }` : '' })`;\n      }\n    }\n\n    return height;\n  }\n\n  /**\n   * Converts options related with height to a CSS string.\n   *\n   * @return The height as a CSS string if available, or otherwise an empty string.\n   */\n  function cssHeight(): string {\n    return unit( options.height || rect( list ).width * options.heightRatio );\n  }\n\n  /**\n   * Returns the width of the slide as a CSS string.\n   *\n   * @return The width of the slide.\n   */\n  function cssSlideWidth(): string {\n    return options.autoWidth ? '' : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\n  }\n\n  /**\n   * Returns the height of the slide as a CSS string.\n   *\n   * @return The height of the slide.\n   */\n  function cssSlideHeight(): string {\n    return unit( options.fixedHeight )\n      || ( vertical ? ( options.autoHeight ? '' : cssSlideSize() ) : cssHeight() );\n  }\n\n  /**\n   * Returns the CSS string for slide width or height without gap.\n   *\n   * @return The CSS string for slide width or height.\n   */\n  function cssSlideSize(): string {\n    const gap = unit( options.gap );\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\n  }\n\n  /**\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\n   *\n   * @return The size of the track element in pixel.\n   */\n  function listSize(): number {\n    return rect( list )[ resolve( 'width' ) ];\n  }\n\n  /**\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\n   *\n   * @param index      - Optional. A slide index.\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\n   *\n   * @return The size of the specified slide element in pixel.\n   */\n  function slideSize( index?: number, withoutGap?: boolean ): number {\n    const Slide = getAt( index || 0 );\n    return Slide\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\n      : 0;\n  }\n\n  /**\n   * Returns the total width or height of slides from the head of the slider to the specified index.\n   * This includes sizes of clones before the first slide.\n   *\n   * @param index      - A slide index. If omitted, uses the last index.\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\n   *\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\n   */\n  function totalSize( index: number, withoutGap?: boolean ): number {\n    const Slide = getAt( index );\n\n    if ( Slide ) {\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\n      const left  = rect( list )[ resolve( 'left' ) ];\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\n    }\n\n    return 0;\n  }\n\n  /**\n   * Returns the slider size without clones before the first slide.\n   *\n   * @return The width or height of the slider without clones.\n   */\n  function sliderSize(): number {\n    return totalSize( Splide.length - 1, true ) - totalSize( -1, true );\n  }\n\n  /**\n   * Returns the gap value.\n   *\n   *\n   * @return The gap value in pixel.\n   */\n  function getGap(): number {\n    const Slide = getAt( 0 );\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\n  }\n\n  /**\n   * Returns the padding value.\n   *\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\n   *\n   * @return The padding value in pixel.\n   */\n  function getPadding( right: boolean ): number {\n    return parseFloat( style( track, resolve( `padding${ right ? 'Right' : 'Left' }`, true ) ) ) || 0;\n  }\n\n  return {\n    mount,\n    listSize,\n    slideSize,\n    sliderSize,\n    totalSize,\n    getPadding,\n  };\n}\n","/**\n * The threshold for snapping the slider to the closest slide.\n *\n * @since 3.0.0\n */\nexport const SNAP_THRESHOLD = 10;\n","import { EVENT_MOVE, EVENT_MOVED, EVENT_REFRESH, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { IDLE, MOVING } from '../../constants/states';\nimport { LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, clamp, isUndefined, rect } from '../../utils';\nimport { SNAP_THRESHOLD } from './constants';\n\n\n/**\n * The interface for the Move component.\n *\n * @since 3.0.0\n */\nexport interface MoveComponent extends BaseComponent {\n  move( dest: number, index: number, prev: number ): void;\n  jump( index: number ): void;\n  translate( position: number ): void;\n  cancel(): void;\n  toIndex( position: number ): number;\n  toPosition( index: number, trimming?: boolean ): number;\n  getPosition(): number;\n  getLimit( max: boolean ): number;\n  isBusy(): boolean;\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\n}\n\n/**\n * The component for moving the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Move component object.\n */\nexport function Move( Splide: Splide, Components: Components, options: Options ): MoveComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\n  const { resolve, orient } = Components.Direction;\n  const { list, track } = Components.Elements;\n\n  /**\n   * Indicates whether the component can move the slider or not.\n   */\n  let waiting: boolean;\n\n  /**\n   * Indicates whether the the slider should snap the position to the specific slide or not.\n   */\n  let shouldSnap = true;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    on( [ EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition, DEFAULT_EVENT_PRIORITY - 1 );\n  }\n\n  /**\n   * Repositions the slider.\n   * This must be called before the Slide component checks the visibility.\n   */\n  function reposition(): void {\n    if ( exceededLimit( true ) ) {\n      translate( getLimit( true ) );\n    } else if ( shouldSnap || ( shouldSnap = canSnap() ) ) {\n      jump( Splide.index );\n    }\n  }\n\n  /**\n   * Goes to the slide at the specified index with the Transition component.\n   *\n   * @param dest  - A destination index to go to.\n   * @param index - A slide index.\n   * @param prev  - A previous index.\n   */\n  function move( dest: number, index: number, prev: number ): void {\n    if ( ! isBusy() ) {\n      const { set } = Splide.state;\n      const position = getPosition();\n      const looping  = dest !== index;\n\n      waiting = looping || options.waitForTransition;\n      set( MOVING );\n      emit( EVENT_MOVE, index, prev, dest );\n\n      Components.Transition.start( dest, () => {\n        looping && jump( index );\n        waiting = false;\n        set( IDLE );\n        emit( EVENT_MOVED, index, prev, dest );\n\n        if ( options.trimSpace === 'move' && dest !== prev && position === getPosition() ) {\n          Components.Controller.go( dest > prev ? '>' : '<' );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Jumps to the slide at the specified index.\n   *\n   * @param index - An index to jump to.\n   */\n  function jump( index: number ): void {\n    waiting = false;\n    Components.Transition.cancel();\n    translate( toPosition( index, true ) );\n  }\n\n  /**\n   * Moves the slider to the specified position.\n   *\n   * @param position - The destination.\n   */\n  function translate( position: number ): void {\n    position   = loop( position );\n    shouldSnap = canSnap( position );\n\n    Components.Style.ruleBy(\n      list,\n      'transform',\n      `translate${ resolve( 'X' ) }(${ 100 * position / listSize() }%)`\n    );\n  }\n\n  /**\n   * Loops the provided position if it exceeds limits.\n   *\n   * @param position - A position to loop.\n   */\n  function loop( position: number ): number {\n    if ( ! waiting && Splide.is( LOOP ) ) {\n      const diff        = position - getPosition();\n      const exceededMin = exceededLimit( false, position );\n      const exceededMax = exceededLimit( true, position );\n\n      if ( ( exceededMin && diff > 0 ) || ( exceededMax && diff < 0 ) ) {\n        position += orient( sliderSize() * ( exceededMin ? 1 : -1 ) );\n      }\n    }\n\n    return position;\n  }\n\n  /**\n   * Cancels transition.\n   */\n  function cancel(): void {\n    translate( getPosition() );\n    Components.Transition.cancel();\n  }\n\n  /**\n   * Returns the closest index to the position.\n   *\n   * @param position - A position to convert.\n   *\n   * @return The closest index to the position.\n   */\n  function toIndex( position: number ): number {\n    const Slides = Components.Slides.get();\n\n    let index       = 0;\n    let minDistance = Infinity;\n\n    for ( let i = 0; i < Slides.length; i++ ) {\n      const slideIndex = Slides[ i ].index;\n      const distance   = abs( toPosition( slideIndex, true ) - position );\n\n      if ( distance < minDistance ) {\n        minDistance = distance;\n        index       = slideIndex;\n      } else {\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the slide index to the position.\n   *\n   * @param index    - An index to convert.\n   * @param trimming - Optional. Whether to trim edge spaces or not.\n   *\n   * @return The position corresponding with the index.\n   */\n  function toPosition( index: number, trimming?: boolean ): number {\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\n    return trimming ? trim( position ) : position;\n  }\n\n  /**\n   * Returns the current position.\n   *\n   * @return The position of the list element.\n   */\n  function getPosition(): number {\n    const left = resolve( 'left' );\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\n  }\n\n  /**\n   * Trims spaces on the edge of the slider.\n   *\n   * @param position - A position to trim.\n   *\n   * @return A trimmed position.\n   */\n  function trim( position: number ): number {\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\n      position = clamp( position, 0, orient( sliderSize() - listSize() ) );\n    }\n\n    return position;\n  }\n\n  /**\n   * Returns the offset amount.\n   *\n   * @param index - An index.\n   */\n  function offset( index: number ): number {\n    const { focus } = options;\n\n    if ( focus === 'center' ) {\n      return ( listSize() - slideSize( index, true ) ) / 2;\n    }\n\n    return +focus * slideSize( index ) || 0;\n  }\n\n  /**\n   * Returns the limit number that the slider can move to.\n   *\n   * @param max - Determines whether to return the maximum or minimum limit.\n   *\n   * @return The border number.\n   */\n  function getLimit( max: boolean ): number {\n    const trimming = !! options.trimSpace;\n    return max ? toPosition( Components.Controller.getEnd(), trimming ) : toPosition( 0, trimming );\n  }\n\n  /**\n   * Checks if the provided position is enough close to some slide to snap or not.\n   *\n   * @param position - A position to test.\n   *\n   * @return `true` if found the slide to snap, or otherwise `false`.\n   */\n  function canSnap( position?: number ): boolean {\n    position = isUndefined( position ) ? getPosition() : position;\n    return abs( position - toPosition( toIndex( position ), true ) ) < SNAP_THRESHOLD;\n  }\n\n  /**\n   * Checks if the slider can move now or not.\n   *\n   * @return `true` if the slider can move, or otherwise `false`.\n   */\n  function isBusy(): boolean {\n    return waiting;\n  }\n\n  /**\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\n   *\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\n   * @param position - Optional. A position to test. If omitted, tests the current position.\n   *\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\n   */\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\n    position = isUndefined( position ) ? getPosition() : position;\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\n    return exceededMin || exceededMax;\n  }\n\n  return {\n    mount,\n    move,\n    jump,\n    translate,\n    cancel,\n    toIndex,\n    toPosition,\n    getPosition,\n    getLimit,\n    isBusy,\n    exceededLimit,\n  };\n}\n","import { EVENT_REFRESH, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\nimport { LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { approximatelyEqual, between, clamp, floor, isString, isUndefined, max } from '../../utils';\n\n\n/**\n * The interface for the Controller component.\n *\n * @since 3.0.0\n */\nexport interface ControllerComponent extends BaseComponent {\n  go( control: number | string, allowSameIndex?: boolean ): void;\n  getNext( destination?: boolean ): number;\n  getPrev( destination?: boolean ): number;\n  getEnd(): number;\n  setIndex( index: number ): void;\n  getIndex( prev?: boolean ): number;\n  toIndex( page: number ): number;\n  toPage( index: number ): number;\n  hasFocus(): boolean;\n}\n\n/**\n * The component for controlling the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Controller component object.\n */\nexport function Controller( Splide: Splide, Components: Components, options: Options ): ControllerComponent {\n  const { on } = EventInterface( Splide );\n  const { Move } = Components;\n  const { isEnough, getLength } = Components.Slides;\n  const isLoop = Splide.is( LOOP );\n\n  /**\n   * The current index.\n   */\n  let currIndex = options.start || 0;\n\n  /**\n   * The previous index.\n   */\n  let prevIndex = currIndex;\n\n  /**\n   * The latest number of slides.\n   */\n  let slideCount: number;\n\n  /**\n   * The latest `perMove` value.\n   */\n  let perMove: number;\n\n  /**\n   * The latest `perMove` value.\n   */\n  let perPage: number;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    Move.jump( currIndex );\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\n    on( EVENT_SCROLLED, reindex, 0 );\n  }\n\n  /**\n   * Initializes some parameters.\n   * Needs to check the slides length since the current index may be out of the range after refresh.\n   */\n  function init(): void {\n    slideCount = getLength( true );\n    perMove    = options.perMove;\n    perPage    = options.perPage;\n\n    if ( currIndex >= slideCount ) {\n      Move.jump( ( currIndex = slideCount - 1 ) );\n    }\n  }\n\n  /**\n   * Calculates the index by the current position and updates the current index.\n   */\n  function reindex(): void {\n    setIndex( Move.toIndex( Move.getPosition() ) );\n  }\n\n  /**\n   * Moves the slider by the control pattern.\n   *\n   * @see `Splide#go()`\n   *\n   * @param control        - A control pattern.\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\n   */\n  function go( control: number | string, allowSameIndex?: boolean ): void {\n    const dest  = parse( control );\n    const index = loop( dest );\n\n    if ( index > -1 && ! Move.isBusy() && ( allowSameIndex || index !== currIndex ) ) {\n      setIndex( index );\n      Move.move( dest, index, prevIndex );\n    }\n  }\n\n  /**\n   * Parses the control and returns a slide index.\n   *\n   * @param control - A control pattern to parse.\n   */\n  function parse( control: number | string ): number {\n    let index = currIndex;\n\n    if ( isString( control ) ) {\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\n\n      if ( indicator === '+' || indicator === '-' ) {\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex, true );\n      } else if ( indicator === '>' ) {\n        index = number ? toIndex( +number ) : getNext( true );\n      } else if ( indicator === '<' ) {\n        index = getPrev( true );\n      }\n    } else {\n      if ( isLoop ) {\n        index = clamp( control, -perPage, slideCount + perPage - 1 );\n      } else {\n        index = clamp( control, 0, getEnd() );\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns a next destination index.\n   *\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return A next index if available, or otherwise `-1`.\n   */\n  function getNext( destination?: boolean ): number {\n    return getAdjacent( false, destination );\n  }\n\n  /**\n   * Returns a previous destination index.\n   *\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return A previous index if available, or otherwise `-1`.\n   */\n  function getPrev( destination?: boolean ): number {\n    return getAdjacent( true, destination );\n  }\n\n  /**\n   * Returns an adjacent destination index.\n   *\n   * @param prev        - Determines whether to return a previous or next index.\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return An adjacent index if available, or otherwise `-1`.\n   */\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\n    const number = perMove || hasFocus() ? 1 : perPage;\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex );\n\n    if ( dest === -1 && Splide.is( SLIDE ) ) {\n      const position = Move.getPosition();\n\n      if ( prev ) {\n        if ( ! approximatelyEqual( position, 0, 1 ) ) {\n          return 0;\n        }\n      } else {\n        if ( ! approximatelyEqual( position, Move.getLimit( true ), 1 ) ) {\n          return getEnd();\n        }\n      }\n    }\n\n    return destination ? dest : loop( dest );\n  }\n\n  /**\n   * Converts the desired destination index to the valid one.\n   * - This may return clone indices if the editor is the loop mode,\n   *   or `-1` if there is no slide to go.\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\n   *\n   * @param dest        - The desired destination.\n   * @param from        - A base index.\n   * @param incremental - Optional. Whether the control is incremental or not.\n   *\n   * @return A converted destination index, including clones.\n   */\n  function computeDestIndex( dest: number, from: number, incremental?: boolean ): number {\n    if ( isEnough() ) {\n      const end = getEnd();\n\n      // Will overrun:\n      if ( dest < 0 || dest > end ) {\n        if ( between( 0, dest, from, true ) || between( end, from, dest, true ) ) {\n          dest = toIndex( toPage( dest ) );\n        } else {\n          if ( isLoop ) {\n            dest = perMove\n              ? dest\n              : dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount;\n          } else if ( options.rewind ) {\n            dest = dest < 0 ? end : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if ( ! isLoop && ! incremental && dest !== from ) {\n          dest = toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\n        }\n      }\n    } else {\n      dest = -1;\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns the end index where the slider can go.\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\n   * the slider can go to the slide 8 (the index is 7).\n   *\n   * @return An end index.\n   */\n  function getEnd(): number {\n    let end = slideCount - perPage;\n\n    if ( hasFocus() || ( isLoop && perMove ) ) {\n      end = slideCount - 1;\n    }\n\n    return max( end, 0 );\n  }\n\n  /**\n   * Loops the provided index only in the loop mode.\n   *\n   * @param index - An index to loop.\n   *\n   * @return A looped index.\n   */\n  function loop( index: number ): number {\n    if ( isLoop ) {\n      return isEnough() ? index % slideCount + ( index < 0 ? slideCount : 0 ) : -1;\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the page index to the slide index.\n   *\n   * @param page - A page index to convert.\n   *\n   * @return A slide index.\n   */\n  function toIndex( page: number ): number {\n    return clamp( hasFocus() ? page : perPage * page, 0, getEnd() );\n  }\n\n  /**\n   * Converts the slide index to the page index.\n   *\n   * @param index - An index to convert.\n   */\n  function toPage( index: number ): number {\n    if ( ! hasFocus() ) {\n      index = between( index, slideCount - perPage, slideCount - 1 ) ? slideCount - 1 : index;\n      index = floor( index / perPage );\n    }\n\n    return index;\n  }\n\n  /**\n   * Sets a new index and retains old one.\n   *\n   * @param index - A new index to set.\n   */\n  function setIndex( index: number ): void {\n    if ( index !== currIndex ) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n\n  /**\n   * Returns the current/previous index slide index.\n   *\n   * @param prev - Optional. Whether to return previous index or not.\n   */\n  function getIndex( prev?: boolean ): number {\n    return prev ? prevIndex : currIndex;\n  }\n\n  /**\n   * Verifies if the focus option is available or not.\n   *\n   * @return `true` if the slider has the focus option.\n   */\n  function hasFocus(): boolean {\n    return ! isUndefined( options.focus ) || options.isNavigation;\n  }\n\n  return {\n    mount,\n    go,\n    getNext,\n    getPrev,\n    getEnd,\n    setIndex,\n    getIndex,\n    toIndex,\n    toPage,\n    hasFocus,\n  };\n}\n","/**\n * The namespace for SVG elements.\n */\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\n\n/**\n * The arrow path.\n */\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\n\n/**\n * SVG width and height.\n */\nexport const SIZE = 40;\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\nimport {\n  EVENT_ARROWS_MOUNTED,\n  EVENT_ARROWS_UPDATED,\n  EVENT_MOUNTED,\n  EVENT_MOVE, EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_SCROLLED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { append, before, child, create, display, parseHtml, remove, removeAttribute, setAttribute } from '../../utils';\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\n\n\n/**\n * The interface for the Arrows component.\n *\n * @since 3.0.0\n */\nexport interface ArrowsComponent extends BaseComponent {\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\n}\n\n/**\n * The component for handling previous and next arrows.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Arrows component object.\n */\nexport function Arrows( Splide: Splide, Components: Components, options: Options ): ArrowsComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const { classes, i18n } = options;\n  const { Elements, Controller } = Components;\n\n  /**\n   * The wrapper element.\n   */\n  let wrapper = Elements.arrows;\n\n  /**\n   * The previous arrow element.\n   */\n  let prev = Elements.prev;\n\n  /**\n   * The next arrow element.\n   */\n  let next = Elements.next;\n\n  /**\n   * Indicates whether the component creates arrows or retrieved from the DOM.\n   */\n  let created: boolean;\n\n  /**\n   * An object with previous and next arrows.\n   */\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_UPDATED, init );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    if ( options.arrows ) {\n      if ( ! prev || ! next ) {\n        createArrows();\n      }\n    }\n\n    if ( prev && next ) {\n      if ( ! arrows.prev ) {\n        const { id } = Elements.track;\n\n        setAttribute( prev, ARIA_CONTROLS, id );\n        setAttribute( next, ARIA_CONTROLS, id );\n\n        arrows.prev = prev;\n        arrows.next = next;\n\n        listen();\n\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\n      } else {\n        display( wrapper, options.arrows === false ? 'none' : '' );\n      }\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    if ( created ) {\n      remove( wrapper );\n    } else {\n      removeAttribute( prev, ALL_ATTRIBUTES );\n      removeAttribute( next, ALL_ATTRIBUTES );\n    }\n  }\n\n  /**\n   * Listens to some events.\n   */\n  function listen(): void {\n    const { go } = Controller;\n    on( [ EVENT_MOUNTED, EVENT_MOVE, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update );\n    bind( next, 'click', () => { go( '>', true ) } );\n    bind( prev, 'click', () => { go( '<', true ) } );\n  }\n\n  /**\n   * Create arrows and append them to the slider.\n   */\n  function createArrows(): void {\n    wrapper = create( 'div', classes.arrows );\n    prev    = createArrow( true );\n    next    = createArrow( false );\n    created = true;\n\n    append( wrapper, [ prev, next ] );\n    before( wrapper, child( options.arrows === 'slider' && Elements.slider || Splide.root ) );\n  }\n\n  /**\n   * Creates an arrow button.\n   *\n   * @param prev - Determines whether to create a previous or next arrow.\n   *\n   * @return A created button element.\n   */\n  function createArrow( prev: boolean ): HTMLButtonElement {\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\n\n    return parseHtml<HTMLButtonElement>( arrow );\n  }\n\n  /**\n   * Updates status of arrows, such as `disabled` and `aria-label`.\n   */\n  function update(): void {\n    const index     = Splide.index;\n    const prevIndex = Controller.getPrev();\n    const nextIndex = Controller.getNext();\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n\n    prev.disabled = prevIndex < 0;\n    next.disabled = nextIndex < 0;\n\n    setAttribute( prev, ARIA_LABEL, prevLabel );\n    setAttribute( next, ARIA_LABEL, nextLabel );\n\n    emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\n  }\n\n  return {\n    arrows,\n    mount,\n    destroy,\n  };\n}\n","import { ARIA_CONTROLS, ARIA_LABEL, ROLE } from '../../constants/attributes';\nimport {\n  EVENT_AUTOPLAY_PAUSE,\n  EVENT_AUTOPLAY_PLAY,\n  EVENT_AUTOPLAY_PLAYING,\n  EVENT_MOVE,\n  EVENT_REFRESH,\n  EVENT_SCROLL,\n} from '../../constants/events';\nimport { EventInterface, RequestInterval } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { isHTMLButtonElement, setAttribute, style } from '../../utils';\n\n\n/**\n * The interface for the Autoplay component.\n *\n * @since 3.0.0\n */\nexport interface AutoplayComponent extends BaseComponent {\n  play(): void;\n  pause(): void;\n  isPaused(): boolean;\n}\n\n/**\n * The component for auto playing sliders.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Autoplay component object.\n */\nexport function Autoplay( Splide: Splide, Components: Components, options: Options ): AutoplayComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const { Elements } = Components;\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), update );\n  const { isPaused } = interval;\n\n  /**\n   * Indicates whether the slider is hovered or not.\n   */\n  let hovered: boolean;\n\n  /**\n   * Indicates whether one of slider elements has focus or not.\n   */\n  let focused: boolean;\n\n  /**\n   * Turns into `true` when autoplay is manually paused.\n   */\n  let paused: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    const { autoplay } = options;\n\n    if ( autoplay ) {\n      initButton( true );\n      initButton( false );\n      listen();\n\n      if ( autoplay !== 'pause' ) {\n        play();\n      }\n    }\n  }\n\n  /**\n   * Initializes a play/pause button.\n   *\n   * @param forPause - Determines whether to initialize a pause or play button.\n   */\n  function initButton( forPause: boolean ): void {\n    const prop   = forPause ? 'pause' : 'play';\n    const button = Elements[ prop ];\n\n    if ( button ) {\n      if ( ! isHTMLButtonElement( button ) ) {\n        setAttribute( button, ROLE, 'button' );\n      }\n\n      setAttribute( button, ARIA_CONTROLS, Elements.track.id );\n      setAttribute( button, ARIA_LABEL, options.i18n[ prop ] );\n\n      bind( button, 'click', forPause ? pause : play );\n    }\n  }\n\n  /**\n   * Listens to some events.\n   */\n  function listen(): void {\n    const { root } = Elements;\n\n    if ( options.pauseOnHover ) {\n      bind( root, 'mouseenter mouseleave', e => {\n        hovered = e.type === 'mouseenter';\n        autoToggle();\n      } );\n    }\n\n    if ( options.pauseOnFocus ) {\n      bind( root, 'focusin focusout', e => {\n        focused = e.type === 'focusin';\n        autoToggle();\n      } );\n    }\n\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\n  }\n\n  /**\n   * Starts autoplay and clears all flags.\n   */\n  function play(): void {\n    if ( isPaused() && Components.Slides.isEnough() ) {\n      interval.start( ! options.resetProgress );\n      focused = false;\n      hovered = false;\n      emit( EVENT_AUTOPLAY_PLAY );\n    }\n  }\n\n  /**\n   * Pauses autoplay.\n   *\n   * @param manual - If `true`, autoplay keeps paused until `play()` is explicitly called.\n   */\n  function pause( manual = true ): void {\n    if ( ! isPaused() ) {\n      interval.pause();\n      emit( EVENT_AUTOPLAY_PAUSE );\n    }\n\n    paused = manual;\n  }\n\n  /**\n   * Toggles play/pause according to current flags.\n   * If autoplay is manually paused, this will do nothing.\n   */\n  function autoToggle(): void {\n    if ( ! paused ) {\n      if ( ! hovered && ! focused ) {\n        play();\n      } else {\n        pause( false );\n      }\n    }\n  }\n\n  /**\n   * Called on every animation frame when auto playing.\n   *\n   * @param rate - The progress rate between 0 to 1.\n   */\n  function update( rate: number ): void {\n    const { bar } = Elements;\n\n    if ( bar ) {\n      style( bar, { width: `${ rate * 100 }%` } );\n    }\n\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\n  }\n\n  return {\n    mount,\n    destroy: interval.cancel,\n    play,\n    pause,\n    isPaused,\n  };\n}\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { child, display } from '../../utils';\nimport { SlideComponent } from '../Slides/Slide';\n\n\n/**\n * The interface for the Cover component.\n *\n * @since 3.0.0\n */\nexport interface CoverComponent extends BaseComponent {\n}\n\n/**\n * The component for setting the image as the slide background.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Cover component object.\n */\nexport function Cover( Splide: Splide, Components: Components, options: Options ): CoverComponent {\n  const { on } = EventInterface( Splide );\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( options.cover ) {\n      on( EVENT_LAZYLOAD_LOADED, ( img, Slide ) => { toggle( true, img, Slide ) } );\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply.bind( null, true ) );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    apply( false );\n  }\n\n  /**\n   * Sets/removes the background image to/from all slides.\n   *\n   * @param cover - If `false`, removes the background image.\n   */\n  function apply( cover: boolean ): void {\n    Components.Slides.forEach( Slide => {\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\n\n      if ( img && img.src ) {\n        toggle( cover, img, Slide );\n      }\n    } );\n  }\n\n  /**\n   * Sets/removes the background image to/from the parent element.\n   *\n   * @param cover - If `false`, removes the background image.\n   * @param img   - A target image element.\n   * @param Slide - A SlideComponent object where the image belongs.\n   */\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\n    Slide.rule( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\n    display( img, cover ? 'none' : '' );\n  }\n\n  return {\n    mount,\n    destroy,\n  };\n}\n","/**\n * Triggers the bounce effect when the diff becomes less than this value.\n *\n * @since 3.0.0\n */\nexport const BOUNCE_DIFF_THRESHOLD = 10;\n\n/**\n * The duration of the bounce effect.\n *\n * @since 3.0.0\n */\nexport const BOUNCE_DURATION = 600;\n\n/**\n * The friction factor.\n *\n * @since 3.0.0\n */\nexport const FRICTION_FACTOR = 0.6;\n\n/**\n * The velocity to calculate the scroll duration.\n *\n * @since 3.0.0\n */\nexport const BASE_VELOCITY = 1.5;\n\n/**\n * The minimum duration of scroll.\n *\n * @since 3.0.0\n */\nexport const MIN_DURATION = 800;\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\nimport { SLIDE } from '../../constants/types';\nimport { EventInterface, RequestInterval, RequestIntervalInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, max } from '../../utils';\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\n\n\n/**\n * The interface for the Scroll component.\n *\n * @since 3.0.0\n */\nexport interface ScrollComponent extends BaseComponent {\n  scroll( position: number, duration?: number ): void;\n  cancel(): void;\n}\n\n/**\n * The component for scrolling the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Scroll component object.\n */\nexport function Scroll( Splide: Splide, Components: Components, options: Options ): ScrollComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { Move } = Components;\n  const { getPosition, getLimit, exceededLimit } = Move;\n\n  /**\n   * Retains the active RequestInterval object.\n   */\n  let interval: RequestIntervalInterface;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    on( EVENT_MOVE, clear );\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\n  }\n\n  /**\n   * Scrolls the slider to the provided destination.\n   *\n   * @param destination        - The destination to scroll to.\n   * @param duration           - Optional. The scroll duration. If omitted, calculates it by the distance.\n   * @param suppressConstraint - Optional. Whether to suppress constraint process when the slider exceeds bounds.\n   */\n  function scroll( destination: number, duration?: number, suppressConstraint?: boolean ): void {\n    const start = getPosition();\n    let friction = 1;\n\n    duration = duration || computeDuration( abs( destination - start ) );\n    clear();\n\n    interval = RequestInterval( duration, onScrolled, rate => {\n      const position = getPosition();\n      const target   = start + ( destination - start ) * easing( rate );\n      const diff     = ( target - getPosition() ) * friction;\n\n      Move.translate( position + diff );\n\n      if ( Splide.is( SLIDE ) && ! suppressConstraint && exceededLimit() ) {\n        friction *= FRICTION_FACTOR;\n\n        if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\n          bounce( exceededLimit( false ) );\n        }\n      }\n    }, 1 );\n\n    emit( EVENT_SCROLL );\n    interval.start();\n  }\n\n  /**\n   * Triggers the bounce effect when the slider reaches bounds.\n   *\n   * @param backwards - The direction the slider is going towards.\n   */\n  function bounce( backwards: boolean ): void {\n    scroll( getLimit( ! backwards ), BOUNCE_DURATION, true );\n  }\n\n  /**\n   * Called when scroll ends or is canceled.\n   */\n  function onScrolled(): void {\n    emit( EVENT_SCROLLED );\n  }\n\n  /**\n   * Computes the scroll duration by the distance and the base velocity.\n   *\n   * @param distance - Distance in pixel.\n   *\n   * @return The duration for scroll.\n   */\n  function computeDuration( distance: number ): number {\n    return max( distance / BASE_VELOCITY, MIN_DURATION );\n  }\n\n  /**\n   * Clears the active interval.\n   */\n  function clear(): void {\n    if ( interval ) {\n      interval.cancel();\n    }\n  }\n\n  /**\n   * Cancels the active interval and emits the `scrolled` event.\n   */\n  function cancel(): void {\n    if ( interval && ! interval.isPaused() ) {\n      clear();\n      onScrolled();\n    }\n  }\n\n  /**\n   * The easing function.\n   *\n   * @param t - A value to ease.\n   *\n   * @return An eased value.\n   */\n  function easing( t: number ): number {\n    const { easingFunc } = options;\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\n  }\n\n  return {\n    mount,\n    destroy: clear,\n    scroll,\n    cancel,\n  };\n}\n","/**\n * The power of the friction.\n *\n * @since 3.0.0\n */\nexport const FRICTION = 5;\n\n/**\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\n *\n * @since 3.0.0\n */\nexport const LOG_INTERVAL = 50;\n\n/**\n * Start events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\n\n/**\n * Update events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\n\n/**\n * End events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup mouseleave';\n","import { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, clamp, min, prevent, sign } from '../../utils';\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\n\n\n/**\n * The interface for the Drag component.\n *\n * @since 3.0.0\n */\nexport interface DragComponent extends BaseComponent {\n  disable( disabled: boolean ): void\n}\n\n/**\n * The component for dragging the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Drag component object.\n */\nexport function Drag( Splide: Splide, Components: Components, options: Options ): DragComponent {\n  const { on, emit, bind, unbind } = EventInterface( Splide );\n  const { Move, Scroll, Controller } = Components;\n  const { track } = Components.Elements;\n  const { resolve, orient } = Components.Direction;\n  const { getPosition, exceededLimit } = Move;\n  const isSlide = Splide.is( SLIDE );\n  const isFade  = Splide.is( FADE );\n\n  /**\n   * The base slider position to calculate the delta of coords.\n   */\n  let basePosition: number;\n\n  /**\n   * The base event object saved per specific sampling interval.\n   */\n  let baseEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Holds the previous base event object.\n   */\n  let prevBaseEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Keeps the last TouchEvent/MouseEvent object on pointermove.\n   */\n  let lastEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Indicates whether the drag mode is `free` or not.\n   */\n  let isFree: boolean;\n\n  /**\n   * Indicates whether the user is dragging the slider or not.\n   */\n  let isDragging: boolean;\n\n  /**\n   * Indicates whether the user drags the slider by the mouse or not.\n   */\n  let isMouse: boolean;\n\n  /**\n   * Indicates whether the slider exceeds limits or not.\n   * This must not be `undefined` for strict comparison.\n   */\n  let hasExceeded = false;\n\n  /**\n   * Turns into `true` when the user starts dragging the slider.\n   */\n  let clickPrevented: boolean;\n\n  /**\n   * Indicates whether the drag component is now disabled or not.\n   */\n  let disabled: boolean;\n\n  /**\n   * The target element to attach listeners.\n   */\n  let target: Window | HTMLElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown );\n    bind( track, 'click', onClick, { capture: true } );\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    const { drag } = options;\n    disable( ! drag );\n    isFree = drag === 'free';\n  }\n\n  /**\n   * Called when the user clicks or touches the slider.\n   * Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images.\n   * Note that IE does not support MouseEvent and TouchEvent constructors.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\n    if ( ! disabled ) {\n      isMouse = e.type === 'mousedown';\n\n      if ( ! isMouse || ! ( e as MouseEvent ).button ) {\n        if ( ! Move.isBusy() ) {\n          target         = isMouse ? window : track;\n          prevBaseEvent  = null;\n          lastEvent      = null;\n          clickPrevented = false;\n\n          bind( target, POINTER_MOVE_EVENTS, onPointerMove );\n          bind( target, POINTER_UP_EVENTS, onPointerUp );\n          Move.cancel();\n          Scroll.cancel();\n          save( e );\n        } else {\n          prevent( e, true );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called while the user moves the pointer on the slider.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\n    if ( ! lastEvent ) {\n      clickPrevented = true;\n      emit( EVENT_DRAG );\n    }\n\n    lastEvent = e;\n\n    if ( ! e.cancelable ) {\n      return;\n    }\n\n    if ( isDragging ) {\n      const expired  = timeOf( e ) - timeOf( baseEvent ) > LOG_INTERVAL;\n      const exceeded = hasExceeded !== ( hasExceeded = exceededLimit() );\n\n      if ( expired || exceeded ) {\n        save( e );\n      }\n\n      if ( ! isFade ) {\n        Move.translate( basePosition + constrain( coordOf( e ) - coordOf( baseEvent ) ) );\n      }\n\n      emit( EVENT_DRAGGING );\n      prevent( e );\n    } else {\n      const threshold = options.dragMinThreshold || 15;\n      isDragging = isMouse || abs( coordOf( e ) - coordOf( baseEvent ) ) > threshold;\n\n      if ( isSliderDirection() ) {\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Called when the user releases pointing devices.\n   * Be aware that the TouchEvent object provided by the `touchend` does not contain `Touch` objects,\n   * which means the last touch position is not available.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\n    unbind( target, `${ POINTER_MOVE_EVENTS } ${ POINTER_UP_EVENTS }` );\n\n    if ( lastEvent ) {\n      if ( isDragging || ( e.cancelable && isSliderDirection() ) ) {\n        const velocity    = computeVelocity( e );\n        const destination = computeDestination( velocity );\n\n        if ( isFree ) {\n          Scroll.scroll( destination );\n        } else if ( isFade ) {\n          Controller.go( Splide.index + orient( sign( velocity ) ) );\n        } else {\n          Controller.go( computeIndex( destination ), true );\n        }\n\n        prevent( e );\n      }\n\n      emit( EVENT_DRAGGED );\n    }\n\n    isDragging = false;\n  }\n\n  /**\n   * Saves data at the specific moment.\n   *\n   * @param e  A TouchEvent or MouseEvent object\n   */\n  function save( e: TouchEvent | MouseEvent ): void {\n    prevBaseEvent = baseEvent;\n    baseEvent     = e;\n    basePosition  = getPosition();\n  }\n\n  /**\n   * Called when the track element is clicked.\n   * Disables click any elements inside it while dragging.\n   *\n   * @param e - A MouseEvent object.\n   */\n  function onClick( e: MouseEvent ): void {\n    if ( ! disabled && clickPrevented ) {\n      prevent( e, true );\n    }\n  }\n\n  /**\n   * Checks whether dragging towards the slider or scroll direction.\n   *\n   * @return `true` if going towards the slider direction, or otherwise `false`.\n   */\n  function isSliderDirection(): boolean {\n    const diffX = abs( coordOf( lastEvent ) - coordOf( baseEvent ) );\n    const diffY = abs( coordOf( lastEvent, true ) - coordOf( baseEvent, true ) );\n    return diffX > diffY;\n  }\n\n  /**\n   * Computes the drag velocity.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   *\n   * @return The drag velocity.\n   */\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\n    if ( Splide.is( LOOP ) || ! hasExceeded ) {\n      const base      = baseEvent === lastEvent && prevBaseEvent || baseEvent;\n      const diffCoord = coordOf( lastEvent ) - coordOf( base );\n      const diffTime  = timeOf( e ) - timeOf( base );\n      const isFlick   = timeOf( e ) - timeOf( lastEvent ) < LOG_INTERVAL;\n\n      if ( diffTime && isFlick ) {\n        return diffCoord / diffTime;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Computes the destination by the velocity and the `flickPower` option.\n   *\n   * @param velocity - The drag velocity.\n   *\n   * @return The destination.\n   */\n  function computeDestination( velocity: number ): number {\n    return getPosition() + sign( velocity ) * min(\n      abs( velocity ) * ( options.flickPower || 600 ),\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\n    );\n  }\n\n  /**\n   * Converts the destination to the slide index.\n   *\n   * @param destination - The target destination.\n   *\n   * @return The destination index.\n   */\n  function computeIndex( destination: number ): number {\n    const dest = Move.toIndex( destination );\n    return isSlide ? clamp( dest, 0, Controller.getEnd() ) : dest;\n  }\n\n  /**\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\n   *\n   * @param e          - A TouchEvent or MouseEvent object.\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\n   *\n   * @return A pageX or pageY coordinate.\n   */\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\n    const prop = `page${ resolve( orthogonal ? 'Y' : 'X' ) }`;\n    return ( isMouse ? e : ( e as TouchEvent ).touches[ 0 ] )[ prop ];\n  }\n\n  /**\n   * Returns the time stamp in the provided event object.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   *\n   * @return A time stamp.\n   */\n  function timeOf( e: TouchEvent | MouseEvent ): number {\n    return e.timeStamp;\n  }\n\n  /**\n   * Reduces the distance to move by the predefined friction.\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\n   *\n   * @param diff - Diff to constrain.\n   *\n   * @return The constrained diff.\n   */\n  function constrain( diff: number ): number {\n    return diff / ( hasExceeded && isSlide ? FRICTION : 1 );\n  }\n\n  /**\n   * Disables the component.\n   *\n   * @param value - Set `true` to disable the component.\n   */\n  function disable( value: boolean ): void {\n    disabled = value;\n  }\n\n  return {\n    mount,\n    disable,\n  };\n}\n","import { TAB_INDEX } from '../../constants/attributes';\nimport { EVENT_UPDATED } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { includes, isHTMLElement, removeAttribute, setAttribute } from '../../utils';\n\n\n/**\n * The interface for the Keyboard component.\n *\n * @since 3.0.0\n */\nexport interface KeyboardComponent extends BaseComponent {\n}\n\n/**\n * The collection of arrow keys of IE.\n *\n * @since 3.0.0\n */\nconst IE_ARROW_KEYS = [ 'Left', 'Right', 'Up', 'Down' ];\n\n/**\n * The component for controlling the slider by keyboards.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Keyboard component object.\n */\nexport function Keyboard( Splide: Splide, Components: Components, options: Options ): KeyboardComponent {\n  const { on, bind, unbind } = EventInterface( Splide );\n  const { root } = Components.Elements;\n  const { resolve } = Components.Direction;\n\n  /**\n   * The target element of the keyboard event.\n   */\n  let target: Window | HTMLElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n\n    on( EVENT_UPDATED, () => {\n      destroy();\n      init();\n    } );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    const { keyboard = 'global' } = options;\n\n    if ( keyboard ) {\n      if ( keyboard === 'focused' ) {\n        target = root;\n        setAttribute( root, TAB_INDEX, 0 );\n      } else {\n        target = window;\n      }\n\n      bind( target, 'keydown', onKeydown );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy() {\n    if ( target ) {\n      unbind( target, 'keydown' );\n\n      if ( isHTMLElement( target ) ) {\n        removeAttribute( target, TAB_INDEX );\n      }\n    }\n  }\n\n  /**\n   * Called when any key is pressed on the target.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  function onKeydown( e: KeyboardEvent ): void {\n    const key = normalize( e.key );\n\n    if ( key === resolve( 'ArrowLeft' ) ) {\n      Splide.go( '<' );\n    } else if ( key === resolve( 'ArrowRight' ) ) {\n      Splide.go( '>' );\n    }\n  }\n\n  /**\n   * Absorbs the difference of key names among browsers.\n   *\n   * @param key - A key to normalize.\n   *\n   * @return A normalized key.\n   */\n  function normalize( key: string ): string {\n    return includes( IE_ARROW_KEYS, key ) ? `Arrow${ key }` : key;\n  }\n\n  return {\n    mount,\n    destroy,\n  };\n}\n","import { DATA_ATTRIBUTE } from '../../constants/project';\n\n\n/**\n * The data attribute for the src value.\n *\n * @since 3.0.0\n */\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\n\n/**\n * The data attribute for the srcset value.\n *\n * @since 3.0.0\n */\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\n\n/**\n * The selector string for images to load.\n *\n * @since 3.0.0\n */\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\n","import { ROLE } from '../../constants/attributes';\nimport { CLASS_LOADING } from '../../constants/classes';\nimport {\n  EVENT_LAZYLOAD_LOADED,\n  EVENT_MOUNTED,\n  EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_RESIZE,\n} from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass,\n  create,\n  display,\n  getAttribute,\n  queryAll,\n  remove,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n} from '../../utils';\nimport { SlideComponent } from '../Slides/Slide';\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\n\n\n/**\n * The interface for the LazyLoad component.\n *\n * @since 3.0.0\n */\nexport interface LazyLoadComponent extends BaseComponent {\n}\n\n/**\n * The interface for all components.\n *\n * @since 3.0.0\n */\nexport interface LazyLoadImagesData {\n  _img: HTMLImageElement;\n  _spinner: HTMLSpanElement;\n  _Slide: SlideComponent;\n  src: string | null;\n  srcset: string | null;\n}\n\n/**\n * The component for lazily loading images.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An LazyLoad component object.\n */\nexport function LazyLoad( Splide: Splide, Components: Components, options: Options ): LazyLoadComponent {\n  const { on, off, bind, emit } = EventInterface( Splide );\n  const isSequential = options.lazyLoad === 'sequential';\n\n  /**\n   * Stores data of images.\n   */\n  let images: LazyLoadImagesData[] = [];\n\n  /**\n   * The current index of images.\n   */\n  let index = 0;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( options.lazyLoad ) {\n      on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\n        destroy();\n        init();\n      } );\n\n      if ( ! isSequential ) {\n        on( [ EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED ], observe );\n      }\n    }\n  }\n\n  /**\n   * Finds images that contain specific data attributes.\n   */\n  function init() {\n    Components.Slides.forEach( _Slide => {\n      queryAll<HTMLImageElement>( _Slide.slide, IMAGE_SELECTOR ).forEach( _img => {\n        const src    = getAttribute( _img, SRC_DATA_ATTRIBUTE );\n        const srcset = getAttribute( _img, SRCSET_DATA_ATTRIBUTE );\n\n        if ( src !== _img.src || srcset !== _img.srcset ) {\n          const _spinner = create( 'span', options.classes.spinner, _img.parentElement );\n          setAttribute( _spinner, ROLE, 'presentation' );\n          images.push( { _img, _Slide, src, srcset, _spinner } );\n          display( _img, 'none' );\n        }\n      } );\n    } );\n\n    if ( isSequential ) {\n      loadNext();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy() {\n    index  = 0;\n    images = [];\n  }\n\n  /**\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\n   * The last `+1` is for the current page.\n   */\n  function observe(): void {\n    images = images.filter( data => {\n      if ( data._Slide.isWithin( Splide.index, options.perPage * ( ( options.preloadPages || 1 ) + 1 ) ) ) {\n        return load( data );\n      }\n\n      return true;\n    } );\n\n    if ( ! images.length ) {\n      off( EVENT_MOVED );\n    }\n  }\n\n  /**\n   * Starts loading the image in the data.\n   *\n   * @param data - A LazyLoadImagesData object.\n   */\n  function load( data: LazyLoadImagesData ): void {\n    const { _img } = data;\n\n    addClass( data._Slide.slide, CLASS_LOADING );\n    bind( _img, 'load error', e => { onLoad( data, e.type === 'error' ) } );\n\n    [ 'src', 'srcset' ].forEach( name => {\n      if ( data[ name ] ) {\n        setAttribute( _img, name, data[ name ] );\n        removeAttribute( _img, name === 'src' ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE );\n      }\n    } );\n  }\n\n  /**\n   * Called when the image is loaded or any error occurs.\n   *\n   * @param data  - A LazyLoadImagesData object.\n   * @param error - `true` if this method is called on error.\n   */\n  function onLoad( data: LazyLoadImagesData, error: boolean ): void {\n    const { _Slide } = data;\n\n    removeClass( _Slide.slide, CLASS_LOADING );\n\n    if ( ! error ) {\n      remove( data._spinner );\n      display( data._img, '' );\n      emit( EVENT_LAZYLOAD_LOADED, data._img, _Slide );\n      emit( EVENT_RESIZE );\n    }\n\n    if ( isSequential ) {\n      loadNext();\n    }\n  }\n\n  /**\n   * Starts loading a next image.\n   */\n  function loadNext(): void {\n    if ( index < images.length ) {\n      load( images[ index++ ] );\n    }\n  }\n\n  return {\n    mount,\n    destroy,\n  };\n}\n","import { ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL } from '../../constants/attributes';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport {\n  EVENT_MOVE, EVENT_PAGINATION_MOUNTED,\n  EVENT_PAGINATION_PAGE, EVENT_PAGINATION_UPDATED,\n  EVENT_REFRESH,\n  EVENT_SCROLLED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { Splide } from '../../core/Splide/Splide';\nimport { EventInterface } from '../../constructors';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { addClass, ceil, create, empty, remove, removeAttribute, removeClass, setAttribute } from '../../utils';\nimport { format } from '../../utils';\n\n\n/**\n * The interface for the Pagination component.\n *\n * @since 3.0.0\n */\nexport interface PaginationComponent extends BaseComponent {\n  items: PaginationItem[];\n  getAt( index: number ): PaginationItem;\n}\n\n/**\n * The interface for each pagination item.\n *\n * @since 3.0.0\n */\nexport interface PaginationItem {\n  li: HTMLLIElement;\n  button: HTMLButtonElement;\n  page: number;\n}\n\n/**\n * The component for handling previous and next arrows.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Arrows component object.\n */\nexport function Pagination( Splide: Splide, Components: Components, options: Options ): PaginationComponent {\n  const { on, emit, bind, unbind } = EventInterface( Splide );\n  const { Slides, Elements } = Components;\n  const { go, toPage, hasFocus, getIndex } = Components.Controller;\n\n  /**\n   * Stores all pagination items.\n   */\n  const items: PaginationItem[] = [];\n\n  /**\n   * The pagination element.\n   */\n  let list: HTMLUListElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\n    on( [ EVENT_MOVE, EVENT_SCROLLED ], update );\n  }\n\n  /**\n   * Initializes the pagination.\n   */\n  function init(): void {\n    destroy();\n\n    if ( options.pagination && Slides.isEnough() ) {\n      createPagination();\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\n      update();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    if ( list ) {\n      remove( list );\n      items.forEach( item => { unbind( item.button, 'click' ) } );\n      empty( items );\n      list = null;\n    }\n  }\n\n  /**\n   * Creates the pagination element and appends it to the slider.\n   */\n  function createPagination(): void {\n    const { length } = Splide;\n    const { classes, i18n, perPage } = options;\n    const parent = options.pagination === 'slider' && Elements.slider || Elements.root;\n    const max    = hasFocus() ? length : ceil( length / perPage );\n\n    list = create( 'ul', classes.pagination, parent );\n\n    for ( let i = 0; i < max; i++ ) {\n      const li       = create( 'li', null, list );\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n\n      bind( button, 'click', () => { go( `>${ i }`, true ) } );\n\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\n\n      emit( EVENT_PAGINATION_PAGE, list, li, button, i );\n\n      items.push( { li, button, page: i } );\n    }\n  }\n\n  /**\n   * Returns the pagination item at the specified index.\n   *\n   * @param index - An index.\n   *\n   * @return A pagination item object if available, or otherwise `undefined`.\n   */\n  function getAt( index: number ): PaginationItem | undefined {\n    return items[ toPage( index ) ];\n  }\n\n  /**\n   * Updates the pagination status.\n   */\n  function update(): void {\n    const prev = getAt( getIndex( true ) );\n    const curr = getAt( getIndex() );\n\n    if ( prev ) {\n      removeClass( prev.button, CLASS_ACTIVE );\n      removeAttribute( prev.button, ARIA_CURRENT );\n    }\n\n    if ( curr ) {\n      addClass( curr.button, CLASS_ACTIVE );\n      setAttribute( curr.button, ARIA_CURRENT, true );\n    }\n\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\n  }\n\n  return {\n    items,\n    mount,\n    destroy,\n    getAt,\n  };\n}\n","import { EVENT_CLICK, EVENT_MOVE, EVENT_NAVIGATION_MOUNTED, EVENT_SLIDE_KEYDOWN } from '../../constants/events';\nimport { LOOP } from '../../constants/types';\nimport { Splide } from '../../core/Splide/Splide';\nimport { EventInterface } from '../../constructors';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { empty, includes, prevent } from '../../utils';\n\n\n/**\n * The interface for the Sync component.\n *\n * @since 3.0.0\n */\nexport interface SyncComponent extends BaseComponent {\n}\n\n/**\n * The keys for triggering the navigation slide.\n *\n * @since 3.0.0\n */\nconst TRIGGER_KEYS = [ ' ', 'Enter', 'Spacebar' ];\n\n/**\n * The component for syncing multiple sliders.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Sync component object.\n */\nexport function Sync( Splide: Splide, Components: Components, options: Options ): SyncComponent {\n  const { splides } = Splide;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( options.isNavigation ) {\n      navigate();\n    } else {\n      sync();\n    }\n  }\n\n  /**\n   * Syncs the current index among all slides.\n   * The `processed` array prevents recursive call of handlers.\n   */\n  function sync(): void {\n    const processed: Splide[] = [];\n\n    splides.concat( Splide ).forEach( ( splide, index, instances ) => {\n      EventInterface( splide ).on( EVENT_MOVE, ( index, prev, dest ) => {\n        instances.forEach( instance => {\n          if ( instance !== splide && ! includes( processed, splide ) ) {\n            processed.push( instance );\n            instance.go( instance.is( LOOP ) ? dest : index );\n          }\n        } );\n\n        empty( processed );\n      } );\n    } );\n  }\n\n  /**\n   * Makes slides clickable and moves the slider to the index of clicked slide.\n   */\n  function navigate(): void {\n    const { on, emit } = EventInterface( Splide );\n\n    on( EVENT_CLICK, Slide => {\n      Splide.go( Slide.index );\n    } );\n\n    on( EVENT_SLIDE_KEYDOWN, ( Slide, e: KeyboardEvent ) => {\n      if ( includes( TRIGGER_KEYS, e.key ) ) {\n        Splide.go( Slide.index );\n        prevent( e );\n      }\n    } );\n\n    emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\n  }\n\n  return {\n    mount,\n  };\n}\n","import { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { prevent } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel( Splide: Splide, Components: Components, options: Options ): WheelComponent {\r\n  const { bind } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      bind( Components.Elements.track, 'wheel', onWheel );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    const { deltaY } = e;\r\n\r\n    if ( deltaY ) {\r\n      Splide.go( deltaY < 0 ? '<' : '>' );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","/**\n * The collection of i18n strings.\n *\n * @since 3.0.0\n */\nexport const I18N = {\n  prev  : 'Previous slide',\n  next  : 'Next slide',\n  first : 'Go to first slide',\n  last  : 'Go to last slide',\n  slideX: 'Go to slide %s',\n  pageX : 'Go to page %s',\n  play  : 'Start autoplay',\n  pause : 'Pause autoplay',\n};\n","import { Options } from '../types';\nimport { CLASSES } from './classes';\nimport { I18N } from './i18n';\n\n\n/**\n * The collection of default options.\n * Note that this collection does not contain all options.\n *\n * @since 3.0.0\n */\nexport const DEFAULTS: Options = {\n  type             : 'slide',\n  speed            : 400,\n  waitForTransition: true,\n  perPage          : 1,\n  arrows           : true,\n  pagination       : true,\n  interval         : 5000,\n  pauseOnHover     : true,\n  pauseOnFocus     : true,\n  resetProgress    : true,\n  easing           : 'cubic-bezier(.42,.65,.27,.99)',\n  drag             : true,\n  direction        : 'ltr',\n  slideFocus       : true,\n  trimSpace        : true,\n  classes          : CLASSES,\n  i18n             : I18N,\n};\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { Components, Options, TransitionComponent } from '../../types';\nimport { nextTick, noop, rect, unit } from '../../utils';\n\n\n/**\n * The component for the fade transition.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Transition component object.\n */\nexport function Fade( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\n  const { on } = EventInterface( Splide );\n  const { ruleBy } = Components.Style;\n\n  /**\n   * Called when the component is mounted.\n   * The nextTick disables the initial fade transition of the first slide.\n   */\n  function mount(): void {\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\n      nextTick( () => {\n        Components.Slides.forEach( Slide => {\n          ruleBy( Slide.slide, 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\n        } );\n      } );\n    } );\n  }\n\n  /**\n   * Starts the transition.\n   * Explicitly sets the track height to avoid it will collapse in Safari.\n   *\n   * @param index - A destination index.\n   * @param done  - The callback function that must be called after the transition ends.\n   */\n  function start( index: number, done: () => void ): void {\n    const { track } = Components.Elements;\n    ruleBy( track, 'height', unit( rect( track ).height ) );\n\n    nextTick( () => {\n      done();\n      ruleBy( track, 'height', '' );\n    } );\n  }\n\n  return {\n    mount,\n    start,\n    cancel: noop,\n  };\n}\n","import { SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { Components, Options, TransitionComponent } from '../../types';\nimport { abs } from '../../utils';\n\n\n/**\n * The component for the slide transition.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Transition component object.\n */\nexport function Slide( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\n  const { bind } = EventInterface( Splide );\n  const { Move, Controller } = Components;\n  const { list } = Components.Elements;\n\n  /**\n   * Holds the `done` callback function.\n   */\n  let endCallback: () => void;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    bind( list, 'transitionend', e => {\n      if ( e.target === list && endCallback ) {\n        cancel();\n        endCallback();\n      }\n    } );\n  }\n\n  /**\n   * Starts the transition.\n   * The Move component calls this method just before the slider moves.\n   *\n   * @param index - A destination index.\n   * @param done  - The callback function that must be called after the transition ends.\n   */\n  function start( index: number, done: () => void ): void {\n    const destination = Move.toPosition( index, true );\n    const position    = Move.getPosition();\n    const speed       = getSpeed( index );\n\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\n      apply( `transform ${ speed }ms ${ options.easing }` );\n      Move.translate( destination );\n      endCallback = done;\n    } else {\n      Move.jump( index );\n      done();\n    }\n  }\n\n  /**\n   * Cancels the transition.\n   */\n  function cancel(): void {\n    apply( '' );\n  }\n\n  /**\n   * Returns the transition speed.\n   *\n   * @param index - A destination index.\n   */\n  function getSpeed( index: number ): number {\n    const { rewindSpeed } = options;\n\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\n      const prev = Controller.getIndex( true );\n      const end  = Controller.getEnd();\n\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\n        return rewindSpeed;\n      }\n    }\n\n    return options.speed;\n  }\n\n  /**\n   * Applies the transition CSS property to the list element.\n   *\n   * @param transition - A transition CSS value.\n   */\n  function apply( transition: string ): void {\n    Components.Style.ruleBy( list, 'transition', transition );\n  }\n\n  return {\n    mount,\n    start,\n    cancel,\n  };\n}\n","import * as ComponentConstructors from '../../components';\nimport { SlideMatcher } from '../../components/Slides/Slides';\nimport { CLASS_INITIALIZED } from '../../constants/classes';\nimport { DEFAULTS } from '../../constants/defaults';\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_USER_EVENT_PRIORITY } from '../../constants/priority';\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\nimport { FADE } from '../../constants/types';\nimport { EventBus, EventBusCallback, EventBusObject, State, StateObject } from '../../constructors';\nimport { Fade, Slide } from '../../transitions';\nimport { ComponentConstructor, Components, Options } from '../../types';\nimport { addClass, assert, assign, empty, forOwn, isString, merge, query } from '../../utils';\n\n\n/**\n * The frontend class for the Splide slider.\n *\n * @since 3.0.0\n */\nexport class Splide {\n  /**\n   * Changes the default options for all Splide instances.\n   */\n  static defaults: Options = {};\n\n  /**\n   * The collection of state numbers.\n   */\n  static readonly STATES = STATES;\n\n  /**\n   * The root element where the Splide is applied.\n   */\n  readonly root: HTMLElement;\n\n  /**\n   * The EventBusObject object.\n   */\n  readonly event: EventBusObject = EventBus();\n\n  /**\n   * The collection of all component objects.\n   */\n  readonly Components: Components = {} as Components;\n\n  /**\n   * The StateObject object.\n   */\n  readonly state: StateObject = State( CREATED );\n\n  /**\n   * Splide instances to sync with.\n   */\n  readonly splides: Splide[] = [];\n\n  /**\n   * The collection of options.\n   */\n  private readonly _options: Options = {};\n\n  /**\n   * The collection of all components.\n   */\n  private _Components: Components;\n\n  /**\n   * The collection of extensions.\n   */\n  private _Extensions: Record<string, ComponentConstructor> = {};\n\n  /**\n   * The Transition component.\n   */\n  private _Transition: ComponentConstructor;\n\n  /**\n   * The Splide constructor.\n   *\n   * @param target  - The selector for the target element, or the element itself.\n   * @param options - Optional. An object with options.\n   */\n  constructor( target: string | HTMLElement, options?: Options ) {\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\n    assert( root, `${ root } is invalid.` );\n\n    this.root = root;\n\n    merge( DEFAULTS, Splide.defaults );\n    merge( merge( this._options, DEFAULTS ), options || {} );\n  }\n\n  /**\n   * Initializes the instance.\n   *\n   * @param Extensions - Optional. An object with extensions.\n   * @param Transition - Optional. A Transition component.\n   *\n   * @return `this`\n   */\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\n    const { state, Components } = this;\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted.' );\n\n    state.set( CREATED );\n\n    this._Components = Components;\n    this._Transition = Transition || this._Transition || ( this.is( FADE ) ? Fade : Slide );\n    this._Extensions = Extensions || this._Extensions;\n\n    const Constructors = assign( {}, ComponentConstructors, this._Extensions, { Transition: this._Transition } );\n\n    forOwn( Constructors, ( Component, key ) => {\n      const component = Component( this, Components, this._options );\n      Components[ key ] = component;\n      component.setup && component.setup();\n    } );\n\n    forOwn( Components, component => {\n      component.mount && component.mount();\n    } );\n\n    this.emit( EVENT_MOUNTED );\n\n    addClass( this.root, CLASS_INITIALIZED );\n\n    state.set( IDLE );\n    this.emit( EVENT_READY );\n\n    return this;\n  }\n\n  /**\n   * Syncs the slider with the provided one.\n   * This method must be called before the `mount()`.\n   *\n   * @example\n   * ```ts\n   * var primary   = new Splide();\n   * var secondary = new Splide();\n   *\n   * primary.sync( secondary );\n   * primary.mount();\n   * secondary.mount();\n   * ```\n   *\n   * @param splide - A Splide instance to sync with.\n   *\n   * @return `this`\n   */\n  sync( splide: Splide ): this {\n    this.splides.push( splide );\n    splide.splides.push( this );\n    return this;\n  }\n\n  /**\n   * Moves the slider with the following control pattern.\n   *\n   * | Pattern | Description |\n   * |---|---|\n   * | `i` | Goes to the slide `i` |\n   * | `'+${i}'` | Increments the slide index by `i` |\n   * | `'-${i}'` | Decrements the slide index by `i` |\n   * | `'>'` | Goes to the next page |\n   * | `'<'` | Goes to the previous page |\n   * | `>${i}` | Goes to the page `i` |\n   *\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\n   * because they respect `perPage` and `perMove` options.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Goes to the slide 1:\n   * splide.go( 1 );\n   *\n   * // Increments the index:\n   * splide.go( '+2' );\n   *\n   * // Goes to the next page:\n   * splide.go( '>' );\n   *\n   * // Goes to the page 2:\n   * splide.go( '>2' );\n   * ```\n   *\n   * @param control\n   */\n  go( control: number | string ): void {\n    this._Components.Controller.go( control );\n  }\n\n  /**\n   * Registers an event handler.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Listens to a single event:\n   * splide.on( 'move', function() {} );\n   *\n   * // Listens to multiple events:\n   * splide.on( 'move resize', function() {} );\n   *\n   * // Appends a namespace:\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\n   * ```\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\n   * @param callback - A callback function.\n   *\n   * @return `this`\n   */\n  on( events: string, callback: EventBusCallback ): this {\n    this.event.on( events, callback, null, DEFAULT_USER_EVENT_PRIORITY );\n    return this;\n  }\n\n  /**\n   * Removes the registered all handlers for the specified event or events.\n   * If you want to only remove a particular handler, use namespace to identify it.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Removes all handlers assigned to \"move\":\n   * splide.off( 'move' );\n   *\n   * // Only removes handlers that belong to the specified namespace:\n   * splide.off( 'move.myNamespace' );\n   * ```\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\n   *\n   * @return `this`\n   */\n  off( events: string ): this {\n    this.event.off( events );\n    return this;\n  }\n\n  /**\n   * Emits an event and triggers registered handlers.\n   *\n   * @param event - An event name to emit.\n   * @param args  - Optional. Any number of arguments to pass to handlers.\n   *\n   * @return `this`\n   */\n  emit( event: string, ...args: any[] ): this {\n    this.event.emit( event, ...args );\n    return this;\n  }\n\n  /**\n   * Inserts a slide at the specified position.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   * splide.mount();\n   *\n   * // Adds the slide by the HTML:\n   * splide.add( '<li></li> );\n   *\n   * // or adds the element:\n   * splide.add( document.createElement( 'li' ) );\n   * ```\n   *\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\n   * @param index  - Optional. An index to insert a slide at.\n   *\n   * @return `this`\n   */\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\n    this._Components.Slides.add( slides, index );\n    return this;\n  }\n\n  /**\n   * Removes slides that match the matcher\n   * that can be an index, an array with indices, a selector, or an iteratee function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\n   */\n  remove( matcher: SlideMatcher ): this {\n    this._Components.Slides.remove( matcher );\n    return this;\n  }\n\n  /**\n   * Checks the slider type.\n   *\n   * @param type - A type to test.\n   *\n   * @return `true` if the type matches the current one, or otherwise `false`.\n   */\n  is( type: string ): boolean {\n    return this._options.type === type;\n  }\n\n  /**\n   * Refreshes the slider.\n   *\n   * @return `this`\n   */\n  refresh(): this {\n    this.emit( EVENT_REFRESH );\n    return this;\n  }\n\n  /**\n   * Destroys the slider.\n   *\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\n   *\n   * @return `this`\n   */\n  destroy( completely?: boolean ): this {\n    const { event, state } = this;\n\n    if ( state.is( CREATED ) ) {\n      // Postpones destruction requested before the slider becomes ready.\n      event.on( EVENT_READY, this.destroy.bind( this, completely ), this );\n    } else {\n      forOwn( this._Components, component => {\n        component.destroy && component.destroy( completely );\n      } );\n\n      event.emit( EVENT_DESTROY );\n      event.destroy();\n      empty( this.splides );\n      state.set( DESTROYED );\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns options.\n   *\n   * @return An object with the latest options.\n   */\n  get options(): Options {\n    return this._options;\n  }\n\n  /**\n   * Merges options to the current options and emits `updated` event.\n   *\n   * @param options - An object with new options.\n   */\n  set options( options: Options ) {\n    const { _options } = this;\n    merge( _options, options );\n\n    if ( ! this.state.is( CREATED ) ) {\n      this.emit( EVENT_UPDATED, _options );\n    }\n  }\n\n  /**\n   * Returns the number of slides without clones.\n   *\n   * @return The number of slides.\n   */\n  get length(): number {\n    return this._Components.Slides.getLength( true );\n  }\n\n  /**\n   * Returns the active slide index.\n   *\n   * @return The active slide index.\n   */\n  get index(): number {\n    return this._Components.Controller.getIndex();\n  }\n}\n\n"],"names":["PROJECT_CODE","DATA_ATTRIBUTE","CREATED","MOUNTED","IDLE","MOVING","DESTROYED","STATES","DEFAULT_EVENT_PRIORITY","DEFAULT_USER_EVENT_PRIORITY","array","length","subject","isNull","Array","isArray","HTMLElement","HTMLButtonElement","value","values","iteratee","forEach","indexOf","items","push","toArray","arrayProto","prototype","arrayLike","start","end","slice","call","predicate","filter","elm","classes","add","name","classList","parent","children","appendChild","bind","nodes","ref","parentNode","insertBefore","node","selector","matches","child","firstElementChild","object","keys","Object","i","key","sources","source","isObject","merge","attrs","removeAttribute","attr","value2","setAttribute","String","tag","document","createElement","isString","elms","styles","getComputedStyle","style","display2","display","getAttribute","className","contains","html","DOMParser","parseFromString","body","e","stopPropagation","preventDefault","stopImmediatePropagation","querySelector","querySelectorAll","target","getBoundingClientRect","removeChild","condition","message","Error","callback","noop","func","requestAnimationFrame","x","y","epsilon","Math","abs","number","minOrMax","maxOrMin","exclusive","min","max","minimum","maximum","floor","ceil","round","string","replacements","replace","replacement","ids","prefix","pad","handlers","events","priority","event","namespace","_event","_callback","_namespace","_priority","_key","sort","handler1","handler2","eventHandlers","handler","apply","arguments","join","split","fragments","eventNS","on","off","offBy","emit","destroy","EVENT_MOUNTED","EVENT_READY","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_SLIDE_KEYDOWN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_DRAG","EVENT_DRAGGING","EVENT_DRAGGED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_DESTROY","EVENT_ARROWS_MOUNTED","EVENT_ARROWS_UPDATED","EVENT_PAGINATION_MOUNTED","EVENT_PAGINATION_PAGE","EVENT_PAGINATION_UPDATED","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PLAYING","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","Splide2","listeners","targets","options","event2","addEventListener","listener","removeEventListener","unbind","data","interval","onInterval","onUpdate","limit","now","Date","startTime","rate","id","paused","count","elapsed","update","resume","cancel","rewind","pause","isPaused","initialState","state","states","includes","set","is","duration","RequestInterval","throttled","Components2","throttledObserve","Throttle","observe","initialOptions","points","currPoint","JSON","parse","root","breakpoints","n","m","map","point","matchMedia","mediaQuery","completely","item","find","item2","newOptions","mount","setup","RTL","TTB","ORIENTATION_MAP","marginRight","width","autoWidth","fixedWidth","paddingLeft","paddingRight","left","right","X","Y","ArrowLeft","ArrowRight","prop","axisOnly","direction","index","resolve","orient","CLASS_ROOT","CLASS_SLIDER","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS","CLASS_PROGRESS_BAR","CLASS_AUTOPLAY","CLASS_PLAY","CLASS_PAUSE","CLASS_SPINNER","CLASS_INITIALIZED","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","prev","next","pagination","page","spinner","EventInterface","elements","slides","slider","track","list","getClasses","refresh","query","autoplay","bar","play","uniqueId","type","drag","isNavigation","assign","sheet","create","head","cssRules","cssRule","isCSSStyleRule","cssRule2","selectorText","insertRule","isHTMLElement","CSSStyleRule","rule","ruleBy","ROLE","ARIA_CONTROLS","ARIA_CURRENT","ARIA_LABEL","ARIA_HIDDEN","TAB_INDEX","DISABLED","ALL_ATTRIBUTES","SLIDE","LOOP","FADE","slideIndex","destroyEvents","Components","updateOnMove","Direction","isClone","container","destroyed","onMove","isHTMLButtonElement","idx","label","format","i18n","slideX","controls","splides","splide","dest","currIndex","isActive","isVisible","active","hasClass","visible","ariaHidden","slideFocus","useContainer","Style","trackRect","rect","Elements","slideRect","from","distance","diff","isWithin","Slides2","Slide","excludeClones","Slide2","Controller","toIndex","hasFocus","perPage","between","parseHtml","before","append","matcher","isFunction","images","queryAll","img","register","get","getIn","getAt","remove","getLength","isEnough","Slides","clones","cloneCount","computeCloneCount","isHead","cloneDeep","cloneNode","clones2","fixedSize","fixedCount","baseCount","flickMaxPages","vertical","window","init","resize","unit","cssPadding","gap","cssSlideWidth","cssTrackHeight","heightRatio","setSlidesHeight","cssSlideHeight","padding","height","cssHeight","paddingTop","paddingBottom","cssSlideSize","fixedHeight","autoHeight","withoutGap","getGap","totalSize","parseFloat","listSize","slideSize","sliderSize","getPadding","SNAP_THRESHOLD","Layout","waiting","shouldSnap","reposition","exceededLimit","getLimit","canSnap","isBusy","position","getPosition","looping","waitForTransition","Transition","jump","trimSpace","go","toPosition","loop","exceededMin","exceededMax","minDistance","Infinity","trimming","offset","trim","clamp","focus","getEnd","isUndefined","move","translate","Move","isLoop","prevIndex","slideCount","perMove","reindex","control","allowSameIndex","match","indicator","computeDestIndex","getNext","getPrev","destination","getAdjacent","approximatelyEqual","incremental","toPage","setIndex","getIndex","XML_NAME_SPACE","PATH","SIZE","wrapper","created","createArrow","prev2","arrowPath","nextIndex","prevLabel","last","nextLabel","first","disabled","hovered","focused","forPause","button","pauseOnHover","pauseOnFocus","resetProgress","manual","cover","src","BOUNCE_DIFF_THRESHOLD","BOUNCE_DURATION","FRICTION_FACTOR","BASE_VELOCITY","MIN_DURATION","clear","suppressConstraint","friction","computeDuration","onScrolled","easing","backwards","t","easingFunc","pow","scroll","FRICTION","LOG_INTERVAL","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","Scroll","isSlide","isFade","basePosition","baseEvent","prevBaseEvent","lastEvent","isFree","isDragging","isMouse","hasExceeded","clickPrevented","onPointerDown","onClick","capture","onPointerMove","onPointerUp","cancelable","expired","timeOf","exceeded","constrain","coordOf","threshold","dragMinThreshold","isSliderDirection","velocity","computeVelocity","computeDestination","sign","computeIndex","diffX","diffY","base","diffCoord","diffTime","isFlick","flickPower","orthogonal","touches","timeStamp","disable","IE_ARROW_KEYS","keyboard","onKeydown","normalize","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","isSequential","lazyLoad","_Slide","_img","srcset","_spinner","parentElement","preloadPages","load","error","li","class","text","pageX","curr","TRIGGER_KEYS","processed","concat","instances","index2","instance","wheel","onWheel","deltaY","I18N","DEFAULTS","speed","done","endCallback","getSpeed","rewindSpeed","transition","EventBus","State","_Splide","defaults","_options","Extensions","_Components","_Transition","Fade","_Extensions","Constructors","ComponentConstructors","Component","component","sync","args","Splide"],"mappings":"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"}