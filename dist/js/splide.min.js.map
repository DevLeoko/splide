{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/states.ts","../../src/js/constants/priority.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/js/utils/dom/setAttribute/setAttribute.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/style/style.ts","../../src/js/utils/dom/display/display.ts","../../src/js/utils/dom/getAttribute/getAttribute.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/parseHtml/parseHtml.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/constants/project.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/noop/noop.ts","../../src/js/utils/function/raf/raf.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/sign/sign.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBus/EventBus.ts","../../src/js/constants/events.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constructors/RequestInterval/RequestInterval.ts","../../src/js/constructors/State/State.ts","../../src/js/constructors/Throttle/Throttle.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/classes.ts","../../src/js/constants/attributes.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/Drag/constants.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Options/Options.ts","../../src/js/utils/arrayLike/find/find.ts","../../src/js/constants/directions.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/utils/dom/measure/measure.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/utils/math/approximatelyEqual/approximatelyEqual.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/utils/dom/focus/focus.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 5;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 6;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","/**\r\n * The default priority for internal handlers.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULT_EVENT_PRIORITY = 10;\r\n\r\n/**\r\n * The default priority for users' handlers.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULT_USER_EVENT_PRIORITY = 20;\r\n","/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\r\nexport function empty( array: any[] ): void {\r\n  array.length = 0;\r\n}\r\n","/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeof subject === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport function isArray<T>( subject: unknown ): subject is T[] {\r\n  return Array.isArray( subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport function isFunction( subject: unknown ): subject is ( ...args: any[] ) => any {\r\n  return typeof subject === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport function isString( subject: unknown ): subject is string {\r\n  return typeof subject === 'string';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport function isUndefined( subject: unknown ): subject is undefined {\r\n  return typeof subject === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\r\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\r\n  return subject instanceof HTMLButtonElement;\r\n}\r\n","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","/**\r\n * Checks if the array includes the value or not.\r\n * `Array#includes` is not supported by IE.\r\n *\r\n * @param array - An array.\r\n * @param value - A value to search for.\r\n *\r\n * @return `true` if the array includes the value, or otherwise `false`.\r\n */\r\nexport function includes<T>( array: T[], value: T ): boolean {\r\n  return array.indexOf( value ) > -1;\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","export { empty }    from './empty/empty';\r\nexport { forEach }  from './forEach/forEach';\r\nexport { includes } from './includes/includes';\r\nexport { push }     from './push/push';\r\nexport { toArray }  from './toArray/toArray';\r\n\r\nexport const arrayProto = Array.prototype;\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Toggles the provided class or classes by following the `add` boolean.\r\n *\r\n * @param elm     - An element whose classes are toggled.\r\n * @param classes - A class or class names.\r\n * @param add     - Whether to add or remove a class.\r\n */\r\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\r\n  if ( elm ) {\r\n    forEach( classes, name => {\r\n      if ( name ) {\r\n        elm.classList[ add ? 'add' : 'remove' ]( name );\r\n      }\r\n    } );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, isString( classes ) ? classes.split( ' ' ) : classes, true );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  forEach( children, parent.appendChild.bind( parent ) );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node ): void {\r\n  forEach( nodes, node => {\r\n    const parent = ref.parentNode;\r\n\r\n    if ( parent ) {\r\n      parent.insertBefore( node, ref );\r\n    }\r\n  } );\r\n}\r\n","import { isHTMLElement } from '../../type/type';\n\n\n/**\n * Checks if the element can be selected by the provided selector or not.\n *\n * @param elm      - An element to check.\n * @param selector - A selector to test.\n *\n * @return `true` if the selector matches the element, or otherwise `false`.\n */\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\n}\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\r\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\n  right?: boolean\n): T {\n  if ( object ) {\n    let keys = Object.keys( object );\n    keys = right ? keys.reverse() : keys;\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      const key = keys[ i ];\n\n      if ( key !== '__proto__' ) {\n        if ( iteratee( object[ key ], key ) === false ) {\n          break;\n        }\n      }\n    }\n  }\n\n  return object;\n}\n","import { slice } from '../../arrayLike';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assign U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\r\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\r\n\r\nexport function assign<T extends object, U1 extends object, U2 extends object>(\r\n  object: T, source1: U1, source2: U2\r\n): Assign<Assign<T, U1>, U2>;\r\n\r\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\r\n  object: T, source1: U1, source2: U2, source3: U3\r\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object - An object to assign properties to.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { isArray, isObject } from '../../type/type';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Merges U to T.\r\n *\r\n * @typeParam T - An object to merge U into.\r\n * @typeParam U - An object to merge properties from.\r\n *\r\n * @return A merged object type.\r\n */\r\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\r\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\r\n    ? U[ K ] extends any[]\r\n      ? T[ K ] extends any[]\r\n        ? Array<T[ K ][ number ] | U[ K ][ number ]>\r\n        : U[ K ]\r\n      : T[ K ] extends object\r\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Cast<A, object> : never\r\n        : U[ K ]\r\n    : U[ K ];\r\n} & Omit<U, keyof T>;\r\n\r\ntype Cast<T, U> = T extends U ? T : U;\r\n\r\n/**\r\n * Recursively merges source properties to the object.\r\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\r\n *\r\n * @param object - An object to merge properties to.\r\n * @param source - A source object to merge properties from.\r\n *\r\n * @return A new object with merged properties.\r\n */\r\nexport function merge<T extends object, U extends object>( object: T, source: U ): Merge<T, U> {\r\n  forOwn( source, ( value, key ) => {\r\n    if ( isArray( value ) ) {\r\n      object[ key ] = value.slice();\r\n    } else if ( isObject( value ) ) {\r\n      object[ key ] = merge( isObject( object[ key ] ) ? object[ key ] : {}, value );\r\n    } else {\r\n      object[ key ] = value;\r\n    }\r\n  } );\r\n\r\n  return object as Merge<T, U>;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes attributes from the element.\r\n *\r\n * @param elm   - An element.\r\n * @param attrs - An attribute or attributes to remove.\r\n */\r\nexport function removeAttribute( elm: Element, attrs: string | string[] ): void {\r\n  if ( elm ) {\r\n    forEach( attrs, attr => {\r\n      elm.removeAttribute( attr );\r\n    } );\r\n  }\r\n}\r\n","import { forOwn } from '../../object';\r\nimport { isNull, isObject } from '../../type/type';\r\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\r\n\r\n\r\nexport function setAttribute( elm: Element, attr: string, value: string | number | boolean ): void;\r\nexport function setAttribute( elm: Element, attrs: Record<string, string | number | boolean> ): void;\r\n\r\nexport function setAttribute(\r\n  elm: Element,\r\n  attrs: string | Record<string, string | number | boolean>,\r\n  value?: string | number | boolean\r\n): void {\r\n  if ( isObject( attrs ) ) {\r\n    forOwn( attrs, ( value, name ) => {\r\n      setAttribute( elm, name, value );\r\n    } );\r\n  } else {\r\n    isNull( value ) ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { addClass } from '../addClass/addClass';\r\nimport { append } from '../append/append';\r\nimport { setAttribute } from '../setAttribute/setAttribute';\r\n\r\n\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ];\r\n\r\nexport function create(\r\n  tag: string,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElement;\r\n\r\n/**\r\n * Creates a HTML element.\r\n *\r\n * @param tag    - A tag name.\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ] {\r\n  const elm = document.createElement( tag );\r\n\r\n  if ( attrs ) {\r\n    isString( attrs ) ? addClass( elm, attrs ) : setAttribute( elm, attrs );\r\n  }\r\n\r\n  parent && append( parent, elm );\r\n\r\n  return elm;\r\n}\r\n","import { isNull, isUndefined } from '../../type/type';\n\n\nexport function style<K extends keyof CSSStyleDeclaration>(\n  elm: HTMLElement,\n  prop: K,\n): CSSStyleDeclaration[ K ];\n\nexport function style(\n  elm: HTMLElement,\n  prop: string,\n): string;\n\nexport function style(\n  elm: HTMLElement,\n  prop: string,\n  value: string | number\n): void;\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm   - An element to apply styles to.\n * @param prop  - An object literal with styles or a property name.\n * @param value - A value to set.\n */\nexport function style(\n  elm: HTMLElement,\n  prop: string,\n  value?: string | number\n): string | void {\n  if ( isUndefined( value ) ) {\n    return getComputedStyle( elm )[ prop ];\n  }\n\n  if ( ! isNull( value ) ) {\n    const { style } = elm;\n    value = `${ value }`;\n\n    if ( style[ prop ] !== value ) {\n      style[ prop ] = value;\n    }\n  }\n}\n","import { style } from '../style/style';\n\n\n/**\n * Sets the `display` CSS value to the element.\n *\n * @param elm     - An element to set a new value to.\n * @param display - A new `display` value.\n */\nexport function display( elm: HTMLElement, display: string ): void {\n  style( elm, 'display', display );\n}\n","/**\r\n * Returns the specified attribute value.\r\n *\r\n * @param elm  - An element.\r\n * @param attr - An attribute to get.\r\n */\r\nexport function getAttribute( elm: Element, attr: string ): string {\r\n  return elm.getAttribute( attr );\r\n}\r\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\r\n * Returns a DOMRect object of the provided element.\r\n *\r\n * @param target - An element.\r\n */\r\nexport function rect( target: Element ): DOMRect {\r\n  return target.getBoundingClientRect();\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { child } from '../child/child';\r\n\r\n\r\n/**\r\n * Parses the provided HTML string and returns the first element.\r\n *\r\n * @param html - An HTML string to parse.\r\n *\r\n * @return An Element on success, or otherwise `undefined`.\r\n */\r\nexport function parseHtml<E extends HTMLElement>( html: string ): E | undefined {\r\n  return child<E>( new DOMParser().parseFromString( html, 'text/html' ).body );\r\n}\r\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  e.preventDefault();\r\n\r\n  if ( stopPropagation ) {\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector: string ): E | null {\r\n  return parent && parent.querySelector( selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\r\n  return slice<E>( parent.querySelectorAll( selector ) );\r\n}\r\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","import { AnyFunction } from '../../../types';\r\n\r\n\r\n/**\r\n * Invokes the callback on the next tick.\r\n *\r\n * @param callback - A callback function.\r\n */\r\nexport function nextTick( callback: AnyFunction ): void {\r\n  setTimeout( callback );\r\n}\r\n","/**\r\n * No operation.\r\n */\r\nexport const noop = (): void => {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\r\n","/**\r\n * The arias of `window.requestAnimationFrame()`.\r\n */\r\nexport function raf( func: FrameRequestCallback ): number {\r\n  return requestAnimationFrame( func );\r\n}\r\n","export const { min, max, floor, ceil, abs } = Math;\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const minimum = min( minOrMax, maxOrMin );\r\n  const maximum = max( minOrMax, maxOrMin );\r\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\r\n}\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","/**\r\n * Returns the sign of the provided number.\r\n *\r\n * @param x - A number.\r\n *\r\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\r\n */\r\nexport function sign( x: number ): number {\r\n  return +( x > 0 ) - +( x < 0 );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Formats a string.\r\n *\r\n * @param string       - A string to format.\r\n * @param replacements - A replacement or replacements.\r\n *\r\n * @return A formatted string.\r\n */\r\nexport function format( string: string, replacements: string | number | Array<string | number> ): string {\r\n  forEach( replacements, replacement => {\r\n    string = string.replace( '%s', `${ replacement }` );\r\n  } );\r\n\r\n  return string;\r\n}\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","import { pad } from '../pad/pad';\r\n\r\n\r\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst ids: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\r\nexport function uniqueId( prefix: string ): string {\r\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\r\n}\r\n","import { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { AnyFunction } from '../../types';\nimport { forOwn, push, slice, toArray } from '../../utils';\n\n\n/**\n * The interface for the EventBus instance.\n *\n * @since 3.0.0\n */\nexport interface EventBusObject {\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority?: number ): void;\n  off( events: string | string[], key?: object ): void;\n  offBy( key: object ): void;\n  emit( event: string, ...args: any[] ): void;\n  destroy(): void;\n}\n\n/**\n * The interface for each event handler object.\n *\n * @since 3.0.0\n */\nexport interface EventHandler {\n  _event: string;\n  _callback: AnyFunction;\n  _namespace: string;\n  _priority: number;\n  _key?: object;\n}\n\n/**\n * The type for a callback function of the EventBus.\n *\n * @since 3.0.0\n */\nexport type EventBusCallback = AnyFunction;\n\n/**\n * The constructor to provided a simple event system.\n *\n * @since 3.0.0\n *\n * @return An EventBus object.\n */\nexport function EventBus(): EventBusObject {\n  /**\n   * The collection of registered handlers.\n   */\n  let handlers: Record<string, EventHandler[]> = {};\n\n  /**\n   * Registers an event handler.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param key      - Optional. An object for an identifier of the handler.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  function on(\n    events: string | string[],\n    callback: EventBusCallback,\n    key?: object,\n    priority = DEFAULT_EVENT_PRIORITY\n  ): void {\n    forEachEvent( events, ( event, namespace ) => {\n      handlers[ event ] = handlers[ event ] || [];\n\n      push( handlers[ event ], {\n        _event    : event,\n        _callback : callback,\n        _namespace: namespace,\n        _priority : priority,\n        _key      : key,\n      } ).sort( ( handler1, handler2 ) => handler1._priority - handler2._priority );\n    } );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   * If only the event name is provided, all handlers that associate with the event are removed.\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param key    - Optional. An object for an identifier of the handler.\n   */\n  function off( events: string | string[], key?: object ): void {\n    forEachEvent( events, ( event, namespace ) => {\n      const eventHandlers = handlers[ event ];\n\n      handlers[ event ] = eventHandlers && eventHandlers.filter( handler => {\n        return handler._key ? handler._key !== key : key || handler._namespace !== namespace;\n      } );\n    } );\n  }\n\n  /**\n   * Removes all handlers locked by the specified key.\n   *\n   * @param key - A key.\n   */\n  function offBy( key: object ): void {\n    forOwn( handlers, ( eventHandlers, event ) => {\n      off( event, key );\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   * This accepts additional arguments and passes them to callbacks.\n   *\n   * @param event - An event name.\n   */\n  function emit( event: string ): void {\n    ( handlers[ event ] || [] ).forEach( handler => {\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\n      handler._callback.apply( handler, slice( arguments, 1 ) );\n    } );\n  }\n\n  /**\n   * Removes all handlers.\n   */\n  function destroy(): void {\n    handlers = {};\n  }\n\n  /**\n   * Parses provided events and iterates over them.\n   *\n   * @param events   - An event or events.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent( events: string | string[], iteratee: ( event: string, namespace: string ) => void ): void {\n    toArray( events ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const fragments = eventNS.split( '.' );\n      iteratee( fragments[ 0 ], fragments[ 1 ] );\n    } );\n  }\n\n  return {\n    on,\n    off,\n    offBy,\n    emit,\n    destroy,\n  };\n}\n","export const EVENT_MOUNTED            = 'mounted';\nexport const EVENT_READY              = 'ready';\nexport const EVENT_MOVE               = 'move';\nexport const EVENT_MOVED              = 'moved';\nexport const EVENT_SHIFTED            = 'shifted';\nexport const EVENT_CLICK              = 'click';\nexport const EVENT_ACTIVE             = 'active';\nexport const EVENT_INACTIVE           = 'inactive';\nexport const EVENT_VISIBLE            = 'visible';\nexport const EVENT_HIDDEN             = 'hidden';\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\nexport const EVENT_REFRESH            = 'refresh';\nexport const EVENT_UPDATED            = 'updated';\nexport const EVENT_RESIZE             = 'resize';\nexport const EVENT_RESIZED            = 'resized';\nexport const EVENT_REPOSITIONED       = 'repositioned';\nexport const EVENT_DRAG               = 'drag';\nexport const EVENT_DRAGGING           = 'dragging';\nexport const EVENT_DRAGGED            = 'dragged';\nexport const EVENT_SCROLL             = 'scroll';\nexport const EVENT_SCROLLED           = 'scrolled';\nexport const EVENT_DESTROY            = 'destroy';\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\n\n","import { EVENT_DESTROY } from '../../constants/events';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, EventMap } from '../../types';\nimport { forEach } from '../../utils';\nimport { EventBusCallback } from '../EventBus/EventBus';\n\n\n/**\n * The interface for the EventInterface object.\n *\n * @since 3.0.0\n */\nexport interface EventInterfaceObject {\n  on<K extends keyof EventMap>( event: K, callback: EventMap[ K ], priority?: number ): void;\n  on( events: string | string[], callback: EventBusCallback, priority?: number ): void;\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): void\n  emit( event: string, ...args: any[] ): void;\n  bind(\n    target: Element | Window | Document | Array<Element | Window | Document>,\n    events: string,\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void\n  unbind(\n    target: Element | Window | Document | Array<Element | Window | Document>,\n    events: string,\n    callback?: AnyFunction,\n  ): void;\n  destroy(): void;\n}\n\n/**\n * The type for event targets.\n *\n * @since 3.0.0\n */\ntype EventTarget = Element | Window | Document;\n\n/**\n * The function that provides interface for internal and native events.\n *\n * @since 3.0.0\n *\n * @param Splide - A Splide instance.\n *\n * @return A collection of interface functions.\n */\nexport function EventInterface( Splide: Splide ): EventInterfaceObject {\n  /**\n   * Holds the event object.\n   */\n  const { event } = Splide;\n\n  /**\n   * The key for events.\n   */\n  const key = {};\n\n  /**\n   * Stores all handlers that listen to native events.\n   */\n  let listeners: [ EventTarget, string, AnyFunction, AddEventListenerOptions? ][] = [];\n\n  /**\n   * Registers an event handler with an unique key.\n   * It can only be removed by `off()` method below.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  function on( events: string | string[], callback: EventBusCallback, priority?: number ): void {\n    event.on( events, callback, key, priority );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   */\n  function off( events: string | string[] ): void {\n    event.off( events, key );\n  }\n\n  /**\n   * Listens to native events.\n   * Splide#destory() will remove all registered listeners.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event or events to listen to.\n   * @param callback - A callback function.\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\n   */\n  function bind(\n    targets: EventTarget | EventTarget[],\n    events: string,\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void {\n    forEachEvent( targets, events, ( target, event ) => {\n      listeners.push( [ target, event, callback, options ] );\n      target.addEventListener( event, callback, options );\n    } );\n  }\n\n  /**\n   * Removes the event handler.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names to remove.\n   * @param callback - Optional. Specify the callback to remove.\n   */\n  function unbind( targets: EventTarget | EventTarget[], events: string, callback?: AnyFunction ): void {\n    forEachEvent( targets, events, ( target, event ) => {\n      listeners = listeners.filter( listener => {\n        if ( listener[ 0 ] === target && listener[ 1 ] === event && ( ! callback || listener[ 2 ] === callback ) ) {\n          target.removeEventListener( event, listener[ 2 ], listener[ 3 ] );\n          return false;\n        }\n\n        return true;\n      } );\n    } );\n  }\n\n  /**\n   * Iterates over each target and event.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent(\n    targets: EventTarget | EventTarget[],\n    events: string,\n    iteratee: ( target: EventTarget, event: string ) => void\n  ): void {\n    forEach( targets, target => {\n      if ( target ) {\n        events.split( ' ' ).forEach( iteratee.bind( null, target ) );\n      }\n    } );\n  }\n\n  /**\n   * Removes all listeners.\n   */\n  function destroy(): void {\n    listeners = listeners.filter( data => unbind( data[ 0 ], data[ 1 ] ) );\n    event.offBy( key );\n  }\n\n  /**\n   * Invokes destroy when the slider is destroyed.\n   */\n  event.on( EVENT_DESTROY, destroy, key );\n\n  return {\n    on,\n    off,\n    emit: event.emit,\n    bind,\n    unbind,\n    destroy,\n  };\n}\n","import { raf } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface RequestIntervalInterface {\r\n  start( resume?: boolean ): void;\r\n  pause(): void;\r\n  rewind(): void;\r\n  cancel(): void;\r\n  set( interval: number ): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param interval   - The interval duration in milliseconds.\r\n * @param onInterval - The callback fired on every interval.\r\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\r\n * @param limit      - Optional. Limits the number of interval.\r\n */\r\nexport function RequestInterval(\r\n  interval: number,\r\n  onInterval: () => void,\r\n  onUpdate?: ( rate: number ) => void,\r\n  limit?: number\r\n): RequestIntervalInterface {\r\n  const { now } = Date;\r\n\r\n  /**\r\n   * The time when the interval starts.\r\n   */\r\n  let startTime: number;\r\n\r\n  /**\r\n   * The current progress rate.\r\n   */\r\n  let rate = 0;\r\n\r\n  /**\r\n   * The animation frame ID.\r\n   */\r\n  let id: number;\r\n\r\n  /**\r\n   * Indicates whether the interval is currently paused or not.\r\n   */\r\n  let paused = true;\r\n\r\n  /**\r\n   * The loop count. This only works when the `limit` argument is provided.\r\n   */\r\n  let count = 0;\r\n\r\n  /**\r\n   * The update function called on every animation frame.\r\n   */\r\n  function update(): void {\r\n    if ( ! paused ) {\r\n      const elapsed = now() - startTime;\r\n\r\n      if ( elapsed >= interval ) {\r\n        rate      = 1;\r\n        startTime = now();\r\n      } else {\r\n        rate = elapsed / interval;\r\n      }\r\n\r\n      if ( onUpdate ) {\r\n        onUpdate( rate );\r\n      }\r\n\r\n      if ( rate === 1 ) {\r\n        onInterval();\r\n\r\n        if ( limit && ++count >= limit ) {\r\n          return pause();\r\n        }\r\n      }\r\n\r\n      raf( update );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the interval.\r\n   *\r\n   * @param resume - Optional. Whether to resume the paused progress or not.\r\n   */\r\n  function start( resume?: boolean ): void {\r\n    ! resume && cancel();\r\n    startTime = now() - ( resume ? rate * interval : 0 );\r\n    paused    = false;\r\n    raf( update );\r\n  }\r\n\r\n  /**\r\n   * Pauses the interval.\r\n   */\r\n  function pause(): void {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Rewinds the current progress.\r\n   */\r\n  function rewind(): void {\r\n    startTime = now();\r\n    rate      = 0;\r\n\r\n    if ( onUpdate ) {\r\n      onUpdate( rate );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the interval.\r\n   */\r\n  function cancel() {\r\n    cancelAnimationFrame( id );\r\n    rate   = 0;\r\n    id     = 0;\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Sets new interval duration.\r\n   *\r\n   * @param time - The interval duration in milliseconds.\r\n   */\r\n  function set( time: number ): void {\r\n    interval = time;\r\n  }\r\n\r\n  /**\r\n   * Checks if the interval is paused or not.\r\n   *\r\n   * @return `true` if the interval is paused, or otherwise `false`.\r\n   */\r\n  function isPaused(): boolean {\r\n    return paused;\r\n  }\r\n\r\n  return {\r\n    start,\r\n    rewind,\r\n    pause,\r\n    cancel,\r\n    set,\r\n    isPaused,\r\n  };\r\n}\r\n","import { includes, toArray } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the State object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface StateObject {\r\n  set( state: number ): void;\r\n  is( states: number | number[] ): boolean;\r\n}\r\n\r\n/**\r\n * The function providing a super simple state system.\r\n *\r\n * @param initialState - Specifies the initial state.\r\n */\r\nexport function State( initialState: number ): StateObject {\r\n  /**\r\n   * The current state.\r\n   */\r\n  let state = initialState;\r\n\r\n  /**\r\n   * Sets a new state.\r\n   *\r\n   * @param value - A new state value.\r\n   */\r\n  function set( value: number ): void {\r\n    state = value;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state matches the provided one.\r\n   *\r\n   * @param states - A state to check.\r\n   *\r\n   * @return `true` if the current state is the provided one.\r\n   */\r\n  function is( states: number | number[] ): boolean {\r\n    return includes( toArray( states ), state );\r\n  }\r\n\r\n  return { set, is };\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { RequestInterval, RequestIntervalInterface } from '../RequestInterval/RequestInterval';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ThrottleInstance<F extends AnyFunction> extends Function {\r\n  ( ...args: Parameters<F> ): void;\r\n}\r\n\r\n/**\r\n * Returns the throttled function.\r\n *\r\n * @param func     - A function to throttle.\r\n * @param duration - Optional. Throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function Throttle<F extends AnyFunction>(\r\n  func: F,\r\n  duration?: number\r\n): ThrottleInstance<F> {\r\n  let interval: RequestIntervalInterface;\r\n\r\n  function throttled( this: ThisParameterType<F> ): void {\r\n    if ( ! interval ) {\r\n      interval = RequestInterval( duration || 0, () => {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        func.apply( this, arguments );\r\n        interval = null;\r\n      }, null, 1 );\r\n\r\n      interval.start();\r\n    }\r\n  }\r\n\r\n  return throttled;\r\n}\r\n","import { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve( prop: string, axisOnly?: boolean ): string;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  marginRight : [ 'marginBottom', 'marginLeft' ],\r\n  autoWidth   : [ 'autoHeight' ],\r\n  fixedWidth  : [ 'fixedHeight' ],\r\n  paddingLeft : [ 'paddingTop', 'paddingRight' ],\r\n  paddingRight: [ 'paddingBottom', 'paddingLeft' ],\r\n  width       : [ 'height' ],\r\n  left        : [ 'top', 'right' ],\r\n  right       : [ 'bottom', 'left' ],\r\n  x           : [ 'y' ],\r\n  X           : [ 'Y' ],\r\n  Y           : [ 'X' ],\r\n  ArrowLeft   : [ 'ArrowUp', 'ArrowRight' ],\r\n  ArrowRight  : [ 'ArrowDown', 'ArrowLeft' ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop     - A property name to translate.\r\n   * @param axisOnly - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   */\r\n  function resolve( prop: string, axisOnly?: boolean ): string {\r\n    const { direction } = options;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n    return ORIENTATION_MAP[ prop ][ index ] || prop;\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_SLIDER          = `${ PROJECT_CODE }__slider`;\r\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\r\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\r\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\r\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_AUTOPLAY        = `${ PROJECT_CODE }__autoplay`;\r\nexport const CLASS_PLAY            = `${ PROJECT_CODE }__play`;\r\nexport const CLASS_PAUSE           = `${ PROJECT_CODE }__pause`;\r\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\r\nexport const CLASS_INITIALIZED     = 'is-initialized';\r\nexport const CLASS_ACTIVE          = 'is-active';\r\nexport const CLASS_PREV            = 'is-prev';\r\nexport const CLASS_NEXT            = 'is-next';\r\nexport const CLASS_VISIBLE         = 'is-visible';\r\nexport const CLASS_LOADING         = 'is-loading';\r\n\r\n/**\r\n * The array with all status classes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [ CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING ];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","export const ROLE             = 'role';\r\nexport const ARIA_CONTROLS    = 'aria-controls';\r\nexport const ARIA_CURRENT     = 'aria-current';\r\nexport const ARIA_LABEL       = 'aria-label';\r\nexport const ARIA_HIDDEN      = 'aria-hidden';\r\nexport const TAB_INDEX        = 'tabindex';\r\nexport const DISABLED         = 'disabled';\r\nexport const ARIA_ORIENTATION = 'aria-orientation';\r\n\r\n/**\r\n * The array with all attributes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n];\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_REFRESH,\r\n  EVENT_REPOSITIONED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  ceil,\r\n  child,\r\n  floor,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  index: number;\r\n  slideIndex: number;\r\n  slide: HTMLElement;\r\n  container: HTMLElement;\r\n  isClone: boolean;\r\n  update(): void;\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The sub component for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide sub component.\r\n */\r\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\r\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface( Splide );\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove } = options;\r\n  const { resolve } = Components.Direction;\r\n  const styles         = getAttribute( slide, 'style' );\r\n  const isClone        = slideIndex > -1;\r\n  const container      = child( slide, `.${ CLASS_CONTAINER }` );\r\n  const focusableNodes = options.focusableNodes && queryAll( slide, options.focusableNodes );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n    }\r\n\r\n    bind( slide, 'click keydown', e => {\r\n      emit( e.type === 'click' ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, self, e );\r\n    } );\r\n\r\n    on( [ EVENT_REFRESH, EVENT_REPOSITIONED, EVENT_SHIFTED, EVENT_MOVED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    destroyEvents();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const idx      = isClone ? slideIndex : index;\r\n    const label    = format( options.i18n.slideX, idx + 1 );\r\n    const controls = Splide.splides.map( target => target.splide.root.id ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, label );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    setAttribute( slide, ROLE, 'menuitem' );\r\n\r\n    updateActivity( isActive() );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: currIndex } = Splide;\r\n\r\n      updateActivity( isActive() );\r\n      updateVisibility( isVisible() );\r\n\r\n      toggleClass( slide, CLASS_PREV, index === currIndex - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === currIndex + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   *\r\n   * @param active - Set `true` if the slide is active.\r\n   */\r\n  function updateActivity( active: boolean ): void {\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n\r\n      if ( isNavigation ) {\r\n        setAttribute( slide, ARIA_CURRENT, active || null );\r\n      }\r\n\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   *\r\n   * @param visible - Set `true` if the slide is visible.\r\n   */\r\n  function updateVisibility( visible: boolean ): void {\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    setAttribute( slide, ARIA_HIDDEN, hidden || null );\r\n    setAttribute( slide, TAB_INDEX, ! hidden && options.slideFocus ? 0 : null );\r\n\r\n    if ( focusableNodes ) {\r\n      focusableNodes.forEach( node => {\r\n        setAttribute( node, TAB_INDEX, hidden ? -1 : null );\r\n      } );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Components.Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left' );\r\n    const right     = resolve( 'right' );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\n\n\n/**\n * The data attribute for the autoplay interval duration.\n *\n * @since 3.5.0\n */\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\n","/**\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\n *\n * @since 3.4.1\n */\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\n","/**\n * The power of the friction.\n *\n * @since 3.0.0\n */\nexport const FRICTION = 5;\n\n/**\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\n *\n * @since 3.0.0\n */\nexport const LOG_INTERVAL = 200;\n\n/**\n * Start events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\n\n/**\n * Update events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\n\n/**\n * End events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup';\n","import { TAB_INDEX } from '../../constants/attributes';\r\nimport { EVENT_UPDATED, EVENT_MOVE } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { includes, isHTMLElement, nextTick, removeAttribute, setAttribute } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * Arrow keys of IE.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst IE_ARROW_KEYS = [ 'Left', 'Right', 'Up', 'Down' ];\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport function Keyboard( Splide: Splide, Components: Components, options: Options ): KeyboardComponent {\r\n  const { on, bind, unbind } = EventInterface( Splide );\r\n  const { root } = Splide;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Indicates whether the component is currently disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, onUpdated );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard } = options;\r\n\r\n    if ( keyboard ) {\r\n      if ( keyboard === 'focused' ) {\r\n        target = root;\r\n        setAttribute( root, TAB_INDEX, 0 );\r\n      } else {\r\n        target = window;\r\n      }\r\n\r\n      bind( target, KEYBOARD_EVENT, onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    unbind( target, KEYBOARD_EVENT );\r\n\r\n    if ( isHTMLElement( target ) ) {\r\n      removeAttribute( target, TAB_INDEX );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  /**\r\n   * Called when the slider moves.\r\n   * To avoid the slider from moving twice, wait for a tick.\r\n   */\r\n  function onMove(): void {\r\n    const _disabled = disabled;\r\n    disabled = true;\r\n    nextTick( () => { disabled = _disabled } );\r\n  }\r\n\r\n  /**\r\n   * Called when options are update.\r\n   */\r\n  function onUpdated(): void {\r\n    destroy();\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( ! disabled ) {\r\n      const { key } = e;\r\n      const normalizedKey = includes( IE_ARROW_KEYS, key ) ? `Arrow${ key }` : key;\r\n\r\n      if ( normalizedKey === resolve( 'ArrowLeft' ) ) {\r\n        Splide.go( '<' );\r\n      } else if ( normalizedKey === resolve( 'ArrowRight' ) ) {\r\n        Splide.go( '>' );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ALL_ATTRIBUTES, ARIA_ORIENTATION, ROLE } from '../../constants/attributes';\nimport { TTB } from '../../constants/directions';\nimport {\n  EVENT_CLICK,\n  EVENT_MOUNTED,\n  EVENT_MOVE,\n  EVENT_NAVIGATION_MOUNTED,\n  EVENT_SLIDE_KEYDOWN,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { LOOP } from '../../constants/types';\nimport { EventInterface, EventInterfaceObject } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { empty, includes, prevent, removeAttribute, setAttribute } from '../../utils';\nimport { SlideComponent } from '../Slides/Slide';\n\n\n/**\n * The interface for the Sync component.\n *\n * @since 3.0.0\n */\nexport interface SyncComponent extends BaseComponent {\n  remount(): void;\n}\n\n/**\n * The keys for triggering the navigation slide.\n *\n * @since 3.0.0\n */\nconst TRIGGER_KEYS = [ ' ', 'Enter', 'Spacebar' ];\n\n/**\n * The component for syncing multiple sliders.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Sync component object.\n */\nexport function Sync( Splide: Splide, Components: Components, options: Options ): SyncComponent {\n  const { list } = Components.Elements;\n  const events: EventInterfaceObject[] = [];\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    Splide.splides.forEach( target => {\n      ! target.isParent && sync( target.splide );\n    } );\n\n    if ( options.isNavigation ) {\n      navigate();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    removeAttribute( list, ALL_ATTRIBUTES );\n    events.forEach( event => { event.destroy() } );\n    empty( events );\n  }\n\n  /**\n   * Remounts the component.\n   *\n   * @internal\n   */\n  function remount(): void {\n    destroy();\n    mount();\n  }\n\n  /**\n   * Syncs the current index with a provided child splide instance.\n   *\n   * @param splide - A splide instance to sync with.\n   */\n  function sync( splide: Splide ): void {\n    [ Splide, splide ].forEach( instance => {\n      const event  = EventInterface( instance );\n      const target = instance === Splide ? splide : Splide;\n\n      event.on( EVENT_MOVE, ( index, prev, dest ) => {\n        target.go( target.is( LOOP ) ? dest : index );\n      } );\n\n      events.push( event );\n    } );\n  }\n\n  /**\n   * Makes slides clickable and moves the slider to the index of clicked slide.\n   * Note that the direction of `menu` is implicitly `vertical` as default.\n   */\n  function navigate(): void {\n    const event = EventInterface( Splide );\n    const { on } = event;\n\n    on( EVENT_CLICK, onClick );\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\n\n    setAttribute( list, ROLE, 'menu' );\n    events.push( event );\n    event.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\n  }\n\n  /**\n   * Update attributes.\n   */\n  function update(): void {\n    setAttribute( list, ARIA_ORIENTATION, options.direction !== TTB ? 'horizontal' : null );\n  }\n\n  /**\n   * Called when the navigation slide is clicked.\n   *\n   * @param Slide - A clicked Slide component.\n   */\n  function onClick( Slide: SlideComponent ): void {\n    Splide.go( Slide.index );\n  }\n\n  /**\n   * Called when any key is pressed on the navigation slide.\n   *\n   * @param Slide - A Slide component.\n   * @param e     - A KeyboardEvent object.\n   */\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\n      onClick( Slide );\n      prevent( e );\n    }\n  }\n\n  return {\n    mount,\n    destroy,\n    remount,\n  };\n}\n","import { DESTROYED } from '../../constants/states';\r\nimport { Throttle } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { find, merge } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Options component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface OptionsComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for managing options.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Options component object.\r\n */\r\nexport function Options( Splide: Splide, Components: Components, options: Options ): OptionsComponent {\r\n  /**\r\n   * The throttled `observe` function.\r\n   */\r\n  const throttledObserve = Throttle( observe );\r\n\r\n  /**\r\n   * Keeps the initial options to apply when no matched query exists.\r\n   */\r\n  let initialOptions: Options;\r\n\r\n  /**\r\n   * Stores breakpoints with the MediaQueryList object.\r\n   */\r\n  let points: [ string, MediaQueryList ][];\r\n\r\n  /**\r\n   * Holds the current breakpoint.\r\n   */\r\n  let currPoint: string | undefined;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    initialOptions = merge( {}, options );\r\n\r\n    const { breakpoints } = options;\r\n\r\n    if ( breakpoints ) {\r\n      const isMin = options.mediaQuery === 'min';\r\n\r\n      points = Object.keys( breakpoints )\r\n        .sort( ( n, m ) => isMin ? +m - +n : +n - +m )\r\n        .map( point => [\r\n          point,\r\n          matchMedia( `(${ isMin ? 'min' : 'max' }-width:${ point }px)` ),\r\n        ] );\r\n\r\n      observe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( points ) {\r\n      addEventListener( 'resize', throttledObserve );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      removeEventListener( 'resize', throttledObserve );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Observes breakpoints.\r\n   * The `currPoint` may be `undefined`.\r\n   */\r\n  function observe(): void {\r\n    const item = find( points, item => item[ 1 ].matches ) || [];\r\n\r\n    if ( item[ 0 ] !== currPoint ) {\r\n      onMatch( ( currPoint = item[ 0 ] ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the media query matches breakpoints.\r\n   *\r\n   * @param point - A matched point, or `undefined` that means no breakpoint matches a media query.\r\n   */\r\n  function onMatch( point: string | undefined ): void {\r\n    const newOptions = options.breakpoints[ point ] || initialOptions;\r\n\r\n    if ( newOptions.destroy ) {\r\n      Splide.options = initialOptions;\r\n      Splide.destroy( newOptions.destroy === 'completely' );\r\n    } else {\r\n      if ( Splide.state.is( DESTROYED ) ) {\r\n        destroy( true );\r\n        Splide.mount();\r\n      }\r\n\r\n      Splide.options = newOptions;\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { slice } from '../slice/slice';\r\n\r\n\r\n/**\r\n * The find method for an array or array-like object, works in IE.\r\n * This method is not performant for a huge array.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param predicate - The predicate function to test each element in the object.\r\n *\r\n * @return A found value if available, or otherwise `undefined`.\r\n */\r\nexport function find<T>(\r\n  arrayLike: ArrayLike<T>,\r\n  predicate: ( value: T, index: number, array: T[] ) => any\r\n): T | undefined {\r\n  return slice( arrayLike ).filter( predicate )[ 0 ];\r\n}\r\n","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_AUTOPLAY,\r\n  CLASS_CLONE,\r\n  CLASS_LIST,\r\n  CLASS_PAUSE,\r\n  CLASS_PLAY,\r\n  CLASS_PROGRESS,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_SLIDER,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  assert,\r\n  assign,\r\n  child,\r\n  children,\r\n  empty,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  uniqueId,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  slider: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows: HTMLElement;\r\n  prev: HTMLButtonElement;\r\n  next: HTMLButtonElement;\r\n  bar: HTMLElement;\r\n  autoplay: HTMLElement;\r\n  play: HTMLButtonElement;\r\n  pause: HTMLButtonElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport function Elements( Splide: Splide, Components: Components, options: Options ): ElementsComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { root } = Splide;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let classes: string[];\r\n\r\n  /**\r\n   * The slider element that may be `undefined`.\r\n   */\r\n  let slider: HTMLElement;\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    identify();\r\n    addClass( root, ( classes = getClasses() ) );\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, refresh, DEFAULT_EVENT_PRIORITY - 2 );\r\n    on( EVENT_UPDATED, update );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    [ root, track, list ].forEach( elm => {\r\n      removeAttribute( elm, 'style' );\r\n    } );\r\n\r\n    empty( slides );\r\n    removeClass( root, classes );\r\n  }\r\n\r\n  /**\r\n   * Recollects slide elements.\r\n   */\r\n  function refresh(): void {\r\n    destroy();\r\n    setup();\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, classes );\r\n    addClass( root, ( classes = getClasses() ) );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    slider = child( root, `.${ CLASS_SLIDER }` );\r\n    track  = query( root, `.${ CLASS_TRACK }` );\r\n    list   = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    const autoplay = find( `.${ CLASS_AUTOPLAY }` );\r\n    const arrows   = find( `.${ CLASS_ARROWS }` );\r\n\r\n    assign( elements, {\r\n      root,\r\n      slider,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows,\r\n      autoplay,\r\n      prev : query( arrows, `.${ CLASS_ARROW_PREV }` ),\r\n      next : query( arrows, `.${ CLASS_ARROW_NEXT }` ),\r\n      bar  : query( find( `.${ CLASS_PROGRESS }` ), `.${ CLASS_PROGRESS_BAR }` ),\r\n      play : query( autoplay, `.${ CLASS_PLAY }` ),\r\n      pause: query( autoplay, `.${ CLASS_PAUSE }` ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Assigns unique IDs to essential elements.\r\n   */\r\n  function identify(): void {\r\n    const id = root.id || uniqueId( PROJECT_CODE );\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in children of the root or slider element.\r\n   *\r\n   * @return {Element} - A found element or undefined.\r\n   */\r\n  function find( selector: string ): HTMLElement {\r\n    return child( root, selector ) || child( slider, selector );\r\n  }\r\n\r\n  /**\r\n   * Return an array with classes for the root element.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses(): string[] {\r\n    return [\r\n      `${ CLASS_ROOT }--${ options.type }`,\r\n      `${ CLASS_ROOT }--${ options.direction }`,\r\n      options.drag && `${ CLASS_ROOT }--draggable`,\r\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\r\n      CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n}\r\n","import { EVENT_MOUNTED, EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass,\n  append,\n  before,\n  between,\n  empty,\n  forEach as forEachItem,\n  includes,\n  isFunction,\n  isHTMLElement,\n  isString,\n  matches,\n  parseHtml,\n  queryAll,\n  remove as removeNode,\n  toArray,\n} from '../../utils';\nimport { Slide, SlideComponent } from './Slide';\n\n\n/**\n * The interface for the Slides component.\n *\n * @since 3.0.0\n */\nexport interface  SlidesComponent extends BaseComponent {\n  update(): void;\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\n  get( excludeClones?: boolean ): SlideComponent[];\n  getIn( page: number ): SlideComponent[];\n  getAt( index: number ): SlideComponent | undefined;\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\n  remove( selector: SlideMatcher ): void;\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\n  filter( matcher: SlideMatcher ): SlideComponent[];\n  style( prop: string, value: string | number, useContainer?: boolean ): void\n  getLength( excludeClones?: boolean ): number;\n  isEnough(): boolean;\n}\n\n/**\n * The iteratee function for Slides.\n *\n * @since 3.0.0\n */\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\n\n/**\n * The predicate function for Slides.\n *\n * @since 3.0.0\n */\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\n\n/**\n * The type for filtering SlideComponent objects.\n *\n * @since 3.0.0\n */\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\n\n/**\n * The component for managing all slides include clones.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Slides component object.\n */\nexport function Slides( Splide: Splide, Components: Components, options: Options ): SlidesComponent {\n  const { on, emit, bind } = EventInterface( Splide );\n  const { slides, list } = Components.Elements;\n\n  /**\n   * Stores all SlideComponent objects.\n   */\n  const Slides: SlideComponent[] = [];\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_REFRESH, refresh );\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\n      Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\n    } );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    forEach( Slide => { Slide.destroy() } );\n    empty( Slides );\n  }\n\n  /**\n   * Discards all Slide components and regenerates them.\n   */\n  function refresh(): void {\n    destroy();\n    init();\n  }\n\n  /**\n   * Manually updates the status of all slides.\n   */\n  function update(): void {\n    forEach( Slide => { Slide.update() } );\n  }\n\n  /**\n   * Registers a slide element and creates a Slide object.\n   *\n   * @param slide      - A slide element to register.\n   * @param index      - A slide index.\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\n   */\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\n    const object = Slide( Splide, index, slideIndex, slide );\n    object.mount();\n    Slides.push( object );\n  }\n\n  /**\n   * Returns all Slide objects.\n   *\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   *\n   * @return An array with Slide objects.\n   */\n  function get( excludeClones?: boolean ): SlideComponent[] {\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\n  }\n\n  /**\n   * Returns slides in the specified page.\n   *\n   * @param page - A page index.\n   *\n   * @return An array with slides that belong to the page.\n   */\n  function getIn( page: number ): SlideComponent[] {\n    const { Controller } = Components;\n    const index = Controller.toIndex( page );\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\n  }\n\n  /**\n   * Returns a Slide object at the specified index.\n   *\n   * @param index - A slide index.\n   *\n   * @return A Slide object if available, or otherwise `undefined`.\n   */\n  function getAt( index: number ): SlideComponent | undefined {\n    return filter( index )[ 0 ];\n  }\n\n  /**\n   * Inserts a slide or slides at a specified index.\n   *\n   * @param items - A slide element, an HTML string or an array with them.\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\n   */\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\n    forEachItem( items, slide => {\n      if ( isString( slide ) ) {\n        slide = parseHtml( slide );\n      }\n\n      if ( isHTMLElement( slide ) ) {\n        const ref = slides[ index ];\n        ref ? before( slide, ref ) : append( list, slide );\n        addClass( slide, options.classes.slide );\n        observeImages( slide, emit.bind( null, EVENT_RESIZE ) );\n      }\n    } );\n\n    emit( EVENT_REFRESH );\n  }\n\n  /**\n   * Removes slides that match the matcher\n   * that can be an index, an array with indices, a selector, or an iteratee function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\n   */\n  function remove( matcher: SlideMatcher ): void {\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\n    emit( EVENT_REFRESH );\n  }\n\n  /**\n   * Iterates over Slide objects by the iteratee function.\n   *\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   */\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\n    get( excludeClones ).forEach( iteratee );\n  }\n\n  /**\n   * Filters Slides by the matcher\n   * that can be an index, an array with indices, a selector, or a predicate function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\n   *\n   * @return An array with SlideComponent objects.\n   */\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\n    return Slides.filter( isFunction( matcher )\n      ? matcher\n      : Slide => isString( matcher )\n        ? matches( Slide.slide, matcher )\n        : includes( toArray( matcher ), Slide.index )\n    );\n  }\n\n  /**\n   * Adds a CSS rule to all slides or containers.\n   *\n   * @param prop         - A property name.\n   * @param value        - A CSS value to add.\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\n   */\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\n  }\n\n  /**\n   * Invokes the callback after all images in the element are loaded.\n   *\n   * @param elm      - An element that may contain images.\n   * @param callback - A callback function.\n   */\n  function observeImages( elm: Element, callback: AnyFunction ): void {\n    const images = queryAll( elm, 'img' );\n    let { length } = images;\n\n    if ( length ) {\n      images.forEach( img => {\n        bind( img, 'load error', () => {\n          if ( ! --length ) {\n            callback();\n          }\n        } );\n      } );\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Returns the length of slides.\n   *\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   *\n   * @return The length of slides.\n   */\n  function getLength( excludeClones?: boolean ): number {\n    return excludeClones ? slides.length : Slides.length;\n  }\n\n  /**\n   * Checks if the number of slides is over than the `perPage` option, including clones.\n   *\n   * @return `true` if there are enough slides, or otherwise `false`.\n   */\n  function isEnough(): boolean {\n    return Slides.length > options.perPage;\n  }\n\n  return {\n    mount,\n    destroy,\n    update,\n    register,\n    get,\n    getIn,\n    getAt,\n    add,\n    remove,\n    forEach,\n    filter,\n    style,\n    getLength,\n    isEnough,\n  };\n}\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface, Throttle } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, assert, isObject, rect, style, unit } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize(): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component that layouts slider components and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport function Layout( Splide: Splide, Components: Components, options: Options ): LayoutComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( emit.bind( this, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    rootRect = null;\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize();\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the slider is resized.\r\n   */\r\n  function resize(): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( ! rootRect || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      Slides.style( resolve( 'marginRight' ), unit( options.gap ) );\r\n      Slides.style( 'width', cssSlideWidth() || null );\r\n      setSlidesHeight();\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the height of slides or their container elements if available.\r\n   */\r\n  function setSlidesHeight(): void {\r\n    Slides.style( 'height', cssSlideHeight() || null, true );\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left' );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string {\r\n    return options.autoWidth ? '' : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? '' : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index?: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index || 0 );\r\n    return Slide\r\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n\r\n    if ( Slide ) {\r\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\r\n      const left  = rect( list )[ resolve( 'left' ) ];\r\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize(): number {\r\n    return totalSize( Splide.length - 1, true ) - totalSize( -1, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the gap value.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const Slide = getAt( 0 );\r\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style( track, resolve( `padding${ right ? 'Right' : 'Left' }` ) ) ) || 0;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { addClass, append, before, ceil, empty, measure, pad, push, rect, remove } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport function Clones( Splide: Splide, Components: Components, options: Options ): ClonesComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Elements, Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, refresh );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n  }\r\n\r\n  /**\r\n   * Removes all clones if available, and generates new clones.\r\n   */\r\n  function init(): void {\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    remove( clones );\r\n    empty( clones );\r\n  }\r\n\r\n  /**\r\n   * Discards all clones and regenerates them.\r\n   * Must do this before the Elements component collects slide elements.\r\n   */\r\n  function refresh(): void {\r\n    destroy();\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\r\n  function observe(): void {\r\n    if ( cloneCount < computeCloneCount() ) {\r\n      emit( EVENT_REFRESH );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( ! clones ) {\r\n      const fixedSize  = measure( Elements.list, options[ resolve( 'fixedWidth' ) ] );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      const baseCount  = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage;\r\n\r\n      clones = baseCount * ( options.drag ? ( options.flickMaxPages || 1 ) + 1 : 2 );\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { create } from '../create/create';\r\nimport { rect } from '../rect/rect';\r\nimport { remove } from '../remove/remove';\r\n\r\n\r\n/**\r\n * Attempts to convert the provided value to pixel as the relative value to the parent element.\r\n *\r\n * @param parent - A parent element.\r\n * @param value  - A value to convert.\r\n *\r\n * @return A converted value in pixel. Unhandled values will become 0.\r\n */\r\nexport function measure( parent: HTMLElement, value: number | string ): number {\r\n  if ( isString( value ) ) {\r\n    const div = create( 'div', { style: `width: ${ value }; position: absolute;` }, parent );\r\n    value = rect( div ).width;\r\n    remove( div );\r\n  }\r\n\r\n  return value;\r\n}\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_REPOSITIONED,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, isUndefined, rect, removeAttribute } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number, trimming?: boolean ): number;\r\n  getPosition(): number;\r\n  getLimit( max: boolean ): number;\r\n  isBusy(): boolean;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport function Move( Splide: Splide, Components: Components, options: Options ): MoveComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( list, 'style' );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - This must be called before the Slide component checks the visibility.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      emit( EVENT_REPOSITIONED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const { set } = Splide.state;\r\n      const position = getPosition();\r\n\r\n      if ( dest !== index ) {\r\n        Transition.cancel();\r\n        translate( shift( position, dest > index ), true );\r\n      }\r\n\r\n      set( MOVING );\r\n      emit( EVENT_MOVE, index, prev, dest );\r\n\r\n      Transition.start( index, () => {\r\n        set( IDLE );\r\n        emit( EVENT_MOVED, index, prev, dest );\r\n\r\n        if ( options.trimSpace === 'move' && dest !== prev && position === getPosition() ) {\r\n          Components.Controller.go( dest > prev ? '>' : '<', false, callback );\r\n        } else {\r\n          callback && callback();\r\n        }\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index.\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index, true ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      list.style.transform = `translate${ resolve( 'X' ) }(${ destination }px)`;\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds.\r\n   *\r\n   * @param position - A position to loop.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const diff        = orient( position - getPosition() );\r\n      const exceededMin = exceededLimit( false, position ) && diff < 0;\r\n      const exceededMax = exceededLimit( true, position ) && diff > 0;\r\n\r\n      if ( exceededMin || exceededMax ) {\r\n        position = shift( position, exceededMax );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the slider width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    translate( getPosition() );\r\n    Transition.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const Slides = Components.Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < Slides.length; i++ ) {\r\n      const slideIndex = Slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex, true ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number, trimming?: boolean ): number {\r\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\r\n    return trimming ? trim( position ) : position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\r\n  function trim( position: number ): number {\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize() - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider can move now or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return Splide.state.is( MOVING ) && options.waitForTransition;\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\r\n    position = isUndefined( position ) ? getPosition() : position;\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getLimit,\r\n    isBusy,\r\n    exceededLimit,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { approximatelyEqual, between, clamp, floor, isString, isUndefined, max } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\r\n  scroll( destination: number, useIndex?: boolean, snap?: boolean, duration?: number, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport function Controller( Splide: Splide, Components: Components, options: Options ): ControllerComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init, DEFAULT_EVENT_PRIORITY - 1 );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the slides length since the current index may be out of the range after refresh.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n    currIndex  = clamp( currIndex, 0, slideCount - 1 );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\r\n   * @param callback       - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\r\n    const dest = parse( control );\r\n\r\n    if ( options.useScroll ) {\r\n      scroll( dest, true, true, options.speed, callback );\r\n    } else {\r\n      const index = loop( dest );\r\n\r\n      if ( index > -1 && ! Move.isBusy() && ( allowSameIndex || index !== currIndex ) ) {\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - A position or an index to scroll to.\r\n   * @param useIndex    - Optional. Whether to use an index as a destination or not.\r\n   * @param snap        - Optional. Whether to snap the closest slide or not.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    useIndex?: boolean,\r\n    snap?: boolean,\r\n    duration?: number,\r\n    callback?: AnyFunction\r\n  ): void {\r\n    const dest = useIndex ? destination : toDest( destination );\r\n\r\n    Components.Scroll.scroll( useIndex || snap ? Move.toPosition( dest, true ) : destination, duration, () => {\r\n      setIndex( Move.toIndex( Move.getPosition() ) );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): number {\r\n    let index = currIndex;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\r\n\r\n      if ( indicator === '+' || indicator === '-' ) {\r\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex, true );\r\n      } else if ( indicator === '>' ) {\r\n        index = number ? toIndex( +number ) : getNext( true );\r\n      } else if ( indicator === '<' ) {\r\n        index = getPrev( true );\r\n      }\r\n    } else {\r\n      index = isLoop ? control : clamp( control, 0, getEnd() );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Returns a next destination index.\r\n   *\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return A next index if available, or otherwise `-1`.\r\n   */\r\n  function getNext( destination?: boolean ): number {\r\n    return getAdjacent( false, destination );\r\n  }\r\n\r\n  /**\r\n   * Returns a previous destination index.\r\n   *\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return A previous index if available, or otherwise `-1`.\r\n   */\r\n  function getPrev( destination?: boolean ): number {\r\n    return getAdjacent( true, destination );\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : getEnd();\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\r\n   *\r\n   * @param dest        - The desired destination.\r\n   * @param from        - A base index.\r\n   * @param incremental - Optional. Whether the control is incremental or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, incremental?: boolean ): number {\r\n    if ( isEnough() ) {\r\n      const end = getEnd();\r\n\r\n      // Will overrun:\r\n      if ( dest < 0 || dest > end ) {\r\n        if ( between( 0, dest, from, true ) || between( end, from, dest, true ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = perMove || hasFocus()\r\n              ? dest\r\n              : dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? end : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( ! incremental && dest !== from ) {\r\n          dest = perMove ? dest : toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - perPage;\r\n\r\n    if ( hasFocus() || ( isLoop && perMove ) ) {\r\n      end = slideCount - 1;\r\n    }\r\n\r\n    return max( end, 0 );\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    if ( isLoop ) {\r\n      return isEnough() ? index % slideCount + ( index < 0 ? slideCount : 0 ) : -1;\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, getEnd() );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   */\r\n  function toPage( index: number ): number {\r\n    if ( ! hasFocus() ) {\r\n      index = between( index, slideCount - perPage, slideCount - 1 ) ? slideCount - 1 : index;\r\n      index = floor( index / perPage );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, getEnd() ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n  };\r\n}\r\n","import { abs } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the provided 2 numbers are approximately equal or not.\r\n *\r\n * @param x       - A number.\r\n * @param y       - Another number to compare.\r\n * @param epsilon - An accuracy that defines the approximation.\r\n *\r\n * @return `true` if 2 numbers are considered to be equal, or otherwise `false`.\r\n */\r\nexport function approximatelyEqual( x: number, y: number, epsilon: number ): boolean {\r\n  return abs( x - y ) < epsilon;\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { append, before, child, create, display, parseHtml, remove, removeAttribute, setAttribute } from '../../utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport function Arrows( Splide: Splide, Components: Components, options: Options ): ArrowsComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = Elements.arrows;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    if ( options.arrows ) {\r\n      if ( ! prev || ! next ) {\r\n        createArrows();\r\n      }\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      if ( ! arrows.prev ) {\r\n        const { id } = Elements.track;\r\n\r\n        setAttribute( prev, ARIA_CONTROLS, id );\r\n        setAttribute( next, ARIA_CONTROLS, id );\r\n\r\n        arrows.prev = prev;\r\n        arrows.next = next;\r\n\r\n        listen();\r\n\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n\r\n      display( wrapper, options.arrows === false ? 'none' : '' );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( created ) {\r\n      remove( wrapper );\r\n    } else {\r\n      removeAttribute( prev, ALL_ATTRIBUTES );\r\n      removeAttribute( next, ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    const { go } = Controller;\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update );\r\n    bind( next, 'click', () => { go( '>', true ) } );\r\n    bind( prev, 'click', () => { go( '<', true ) } );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    before( wrapper, child( options.arrows === 'slider' && Elements.slider || Splide.root ) );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    const index     = Splide.index;\r\n    const prevIndex = Controller.getPrev();\r\n    const nextIndex = Controller.getNext();\r\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n    prev.disabled = prevIndex < 0;\r\n    next.disabled = nextIndex < 0;\r\n\r\n    setAttribute( prev, ARIA_LABEL, prevLabel );\r\n    setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n    emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { EventInterface, RequestInterval } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { getAttribute, setAttribute, style } from '../../utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for auto playing sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport function Autoplay( Splide: Splide, Components: Components, options: Options ): AutoplayComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), update );\r\n  const { isPaused } = interval;\r\n  const { Elements } = Components;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Turns into `true` when autoplay is manually paused.\r\n   */\r\n  let paused: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    const { autoplay } = options;\r\n\r\n    if ( autoplay ) {\r\n      initButton( true );\r\n      initButton( false );\r\n      listen();\r\n\r\n      if ( autoplay !== 'pause' ) {\r\n        play();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes a play/pause button.\r\n   *\r\n   * @param forPause - Determines whether to initialize a pause or play button.\r\n   */\r\n  function initButton( forPause: boolean ): void {\r\n    const prop   = forPause ? 'pause' : 'play';\r\n    const button = Elements[ prop ];\r\n\r\n    if ( button ) {\r\n      setAttribute( button, ARIA_CONTROLS, Elements.track.id );\r\n      setAttribute( button, ARIA_LABEL, options.i18n[ prop ] );\r\n\r\n      bind( button, 'click', forPause ? pause : play );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    const { root } = Elements;\r\n\r\n    if ( options.pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( options.pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, updateInterval );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! options.resetProgress );\r\n      focused = hovered = paused = false;\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param manual - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( manual = true ): void {\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n\r\n    paused = manual;\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! paused ) {\r\n      if ( ! hovered && ! focused ) {\r\n        play();\r\n      } else {\r\n        pause( false );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 to 1.\r\n   */\r\n  function update( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   */\r\n  function updateInterval(): void {\r\n    const Slide = Components.Slides.getAt( Splide.index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n}\r\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { child, display } from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Cover component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CoverComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Cover component object.\r\n */\r\nexport function Cover( Splide: Splide, Components: Components, options: Options ): CoverComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.cover ) {\r\n      on( EVENT_LAZYLOAD_LOADED, ( img, Slide ) => { toggle( true, img, Slide ) } );\r\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply.bind( null, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    apply( false );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\r\n  function apply( cover: boolean ): void {\r\n    Components.Slides.forEach( Slide => {\r\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\r\n\r\n      if ( img && img.src ) {\r\n        toggle( cover, img, Slide );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\r\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\r\n    Slide.style( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\r\n    display( img, cover ? 'none' : '' );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { EventInterface, RequestInterval, RequestIntervalInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { abs, between, max } from '../../utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport function Scroll( Splide: Splide, Components: Components, options: Options ): ScrollComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit } = Move;\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestIntervalInterface;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let scrollCallback: AnyFunction;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination        - The destination to scroll to.\r\n   * @param duration           - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param callback           - Optional. A callback invoked after scroll ends.\r\n   * @param suppressConstraint - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    callback?: AnyFunction,\r\n    suppressConstraint?: boolean\r\n  ): void {\r\n    const start = getPosition();\r\n    let friction = 1;\r\n\r\n    duration       = duration || computeDuration( abs( destination - start ) );\r\n    scrollCallback = callback;\r\n    clear();\r\n\r\n    interval = RequestInterval( duration, onScrolled, rate => {\r\n      const position = getPosition();\r\n      const target   = start + ( destination - start ) * easing( rate );\r\n      const diff     = ( target - getPosition() ) * friction;\r\n\r\n      Move.translate( position + diff );\r\n\r\n      if ( Splide.is( SLIDE ) && ! suppressConstraint && exceededLimit() ) {\r\n        friction *= FRICTION_FACTOR;\r\n\r\n        if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n          bounce( exceededLimit( false ) );\r\n        }\r\n      }\r\n    }, 1 );\r\n\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Triggers the bounce effect when the slider reaches bounds.\r\n   *\r\n   * @param backwards - The direction the slider is going towards.\r\n   */\r\n  function bounce( backwards: boolean ): void {\r\n    scroll( getLimit( ! backwards ), BOUNCE_DURATION, null, true );\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onScrolled(): void {\r\n    const position = getPosition();\r\n    const index = Move.toIndex( position );\r\n\r\n    if ( ! between( index, 0, Splide.length - 1 ) ) {\r\n      Move.translate( Move.shift( position, index > 0 ), true );\r\n    }\r\n\r\n    scrollCallback && scrollCallback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Computes the scroll duration by the distance and the base velocity.\r\n   *\r\n   * @param distance - Distance in pixel.\r\n   *\r\n   * @return The duration for scroll.\r\n   */\r\n  function computeDuration( distance: number ): number {\r\n    return max( distance / BASE_VELOCITY, MIN_DURATION );\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onScrolled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n}\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, isObject, matches, min, noop, prevent, sign } from '../../utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport function Drag( Splide: Splide, Components: Components, options: Options ): DragComponent {\r\n  const { on, emit, bind, unbind } = EventInterface( Splide );\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller } = Components;\r\n  const { track } = Components.Elements;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const { noDrag } = options;\r\n      const isTouch     = isTouchEvent( e );\r\n      const isDraggable = ! noDrag || ! matches( e.target, noDrag );\r\n\r\n      if ( isDraggable && ( isTouch || ! e.button ) ) {\r\n        if ( ! Move.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( MOVING );\r\n          prevBaseEvent = null;\r\n\r\n          bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        if ( expired || hasExceeded ) {\r\n          save( e );\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    unbind( target, POINTER_MOVE_EVENTS, onPointerMove );\r\n    unbind( target, POINTER_UP_EVENTS, onPointerUp );\r\n    dragging = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Moves the slider according to the drag result.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n\r\n    if ( isFree ) {\r\n      Controller.scroll( destination );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      const { length } = Splide;\r\n      const index = Splide.index + orient( sign( velocity ) );\r\n      Controller.go( rewind ? ( index + length ) % length : index );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\r\n    } else {\r\n      Controller.go( Controller.toDest( destination ), true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return e.timeStamp - getBaseEvent( e ).timeStamp;\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n}\r\n","import { ROLE } from '../../constants/attributes';\r\nimport { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  child,\r\n  create,\r\n  display,\r\n  getAttribute,\r\n  queryAll,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The interface for all components.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadImagesData {\r\n  _img: HTMLImageElement;\r\n  _spinner: HTMLSpanElement;\r\n  _Slide: SlideComponent;\r\n  src: string | null;\r\n  srcset: string | null;\r\n}\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport function LazyLoad( Splide: Splide, Components: Components, options: Options ): LazyLoadComponent {\r\n  const { on, off, bind, emit } = EventInterface( Splide );\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let images: LazyLoadImagesData[] = [];\r\n\r\n  /**\r\n   * The current index of images.\r\n   */\r\n  let index = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, refresh );\r\n\r\n      if ( ! isSequential ) {\r\n        on( [ EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED, EVENT_SCROLLED ], observe );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the slider is refreshed.\r\n   */\r\n  function refresh(): void {\r\n    destroy();\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Finds images that contain specific data attributes.\r\n   */\r\n  function init() {\r\n    Components.Slides.forEach( _Slide => {\r\n      queryAll<HTMLImageElement>( _Slide.slide, IMAGE_SELECTOR ).forEach( _img => {\r\n        const src    = getAttribute( _img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( _img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== _img.src || srcset !== _img.srcset ) {\r\n          const className = options.classes.spinner;\r\n          const parent    = _img.parentElement;\r\n          const _spinner  = child( parent, `.${ className }` ) || create( 'span', className, parent );\r\n\r\n          setAttribute( _spinner, ROLE, 'presentation' );\r\n          images.push( { _img, _Slide, src, srcset, _spinner } );\r\n          ! _img.src && display( _img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy() {\r\n    index  = 0;\r\n    images = [];\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function observe(): void {\r\n    images = images.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n\r\n      if ( data._Slide.isWithin( Splide.index, distance ) ) {\r\n        return load( data );\r\n      }\r\n\r\n      return true;\r\n    } );\r\n\r\n    if ( ! images.length ) {\r\n      off( EVENT_MOVED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the data.\r\n   *\r\n   * @param data - A LazyLoadImagesData object.\r\n   */\r\n  function load( data: LazyLoadImagesData ): void {\r\n    const { _img } = data;\r\n\r\n    addClass( data._Slide.slide, CLASS_LOADING );\r\n    bind( _img, 'load error', e => { onLoad( data, e.type === 'error' ) } );\r\n\r\n    [ 'srcset', 'src' ].forEach( name => {\r\n      if ( data[ name ] ) {\r\n        setAttribute( _img, name, data[ name ] );\r\n        removeAttribute( _img, name === 'src' ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data  - A LazyLoadImagesData object.\r\n   * @param error - `true` if this method is called on error.\r\n   */\r\n  function onLoad( data: LazyLoadImagesData, error: boolean ): void {\r\n    const { _Slide } = data;\r\n\r\n    removeClass( _Slide.slide, CLASS_LOADING );\r\n\r\n    if ( ! error ) {\r\n      remove( data._spinner );\r\n      display( data._img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, data._img, _Slide );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    if ( index < images.length ) {\r\n      load( images[ index++ ] );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import { ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  ceil,\r\n  create,\r\n  empty,\r\n  focus,\r\n  format,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  list: HTMLUListElement;\r\n  items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  li: HTMLLIElement;\r\n  button: HTMLButtonElement;\r\n  page: number;\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Arrows component object.\r\n */\r\nexport function Pagination( Splide: Splide, Components: Components, options: Options ): PaginationComponent {\r\n  const { on, emit, bind, unbind } = EventInterface( Splide );\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex } = Controller;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( [ EVENT_MOVE, EVENT_SCROLLED ], update );\r\n  }\r\n\r\n  /**\r\n   * Initializes the pagination.\r\n   */\r\n  function init(): void {\r\n    destroy();\r\n\r\n    if ( options.pagination && Slides.isEnough() ) {\r\n      createPagination();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      remove( list );\r\n      items.forEach( item => { unbind( item.button, 'click' ) } );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage } = options;\r\n    const parent = options.pagination === 'slider' && Elements.slider || Elements.root;\r\n    const max    = hasFocus() ? length : ceil( length / perPage );\r\n\r\n    list = create( 'ul', classes.pagination, parent );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', onClick.bind( null, i ) );\r\n\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks each pagination dot.\r\n   * Moves the focus to the active slide for accessibility.\r\n   *\r\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\r\n   *\r\n   * @param page - A clicked page index.\r\n   */\r\n  function onClick( page: number ): void {\r\n    Controller.go( `>${ page }`, true, () => {\r\n      const Slide = Slides.getAt( Controller.toIndex( page ) );\r\n      Slide && focus( Slide.slide );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      removeClass( prev.button, CLASS_ACTIVE );\r\n      removeAttribute( prev.button, ARIA_CURRENT );\r\n    }\r\n\r\n    if ( curr ) {\r\n      addClass( curr.button, CLASS_ACTIVE );\r\n      setAttribute( curr.button, ARIA_CURRENT, true );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n}\r\n","/**\n * Focuses the provided element without scrolling the ascendant element.\n *\n * @param elm - An element to focus.\n */\nexport function focus( elm: HTMLElement ): void {\n  elm[ 'setActive' ] && elm[ 'setActive' ]() || elm.focus( { preventScroll: true } );\n}\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { prevent } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel( Splide: Splide, Components: Components, options: Options ): WheelComponent {\r\n  const { bind } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const { deltaY } = e;\r\n\r\n      if ( deltaY ) {\r\n        const backwards = deltaY < 0;\r\n        Splide.go( backwards ? '<' : '>' );\r\n        shouldPrevent( backwards ) && prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type             : 'slide',\r\n  speed            : 400,\r\n  waitForTransition: true,\r\n  perPage          : 1,\r\n  cloneStatus      : true,\r\n  arrows           : true,\r\n  pagination       : true,\r\n  interval         : 5000,\r\n  pauseOnHover     : true,\r\n  pauseOnFocus     : true,\r\n  resetProgress    : true,\r\n  keyboard         : true,\r\n  easing           : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag             : true,\r\n  direction        : 'ltr',\r\n  slideFocus       : true,\r\n  trimSpace        : true,\r\n  focusableNodes   : 'a, button, textarea, input, select, iframe',\r\n  classes          : CLASSES,\r\n  i18n             : I18N,\r\n};\r\n","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev  : 'Previous slide',\r\n  next  : 'Next slide',\r\n  first : 'Go to first slide',\r\n  last  : 'Go to last slide',\r\n  slideX: 'Go to slide %s',\r\n  pageX : 'Go to page %s',\r\n  play  : 'Start autoplay',\r\n  pause : 'Pause autoplay',\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { nextTick, noop, rect, unit, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Fade( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * The nextTick disables the initial fade transition of the first slide.\r\n   */\r\n  function mount(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n      nextTick( () => {\r\n        Components.Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * Explicitly sets the track height to avoid it will collapse in Safari.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const { track } = Components.Elements;\r\n    style( track, 'height', unit( rect( track ).height ) );\r\n\r\n    nextTick( () => {\r\n      done();\r\n      style( track, 'height', '' );\r\n    } );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n}\r\n","import { SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Slide( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { bind } = EventInterface( Splide );\r\n  const { Move, Controller } = Components;\r\n  const { list } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      apply( `transform ${ speed }ms ${ options.easing }` );\r\n      Move.translate( destination, true );\r\n      endCallback = done;\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    apply( '' );\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  /**\r\n   * Applies the transition CSS property to the list element.\r\n   *\r\n   * @param transition - A transition CSS value.\r\n   */\r\n  function apply( transition: string ): void {\r\n    style( list, 'transition', transition );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n}\r\n","import * as ComponentConstructors from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { DEFAULT_USER_EVENT_PRIORITY } from '../../constants/priority';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { EventBus, EventBusCallback, EventBusObject, State, StateObject } from '../../constructors';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport { addClass, assert, assign, empty, forOwn, getAttribute, isString, merge, query, slice } from '../../utils';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event: EventBusObject = EventBus();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state: StateObject = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The collection of options.\r\n   */\r\n  private readonly _options: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _Components: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _Extensions: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _Transition: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options?: Options ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    merge( DEFAULTS, Splide.defaults );\r\n    merge( merge( this._options, DEFAULTS ), options || {} );\r\n\r\n    try {\r\n      merge( this._options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, e.message );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._Components = Components;\r\n    this._Transition = Transition || this._Transition || ( this.is( FADE ) ? Fade : Slide );\r\n    this._Extensions = Extensions || this._Extensions;\r\n\r\n    const Constructors = assign( {}, ComponentConstructors, this._Extensions, { Transition: this._Transition } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._options );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var primary   = new Splide();\r\n   * var secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._Components.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the slider with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._Components.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: EventBusCallback ): this;\r\n  on( events: string | string[], callback: EventBusCallback ): this {\r\n    this.event.on( events, callback, null, DEFAULT_USER_EVENT_PRIORITY );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): this {\r\n    this.event.off( events );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string ): this {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    this.event.emit( event, ...slice( arguments, 1 ) );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._Components.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._Components.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._options.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      event.on( EVENT_READY, this.destroy.bind( this, completely ), this );\r\n    } else {\r\n      forOwn( this._Components, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._options;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    const { _options } = this;\r\n    merge( _options, options );\r\n\r\n    if ( ! this.state.is( CREATED ) ) {\r\n      this.emit( EVENT_UPDATED, _options );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._Components.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._Components.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["STATES","CREATED","MOUNTED","IDLE","MOVING","DRAGGING","DESTROYED","DEFAULT_EVENT_PRIORITY","empty","array","length","isObject","subject","isNull","isArray","Array","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","forEach","values","iteratee","includes","indexOf","push","items","arrayProto","prototype","slice","arrayLike","start","end","call","toggleClass","elm","classes","add","name","classList","addClass","split","append","parent","children","appendChild","bind","before","nodes","ref","node","parentNode","insertBefore","matches","selector","filter","child","firstElementChild","forOwn","object","right","keys","Object","reverse","i","key","assign","arguments","source","merge","removeAttribute","attrs","attr","setAttribute","value2","String","create","tag","document","createElement","style","prop","getComputedStyle","style2","display","display2","getAttribute","hasClass","className","contains","rect","target","getBoundingClientRect","remove","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","e","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","unit","PROJECT_CODE","DATA_ATTRIBUTE","assert","condition","message","Error","nextTick","callback","setTimeout","noop","raf","func","requestAnimationFrame","min","Math","max","floor","ceil","abs","between","number","minOrMax","maxOrMin","exclusive","minimum","maximum","clamp","x","y","sign","format","string","replacements","replacement","replace","pad","ids","EventBus","handlers","off","events","forEachEvent","event","namespace","eventHandlers","handler","_key","_namespace","join","eventNS","fragments","on","priority","_event","_callback","_priority","sort","handler1","handler2","offBy","emit","apply","destroy","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_SHIFTED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_SLIDE_KEYDOWN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_REPOSITIONED","EVENT_SCROLLED","EVENT_DESTROY","EVENT_NAVIGATION_MOUNTED","EVENT_LAZYLOAD_LOADED","EventInterface","Splide2","listeners","unbind","targets","event2","listener","removeEventListener","data","options","addEventListener","RequestInterval","interval","onInterval","onUpdate","limit","startTime","id","now","Date","rate","paused","count","update","elapsed","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","Throttle","duration","_this","ORIENTATION_MAP","marginRight","autoWidth","fixedWidth","paddingLeft","paddingRight","width","left","X","Y","ArrowLeft","ArrowRight","CLASS_ROOT","CLASS_SLIDER","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PROGRESS","CLASS_PROGRESS_BAR","CLASS_AUTOPLAY","CLASS_PLAY","CLASS_PAUSE","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","STATUS_CLASSES","ROLE","ARIA_CONTROLS","ARIA_CURRENT","ARIA_LABEL","ARIA_HIDDEN","TAB_INDEX","ARIA_ORIENTATION","ALL_ATTRIBUTES","SLIDE","LOOP","FADE","Slide","index","slideIndex","slide","destroyed","destroyEvents","Components","root","isNavigation","updateOnMove","resolve","Direction","styles","isClone","container","focusableNodes","initNavigation","idx","label","i18n","slideX","controls","splides","map","splide","updateActivity","isActive","onMove","currIndex","visible","hidden","slideFocus","self","updateVisibility","trackRect","Elements","track","slideRect","isVisible","active","curr","cloneStatus","mount","type","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","IE_ARROW_KEYS","KEYBOARD_EVENT","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","Components2","initialOptions","points","currPoint","throttledObserve","observe","completely","item","predicate","item2","point","newOptions","breakpoints","onMatch","setup","isMin","mediaQuery","n","m","matchMedia","axisOnly","direction","orient","slider","list","elements","slides","autoplay","find","arrows","prev","next","bar","play","collect","prefix","uniqueId","getClasses","refresh","drag","Slides2","init","register","Slide2","get","excludeClones","matcher","Slide1","getIn","page","Controller","toIndex","hasFocus","perPage","getAt","forEachItem","images","img","removeNode","getLength","isEnough","vertical","rootRect","Slides","cssPadding","resize","newRect","height","cssHeight","cssTrackHeight","gap","cssSlideSize","fixedHeight","autoHeight","padding","heightRatio","totalSize","withoutGap","getGap","parseFloat","window","this","listSize","slideSize","sliderSize","getPadding","cloneCount","clones","computeCloneCount","isHead","clone","cloneNode","cloneDeep","generate","clones2","div","fixedSize","flickMaxPages","Transition","Layout","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMin","exceededMax","getPosition","exceededLimit","shift","loop","transform","backwards","excess","getLimit","size","trimming","focus","trimSpace","trim","getEnd","waitForTransition","move","dest","go","minDistance","Infinity","slideCount","perMove","Move","isLoop","isSlide","prevIndex","scroll","useIndex","snap","toDest","setIndex","getNext","getAdjacent","getPrev","computeDestIndex","epsilon","incremental","toPage","closest","control","allowSameIndex","indicator","match","parse","useScroll","speed","getIndex","created","wrapper","createArrow","prev2","arrow","arrowPath","nextIndex","prevLabel","last","nextLabel","first","disabled","hovered","focused","initButton","forPause","button","resetProgress","manual","autoToggle","updateInterval","pauseOnHover","pauseOnFocus","listen","cover","src","toggle","scrollCallback","suppressConstraint","friction","clear","onScrolled","t","easingFunc","pow","basePosition","baseEvent","prevBaseEvent","isFree","dragging","clickPrevented","exceeded","disable","onPointerDown","noDrag","isTouch","isTouchEvent","onPointerMove","onPointerUp","save","thresholds","isObj","cancelable","diffCoord","expired","diffTime","hasExceeded","dragMinThreshold","mouse","touch","velocity","computeVelocity","flickPower","computeDestination","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","timeStamp","changedTouches","TouchEvent","isDragging","keyboard","onKeydown","_disabled","onUpdated","normalizedKey","isSequential","lazyLoad","_Slide","_img","_spinner","srcset","spinner","parentElement","loadNext","preloadPages","load","error","onLoad","pagination","li","class","text","pageX","createPagination","preventScroll","isParent","instance","remount","onWheel","deltaY","releaseWheel","wheel","DEFAULTS","easing","Fade","done","endCallback","transition","rewindSpeed","getSpeed","Splide","_options","_Extensions","_Splide","defaults","JSON","Extensions","_Components","_Transition","ComponentConstructors","Component","component","_this2","sync","Sync"],"mappings":"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"}