{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/events.ts","../../src/js/constants/states.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/function/apply/apply.ts","../../src/js/utils/function/noop/noop.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/raf/raf.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/js/utils/dom/setAttribute/setAttribute.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/style/style.ts","../../src/js/utils/dom/display/display.ts","../../src/js/utils/dom/focus/focus.ts","../../src/js/utils/dom/getAttribute/getAttribute.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/parseHtml/parseHtml.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/timeOf/timeOf.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/constants/project.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/sign/sign.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBinder/EventBinder.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constructors/RequestInterval/RequestInterval.ts","../../src/js/constructors/State/State.ts","../../src/js/constructors/Throttle/Throttle.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/classes.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/Drag/constants.ts","../../src/js/utils/dom/normalizeKey/normalizeKey.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Media/Media.ts","../../src/js/utils/arrayLike/find/find.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/utils/math/approximatelyEqual/approximatelyEqual.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/components/Live/Live.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_SHIFTED            = 'shifted';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_MEDIA              = 'media';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_REPOSITIONED       = 'repositioned';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\n\r\n","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 5;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 6;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\r\nexport function empty( array: any[] ): void {\r\n  array.length = 0;\r\n}\r\n","/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return Array.prototype.slice.call( arrayLike, start, end );\r\n}\r\n","import { AnyFunction, ShiftN } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n * @param args - Arguments to bind to the function.\r\n *\r\n * @return A function where arguments are bound.\r\n */\r\nexport function apply<F extends AnyFunction, A extends any[] = any[]>(\r\n  func: F,\r\n  ...args: A\r\n): ( ...args: ShiftN<Parameters<F>, A[\"length\"]> ) => ReturnType<F>;\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n */\r\nexport function apply( func: AnyFunction ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  return func.bind( null, ...slice( arguments, 1 ) );\r\n}\r\n","/**\r\n * No operation.\r\n */\r\nexport const noop = (): void => {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\r\n","import { AnyFunction } from '../../../types';\r\n\r\n\r\n/**\r\n * Invokes the callback on the next tick.\r\n *\r\n * @param callback - A callback function.\r\n */\r\nexport const nextTick: ( callback: AnyFunction ) => ReturnType<typeof setTimeout> = setTimeout;\r\n","/**\r\n * The arias of `window.requestAnimationFrame()`.\r\n */\r\nexport function raf( func: FrameRequestCallback ): number {\r\n  return requestAnimationFrame( func );\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { apply } from '../function';\r\n\r\n\r\n/**\r\n * The alias of the type check function.\r\n *\r\n * @param type    - A type.\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is the specified type.\r\n */\r\nfunction typeOf( type: string, subject: unknown ): boolean {\r\n  return typeof subject === type;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeOf( 'object', subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport const isArray: <T>( subject: unknown ) => subject is T[] = Array.isArray;\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport const isFunction = <( subject: unknown ) => subject is AnyFunction>apply( typeOf, 'function' );\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport const isString = <( subject: unknown ) => subject is string>apply( typeOf, 'string' );\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport const isUndefined = <( subject: unknown ) => subject is undefined>apply( typeOf, 'undefined' );\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\r\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\r\n  return subject instanceof HTMLButtonElement;\r\n}\r\n","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","/**\r\n * Checks if the array includes the value or not.\r\n * `Array#includes` is not supported by IE.\r\n *\r\n * @param array - An array.\r\n * @param value - A value to search for.\r\n *\r\n * @return `true` if the array includes the value, or otherwise `false`.\r\n */\r\nexport function includes<T>( array: T[], value: T ): boolean {\r\n  return array.indexOf( value ) > -1;\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Toggles the provided class or classes by following the `add` boolean.\r\n *\r\n * @param elm     - An element whose classes are toggled.\r\n * @param classes - A class or class names.\r\n * @param add     - Whether to add or remove a class.\r\n */\r\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\r\n  if ( elm ) {\r\n    forEach( classes, name => {\r\n      if ( name ) {\r\n        elm.classList[ add ? 'add' : 'remove' ]( name );\r\n      }\r\n    } );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, isString( classes ) ? classes.split( ' ' ) : classes, true );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  forEach( children, parent.appendChild.bind( parent ) );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node ): void {\r\n  forEach( nodes, node => {\r\n    const parent = ref.parentNode;\r\n\r\n    if ( parent ) {\r\n      parent.insertBefore( node, ref );\r\n    }\r\n  } );\r\n}\r\n","import { isHTMLElement } from '../../type/type';\n\n\n/**\n * Checks if the element can be selected by the provided selector or not.\n *\n * @param elm      - An element to check.\n * @param selector - A selector to test.\n *\n * @return `true` if the selector matches the element, or otherwise `false`.\n */\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\n}\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\r\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\r\n *\r\n * @return A provided object itself.\r\n */\r\nexport function forOwn<T extends object>(\r\n  object: T,\r\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\r\n  right?: boolean\r\n): T {\r\n  if ( object ) {\r\n    let keys = Object.keys( object );\r\n    keys = right ? keys.reverse() : keys;\r\n\r\n    for ( let i = 0; i < keys.length; i++ ) {\r\n      const key = keys[ i ];\r\n\r\n      if ( key !== '__proto__' ) {\r\n        if ( iteratee( object[ key ], key ) === false ) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assigns U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\n/**\r\n * Recursively assigns U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assigned<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Assigned<Assign<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\nexport function assign<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Assigned<T, U, U['length']>>\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object - An object to assign properties to.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { isArray, isObject } from '../../type/type';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Merges U to T.\r\n *\r\n * @typeParam T - An object to merge U into.\r\n * @typeParam U - An object to merge properties from.\r\n *\r\n * @return A merged object type.\r\n */\r\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\r\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\r\n    ? U[ K ] extends any[]\r\n      ? T[ K ] extends any[]\r\n        ? Array<T[ K ][ number ] | U[ K ][ number ]>\r\n        : U[ K ]\r\n      : T[ K ] extends object\r\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Resolve<Cast<A, object>> : never\r\n        : U[ K ]\r\n    : U[ K ];\r\n} & Omit<U, keyof T>;\r\n\r\n/**\r\n * Recursively merges U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Merged<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Merged<Merge<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function merge<T extends object>( object: T ): T;\r\n\r\nexport function merge<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Merged<T, U, U['length']>>\r\n\r\n/**\r\n * Recursively merges source properties to the object.\r\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\r\n *\r\n * @param object - An object to merge properties to.\r\n *\r\n * @return A new object with merged properties.\r\n */\r\nexport function merge<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params\r\n  slice( arguments ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      if ( isArray( value ) ) {\r\n        object[ key ] = value.slice();\r\n      } else if ( isObject( value ) ) {\r\n        object[ key ] = merge( isObject( object[ key ] ) ? object[ key ] : {}, value );\r\n      } else {\r\n        object[ key ] = value;\r\n      }\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes attributes from the element.\r\n *\r\n * @param elms  - An element or elements.\r\n * @param attrs - An attribute or attributes to remove.\r\n */\r\nexport function removeAttribute( elms: Element | Element[], attrs: string | string[] ): void {\r\n  forEach( elms, elm => {\r\n    forEach( attrs, attr => {\r\n      elm && elm.removeAttribute( attr );\r\n    } );\r\n  } );\r\n}\r\n","import { forEach } from '../../array';\r\nimport { forOwn } from '../../object';\r\nimport { isNull, isObject } from '../../type/type';\r\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\r\n\r\n\r\nexport function setAttribute( elms: Element | Element[], attr: string, value: string | number | boolean ): void;\r\nexport function setAttribute( elms: Element | Element[], attrs: Record<string, string | number | boolean> ): void;\r\n\r\n/**\r\n * Sets attribute/attributes to the element or elements.\r\n * If the value is `null` or an empty string, the attribute will be removed.\r\n *\r\n * @param elms  - An element or an array with elements.\r\n * @param attrs - An attribute name of an object with pairs of a name and a value.\r\n * @param value - A value to set.\r\n */\r\nexport function setAttribute(\r\n  elms: Element | Element[],\r\n  attrs: string | Record<string, string | number | boolean>,\r\n  value?: string | number | boolean\r\n): void {\r\n  if ( isObject( attrs ) ) {\r\n    forOwn( attrs, ( value, name ) => {\r\n      setAttribute( elms, name, value );\r\n    } );\r\n  } else {\r\n    forEach( elms, elm => {\r\n      isNull( value ) || value === '' ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\r\n    } );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { addClass } from '../addClass/addClass';\r\nimport { append } from '../append/append';\r\nimport { setAttribute } from '../setAttribute/setAttribute';\r\n\r\n\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ];\r\n\r\nexport function create(\r\n  tag: string,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElement;\r\n\r\n/**\r\n * Creates a HTML element.\r\n *\r\n * @param tag    - A tag name.\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ] {\r\n  const elm = document.createElement( tag );\r\n\r\n  if ( attrs ) {\r\n    isString( attrs ) ? addClass( elm, attrs ) : setAttribute( elm, attrs );\r\n  }\r\n\r\n  parent && append( parent, elm );\r\n\r\n  return elm;\r\n}\r\n","import { isNull, isUndefined } from '../../type/type';\r\n\r\n\r\nexport function style<K extends keyof CSSStyleDeclaration>(\r\n  elm: HTMLElement,\r\n  prop: K,\r\n): CSSStyleDeclaration[ K ];\r\n\r\nexport function style(\r\n  elm: HTMLElement,\r\n  prop: string,\r\n): string;\r\n\r\nexport function style(\r\n  elm: HTMLElement,\r\n  prop: string,\r\n  value: string | number\r\n): void;\r\n\r\n\r\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elm   - An element to apply styles to.\r\n * @param prop  - An object literal with styles or a property name.\r\n * @param value - A value to set.\r\n */\r\nexport function style(\r\n  elm: HTMLElement,\r\n  prop: string,\r\n  value?: string | number\r\n): string | void {\r\n  if ( isUndefined( value ) ) {\r\n    return getComputedStyle( elm )[ prop ];\r\n  }\r\n\r\n  if ( ! isNull( value ) ) {\r\n    const { style } = elm;\r\n    value = `${ value }`;\r\n\r\n    if ( style[ prop ] !== value ) {\r\n      style[ prop ] = value;\r\n    }\r\n  }\r\n}\r\n","import { style } from '../style/style';\n\n\n/**\n * Sets the `display` CSS value to the element.\n *\n * @param elm     - An element to set a new value to.\n * @param display - A new `display` value.\n */\nexport function display( elm: HTMLElement, display: string ): void {\n  style( elm, 'display', display );\n}\n","/**\n * Focuses the provided element without scrolling the ascendant element.\n *\n * @param elm - An element to focus.\n */\nexport function focus( elm: HTMLElement ): void {\n  elm[ 'setActive' ] && elm[ 'setActive' ]() || elm.focus( { preventScroll: true } );\n}\n","/**\r\n * Returns the specified attribute value.\r\n *\r\n * @param elm  - An element.\r\n * @param attr - An attribute to get.\r\n */\r\nexport function getAttribute( elm: Element, attr: string ): string | null {\r\n  return elm.getAttribute( attr );\r\n}\r\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\r\n * Returns a DOMRect object of the provided element.\r\n *\r\n * @param target - An element.\r\n */\r\nexport function rect( target: Element ): DOMRect {\r\n  return target.getBoundingClientRect();\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { child } from '../child/child';\r\n\r\n\r\n/**\r\n * Parses the provided HTML string and returns the first element.\r\n *\r\n * @param html - An HTML string to parse.\r\n *\r\n * @return An Element on success, or otherwise `undefined`.\r\n */\r\nexport function parseHtml<E extends HTMLElement>( html: string ): E | undefined {\r\n  return child<E>( new DOMParser().parseFromString( html, 'text/html' ).body );\r\n}\r\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  e.preventDefault();\r\n\r\n  if ( stopPropagation ) {\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector: string ): E | null {\r\n  return parent && parent.querySelector( selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\r\n  return selector ? slice<E>( parent.querySelectorAll( selector ) ) : [];\r\n}\r\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","/**\r\n * Extracts the timestamp from the event object.\r\n *\r\n * @param e - An Event object.\r\n */\r\nexport function timeOf( e: Event ): number {\r\n  return e.timeStamp;\r\n}","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","export const { min, max, floor, ceil, abs } = Math;\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const minimum = min( minOrMax, maxOrMin );\r\n  const maximum = max( minOrMax, maxOrMin );\r\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\r\n}\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","/**\r\n * Returns the sign of the provided number.\r\n *\r\n * @param x - A number.\r\n *\r\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\r\n */\r\nexport function sign( x: number ): number {\r\n  return +( x > 0 ) - +( x < 0 );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Formats a string.\r\n *\r\n * @param string       - A string to format.\r\n * @param replacements - A replacement or replacements.\r\n *\r\n * @return A formatted string.\r\n */\r\nexport function format( string: string, replacements: string | number | Array<string | number> ): string {\r\n  forEach( replacements, replacement => {\r\n    string = string.replace( '%s', `${ replacement }` );\r\n  } );\r\n\r\n  return string;\r\n}\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","import { pad } from '../pad/pad';\r\n\r\n\r\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst ids: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\r\nexport function uniqueId( prefix: string ): string {\r\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { empty, forEach } from '../../utils';\r\n\r\n\r\n/**\r\n * The type for an EventTarget or an array with EventTarget objects.\r\n *\r\n * @since 3.7.0\r\n */\r\ntype EventTargets = EventTarget | EventTarget[];\r\n\r\n/**\r\n * The interface for the EventBinder object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventBinderObject {\r\n  bind( target: EventTargets, events: string | string[], callback: AnyFunction, options?: AddEventListenerOptions ): void\r\n  unbind( target: EventTarget | EventTarget[], events: string | string[], callback?: AnyFunction ): void;\r\n  dispatch<T>( target: EventTarget, event: string, detail?: T ): void;\r\n  destroy(): void;\r\n}\r\n\r\n/**\r\n * The constructor function to provide methods to subscribe native events.\r\n *\r\n * @since 3.7.0\r\n * @constructor\r\n *\r\n * @return An EventBinder object.\r\n */\r\nexport function EventBinder(): EventBinderObject {\r\n  /**\r\n   * Stores all handlers that listen to native events.\r\n   * `[ target, event, namespace, callback, remover ]`\r\n   */\r\n  let listeners: [ EventTarget, string, string | undefined, AnyFunction, () => void ][] = [];\r\n\r\n  /**\r\n   * Listens to native events.\r\n   * - `destroy()` can unsubscribe all events.\r\n   * - In IE, mediaQueryList does not inherit EventTarget,\r\n   *   and only supports deprecated `addListener` and `removeListener`.\r\n   *\r\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event or events to listen to.\r\n   * @param callback - A callback function.\r\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\r\n   */\r\n  function bind(\r\n    targets: EventTargets,\r\n    events: string | string[],\r\n    callback: AnyFunction,\r\n    options?: AddEventListenerOptions\r\n  ): void {\r\n    forEachEvent( targets, events, ( target, event, namespace ) => {\r\n      const isEventTarget = 'addEventListener' in target;\r\n      const remover = isEventTarget\r\n        ? target.removeEventListener.bind( target, event, callback, options )\r\n        : target[ 'removeListener' ].bind( target, callback );\r\n\r\n      isEventTarget ? target.addEventListener( event, callback, options ) : target[ 'addListener' ]( callback );\r\n      listeners.push( [ target, event, namespace, callback, remover ] );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes the event handler.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names to remove.\r\n   * @param callback - Optional. Specify the callback to remove.\r\n   */\r\n  function unbind( targets: EventTargets, events: string | string[], callback?: AnyFunction ): void {\r\n    forEachEvent( targets, events, ( target, event, namespace ) => {\r\n      listeners = listeners.filter( listener => {\r\n        if ( listener[ 0 ] === target\r\n          && listener[ 1 ] === event\r\n          && listener[ 2 ] === namespace\r\n          && ( ! callback || listener[ 3 ] === callback )\r\n        ) {\r\n          listener[ 4 ]();\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Dispatches a custom event of the target.\r\n   *\r\n   * @param target - An event target.\r\n   * @param type   - An event type.\r\n   * @param detail - Optional. The `detail` object of the event.\r\n   *\r\n   * @return An event object.\r\n   */\r\n  function dispatch<T>( target: EventTarget, type: string, detail?: T ): CustomEvent {\r\n    let e: CustomEvent;\r\n    const bubbles = true;\r\n\r\n    if ( typeof CustomEvent === 'function' ) {\r\n      e = new CustomEvent( type, { bubbles, detail } );\r\n    } else {\r\n      e = document.createEvent( 'CustomEvent' );\r\n      e.initEvent( type, bubbles, false );\r\n    }\r\n\r\n    target.dispatchEvent( e );\r\n    return e;\r\n  }\r\n\r\n  /**\r\n   * Iterates over each target and event.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names.\r\n   * @param iteratee - An iteratee function.\r\n   */\r\n  function forEachEvent(\r\n    targets: EventTargets,\r\n    events: string | string[],\r\n    iteratee: ( target: EventTarget, event: string, namespace: string | undefined ) => void\r\n  ): void {\r\n    forEach( targets, target => {\r\n      target && forEach( events, events => {\r\n        events.split( ' ' ).forEach( eventNS => {\r\n          const fragment = eventNS.split( '.' );\r\n          iteratee( target, fragment[ 0 ], fragment[ 1 ] );\r\n        } );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners.\r\n   */\r\n  function destroy(): void {\r\n    listeners.forEach( data => { data[ 4 ]() } );\r\n    empty( listeners );\r\n  }\r\n\r\n  return {\r\n    bind,\r\n    unbind,\r\n    dispatch,\r\n    destroy,\r\n  };\r\n}\r\n","import { EVENT_DESTROY } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, EventMap } from '../../types';\r\nimport { apply, assign, isArray, slice, toArray } from '../../utils';\r\nimport { EventBinder, EventBinderObject } from '../EventBinder/EventBinder';\r\n\r\n\r\n/**\r\n * The interface for the EventInterface object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventInterfaceObject extends EventBinderObject {\r\n  on<K extends keyof EventMap>( event: K, callback: EventMap[ K ] ): void;\r\n  on( events: string | string[], callback: AnyFunction ): void;\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): void\r\n  emit( event: string, ...args: any[] ): void;\r\n\r\n  /** @internal */\r\n  bus: DocumentFragment;\r\n}\r\n\r\n/**\r\n * The constructor function that provides interface for internal and native events.\r\n *\r\n * @since 3.0.0\r\n * @constructor\r\n *\r\n * @param Splide - A Splide instance.\r\n *\r\n * @return A collection of interface functions.\r\n */\r\nexport function EventInterface( Splide?: Splide ): EventInterfaceObject {\r\n  /**\r\n   * The document fragment for internal events.\r\n   * Provide the Splide instance to share the bus.\r\n   */\r\n  const bus = Splide ? Splide.event.bus : document.createDocumentFragment();\r\n\r\n  /**\r\n   * An event binder object.\r\n   */\r\n  const binder = EventBinder();\r\n\r\n  /**\r\n   * Listens to an internal event or events.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   */\r\n  function on( events: string | string[], callback: AnyFunction ): void {\r\n    binder.bind( bus, toArray( events ).join( ' ' ), e => {\r\n      callback.apply( callback, isArray( e.detail ) ? e.detail : [] );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Triggers callback functions.\r\n   * This accepts additional arguments and passes them to callbacks.\r\n   *\r\n   * @param event - An event name.\r\n   */\r\n  function emit( event: string ): void {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    binder.dispatch( bus, event, slice( arguments, 1 ) );\r\n  }\r\n\r\n  if ( Splide ) {\r\n    Splide.event.on( EVENT_DESTROY, binder.destroy );\r\n  }\r\n\r\n  return assign( binder, {\r\n    bus,\r\n    on,\r\n    off: apply( binder.unbind, bus ),\r\n    emit,\r\n  } );\r\n}","import { raf } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface RequestIntervalInterface {\r\n  start( resume?: boolean ): void;\r\n  pause(): void;\r\n  rewind(): void;\r\n  cancel(): void;\r\n  set( interval: number ): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param interval   - The interval duration in milliseconds.\r\n * @param onInterval - The callback fired on every interval.\r\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\r\n * @param limit      - Optional. Limits the number of interval.\r\n */\r\nexport function RequestInterval(\r\n  interval: number,\r\n  onInterval: () => void,\r\n  onUpdate?: ( rate: number ) => void,\r\n  limit?: number\r\n): RequestIntervalInterface {\r\n  const { now } = Date;\r\n\r\n  /**\r\n   * The time when the interval starts.\r\n   */\r\n  let startTime: number;\r\n\r\n  /**\r\n   * The current progress rate.\r\n   */\r\n  let rate = 0;\r\n\r\n  /**\r\n   * The animation frame ID.\r\n   */\r\n  let id: number;\r\n\r\n  /**\r\n   * Indicates whether the interval is currently paused or not.\r\n   */\r\n  let paused = true;\r\n\r\n  /**\r\n   * The loop count. This only works when the `limit` argument is provided.\r\n   */\r\n  let count = 0;\r\n\r\n  /**\r\n   * The update function called on every animation frame.\r\n   */\r\n  function update(): void {\r\n    if ( ! paused ) {\r\n      const elapsed = now() - startTime;\r\n\r\n      if ( elapsed >= interval ) {\r\n        rate      = 1;\r\n        startTime = now();\r\n      } else {\r\n        rate = elapsed / interval;\r\n      }\r\n\r\n      if ( onUpdate ) {\r\n        onUpdate( rate );\r\n      }\r\n\r\n      if ( rate === 1 ) {\r\n        onInterval();\r\n\r\n        if ( limit && ++count >= limit ) {\r\n          return pause();\r\n        }\r\n      }\r\n\r\n      raf( update );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the interval.\r\n   *\r\n   * @param resume - Optional. Whether to resume the paused progress or not.\r\n   */\r\n  function start( resume?: boolean ): void {\r\n    ! resume && cancel();\r\n    startTime = now() - ( resume ? rate * interval : 0 );\r\n    paused    = false;\r\n    raf( update );\r\n  }\r\n\r\n  /**\r\n   * Pauses the interval.\r\n   */\r\n  function pause(): void {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Rewinds the current progress.\r\n   */\r\n  function rewind(): void {\r\n    startTime = now();\r\n    rate      = 0;\r\n\r\n    if ( onUpdate ) {\r\n      onUpdate( rate );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the interval.\r\n   */\r\n  function cancel() {\r\n    cancelAnimationFrame( id );\r\n    rate   = 0;\r\n    id     = 0;\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Sets new interval duration.\r\n   *\r\n   * @param time - The interval duration in milliseconds.\r\n   */\r\n  function set( time: number ): void {\r\n    interval = time;\r\n  }\r\n\r\n  /**\r\n   * Checks if the interval is paused or not.\r\n   *\r\n   * @return `true` if the interval is paused, or otherwise `false`.\r\n   */\r\n  function isPaused(): boolean {\r\n    return paused;\r\n  }\r\n\r\n  return {\r\n    start,\r\n    rewind,\r\n    pause,\r\n    cancel,\r\n    set,\r\n    isPaused,\r\n  };\r\n}\r\n","import { includes, toArray } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the State object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface StateObject {\r\n  set( state: number ): void;\r\n  is( states: number | number[] ): boolean;\r\n}\r\n\r\n/**\r\n * The function providing a super simple state system.\r\n *\r\n * @param initialState - Specifies the initial state.\r\n */\r\nexport function State( initialState: number ): StateObject {\r\n  /**\r\n   * The current state.\r\n   */\r\n  let state = initialState;\r\n\r\n  /**\r\n   * Sets a new state.\r\n   *\r\n   * @param value - A new state value.\r\n   */\r\n  function set( value: number ): void {\r\n    state = value;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state matches the provided one.\r\n   *\r\n   * @param states - A state to check.\r\n   *\r\n   * @return `true` if the current state is the provided one.\r\n   */\r\n  function is( states: number | number[] ): boolean {\r\n    return includes( toArray( states ), state );\r\n  }\r\n\r\n  return { set, is };\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { slice } from '../../utils';\r\nimport { RequestInterval, RequestIntervalInterface } from '../RequestInterval/RequestInterval';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ThrottleInstance<F extends AnyFunction> extends Function {\r\n  ( ...args: Parameters<F> ): void;\r\n}\r\n\r\n/**\r\n * Returns the throttled function.\r\n *\r\n * @param func     - A function to throttle.\r\n * @param duration - Optional. Throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function Throttle<F extends AnyFunction>(\r\n  func: F,\r\n  duration?: number\r\n): ThrottleInstance<F> {\r\n  let interval: RequestIntervalInterface;\r\n\r\n  function throttled( this: ThisParameterType<F> ): void {\r\n    if ( ! interval ) {\r\n      // eslint-disable-next-line prefer-rest-params\r\n      const args = slice( arguments );\r\n\r\n      interval = RequestInterval( duration || 0, () => {\r\n        func.apply( this, args );\r\n        interval = null;\r\n      }, null, 1 );\r\n\r\n      interval.start();\r\n    }\r\n  }\r\n\r\n  return throttled;\r\n}\r\n","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve( prop: string, axisOnly?: boolean ): string;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  marginRight : [ 'marginBottom', 'marginLeft' ],\r\n  autoWidth   : [ 'autoHeight' ],\r\n  fixedWidth  : [ 'fixedHeight' ],\r\n  paddingLeft : [ 'paddingTop', 'paddingRight' ],\r\n  paddingRight: [ 'paddingBottom', 'paddingLeft' ],\r\n  width       : [ 'height' ],\r\n  left        : [ 'top', 'right' ],\r\n  right       : [ 'bottom', 'left' ],\r\n  x           : [ 'y' ],\r\n  X           : [ 'Y' ],\r\n  Y           : [ 'X' ],\r\n  ArrowLeft   : [ 'ArrowUp', 'ArrowRight' ],\r\n  ArrowRight  : [ 'ArrowDown', 'ArrowLeft' ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop     - A property name to translate.\r\n   * @param axisOnly - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   */\r\n  function resolve( prop: string, axisOnly?: boolean ): string {\r\n    const { direction } = options;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n    return ORIENTATION_MAP[ prop ][ index ] || prop;\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","export const ROLE      = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED  = 'disabled';\r\n\r\nexport const ARIA_PREFIX          = 'aria-';\r\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED        = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_ATOMIC          = `${ ARIA_PREFIX }atomic`;\r\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\r\n\r\n/**\r\n * The array with all attributes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ARIA_ATOMIC,\r\n  ARIA_LIVE,\r\n];\r\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_SLIDER          = `${ PROJECT_CODE }__slider`;\r\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\r\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\r\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\r\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_AUTOPLAY        = `${ PROJECT_CODE }__autoplay`;\r\nexport const CLASS_PLAY            = `${ PROJECT_CODE }__play`;\r\nexport const CLASS_PAUSE           = `${ PROJECT_CODE }__pause`;\r\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\r\nexport const CLASS_INITIALIZED     = 'is-initialized';\r\nexport const CLASS_ACTIVE          = 'is-active';\r\nexport const CLASS_PREV            = 'is-prev';\r\nexport const CLASS_NEXT            = 'is-next';\r\nexport const CLASS_VISIBLE         = 'is-visible';\r\nexport const CLASS_LOADING         = 'is-loading';\r\n\r\n/**\r\n * The array with all status classes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [ CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING ];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_REFRESH,\r\n  EVENT_REPOSITIONED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  ceil,\r\n  child,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  nextTick,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  index: number;\r\n  slideIndex: number;\r\n  slide: HTMLElement;\r\n  container: HTMLElement;\r\n  isClone: boolean;\r\n  update(): void;\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The sub component for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide sub component.\r\n */\r\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\r\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface( Splide );\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination } = options;\r\n  const { resolve } = Components.Direction;\r\n  const styles    = getAttribute( slide, 'style' );\r\n  const isClone   = slideIndex > -1;\r\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n      setAttribute( slide, ROLE, pagination ? 'tabpanel' : 'group' );\r\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, pagination ? '' : i18n.slide );\r\n      setAttribute( slide, ARIA_LABEL, format( i18n.slideLabel, [ index + 1, Splide.length ] ) );\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind( slide, 'click keydown', e => {\r\n      emit( e.type === 'click' ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, self, e );\r\n    } );\r\n\r\n    on( [ EVENT_REFRESH, EVENT_REPOSITIONED, EVENT_SHIFTED, EVENT_MOVED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    destroyEvents();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map( target => {\r\n      const Slide = target.splide.Components.Slides.getAt( index );\r\n      return Slide ? Slide.slide.id : '';\r\n    } ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, format( i18n.slideX, ( isClone ? slideIndex : index ) + 1 ) );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    updateActivity( isActive() );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity( isActive() );\r\n      updateVisibility( isVisible() );\r\n\r\n      toggleClass( slide, CLASS_PREV, index === curr - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === curr + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   *\r\n   * @param active - Set `true` if the slide is active.\r\n   */\r\n  function updateActivity( active: boolean ): void {\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n      setAttribute( slide, ARIA_CURRENT, isNavigation && active || '' );\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   *\r\n   * @param visible - Set `true` if the slide is visible.\r\n   */\r\n  function updateVisibility( visible: boolean ): void {\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    if ( document.activeElement === slide && hidden ) {\r\n      nextTick( forwardFocus );\r\n    }\r\n\r\n    setAttribute( slide, ARIA_HIDDEN, hidden || '' );\r\n    setAttribute( slide, TAB_INDEX, ! hidden && options.slideFocus ? 0 : '' );\r\n    setAttribute( queryAll( slide, options.focusableNodes || '' ), TAB_INDEX, hidden ? -1 : '' );\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Forwards the focus to the active element.\r\n   * Avoid losing focus from the slider when the focused slide gets hidden by slider move.\r\n   */\r\n  function forwardFocus(): void {\r\n    const Slide = Components.Slides.getAt( Splide.index );\r\n\r\n    if ( Slide ) {\r\n      focus( Slide.slide );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Components.Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left' );\r\n    const right     = resolve( 'right' );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\n\n\n/**\n * The data attribute for the autoplay interval duration.\n *\n * @since 3.5.0\n */\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\n","/**\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\n *\n * @since 3.4.1\n */\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\n","/**\n * The power of the friction.\n *\n * @since 3.0.0\n */\nexport const FRICTION = 5;\n\n/**\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\n *\n * @since 3.0.0\n */\nexport const LOG_INTERVAL = 200;\n\n/**\n * Start events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\n\n/**\n * Update events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\n\n/**\n * End events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup';\n","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * The map to associate a non-standard name to the standard one.\r\n *\r\n * @since 3.7.0\r\n */\r\nexport const NORMALIZATION_MAP = {\r\n  Spacebar: ' ',\r\n  Right   : 'ArrowRight',\r\n  Left    : 'ArrowLeft',\r\n  Up      : 'ArrowUp',\r\n  Down    : 'ArrowDown',\r\n};\r\n\r\n/**\r\n * Normalizes the key.\r\n *\r\n * @param key - A string or a KeyboardEvent object.\r\n *\r\n * @return A normalized key.\r\n */\r\nexport function normalizeKey( key: string | KeyboardEvent ): string {\r\n  key = isString( key ) ? key : key.key;\r\n  return NORMALIZATION_MAP[ key ] || key;\r\n}","import { TAB_INDEX } from '../../constants/attributes';\r\nimport { EVENT_MOVE, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { nextTick, setAttribute } from '../../utils';\r\nimport { normalizeKey } from '../../utils/dom/normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport function Keyboard( Splide: Splide, Components: Components, options: Options ): KeyboardComponent {\r\n  const { on, bind, unbind } = EventInterface( Splide );\r\n  const { root } = Splide;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Indicates whether the component is currently disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, destroy );\r\n    on( EVENT_UPDATED, init );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard } = options;\r\n\r\n    if ( keyboard ) {\r\n      if ( keyboard === 'focused' ) {\r\n        target = root;\r\n        setAttribute( root, TAB_INDEX, 0 );\r\n      } else {\r\n        target = window;\r\n      }\r\n\r\n      bind( target, KEYBOARD_EVENT, onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    unbind( target, KEYBOARD_EVENT );\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  /**\r\n   * Called when the slider moves.\r\n   * To avoid the slider from moving twice, wait for a tick.\r\n   */\r\n  function onMove(): void {\r\n    const _disabled = disabled;\r\n    disabled = true;\r\n    nextTick( () => { disabled = _disabled } );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( ! disabled ) {\r\n      const key = normalizeKey( e );\r\n\r\n      if ( key === resolve( 'ArrowLeft' ) ) {\r\n        Splide.go( '<' );\r\n      } else if ( key === resolve( 'ArrowRight' ) ) {\r\n        Splide.go( '>' );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface, EventInterfaceObject } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { empty, includes, prevent, setAttribute } from '../../utils';\r\nimport { normalizeKey } from '../../utils/dom/normalizeKey/normalizeKey';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport function Sync( Splide: Splide, Components: Components, options: Options ): SyncComponent {\r\n  const { list } = Components.Elements;\r\n  const events: EventInterfaceObject[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach( target => {\r\n      ! target.isParent && sync( target.splide );\r\n    } );\r\n\r\n    if ( options.isNavigation ) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach( event => { event.destroy() } );\r\n    empty( events );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   */\r\n  function sync( splide: Splide ): void {\r\n    [ Splide, splide ].forEach( instance => {\r\n      const event  = EventInterface( instance );\r\n      const target = instance === Splide ? splide : Splide;\r\n\r\n      event.on( EVENT_MOVE, ( index, prev, dest ) => {\r\n        target.go( target.is( LOOP ) ? dest : index );\r\n      } );\r\n\r\n      events.push( event );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const event = EventInterface( Splide );\r\n    const { on } = event;\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\r\n\r\n    events.push( event );\r\n    event.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute( list, ARIA_ORIENTATION, options.direction === TTB ? 'vertical' : '' );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, normalizeKey( e ) ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n}\r\n","import { EVENT_MEDIA } from '../../constants/events';\r\nimport { DESTROYED } from '../../constants/states';\r\nimport { EventBinder } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { find, merge, noop } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Options component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MediaComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing media queries and update options if necessary.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport function Media( Splide: Splide, Components: Components, options: Options ): MediaComponent {\r\n  const binder      = EventBinder();\r\n  const breakpoints = options.breakpoints || {};\r\n\r\n  /**\r\n   * Keeps the initial options to apply when no matched query exists.\r\n   */\r\n  const initialOptions = merge( {}, options );\r\n\r\n  /**\r\n   * Stores options and MediaQueryList object.\r\n   */\r\n  const queries: Array<[ Options, MediaQueryList ][]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    register( Object.keys( breakpoints )\r\n      .sort( ( n, m ) => isMin ? +m - +n : +n - +m )\r\n      .map<[ Options, string ]>( key => [ breakpoints[ key ], `(${ isMin ? 'min' : 'max' }-width:${ key }px)` ] ) );\r\n\r\n    register( [ [ {\r\n      speed   : 0,\r\n      autoplay: 'pause',\r\n    }, '(prefers-reduced-motion: reduce)' ] ] );\r\n\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as [ Options, media query string ].\r\n   *\r\n   * @param entries - An array with entries.\r\n   */\r\n  function register( entries: [ Options, string? ][] ): void {\r\n    queries.push( entries.map<[ Options, MediaQueryList ]>( entry => {\r\n      const query = matchMedia( entry[ 1 ] );\r\n      binder.bind( query, 'change', update );\r\n      return [ entry[ 0 ], query ];\r\n    } ) );\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const options = accumulate();\r\n    const { destroy: _destroy } = options;\r\n\r\n    if ( _destroy ) {\r\n      Splide.options = initialOptions;\r\n      Splide.destroy( _destroy === 'completely' );\r\n    } else if ( Splide.state.is( DESTROYED ) ) {\r\n      destroy( true );\r\n      Splide.mount();\r\n    } else {\r\n      Splide.options = options;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Accumulates all options assigned to predefined media queries,\r\n   * and merges them into user options.\r\n   *\r\n   * @return Merged options.\r\n   */\r\n  function accumulate(): Options {\r\n    return queries.reduce<Options>( ( merged, entries ) => {\r\n      const entry = find( entries, entry => entry[ 1 ].matches ) || [];\r\n      entry[ 1 ] && Splide.emit( EVENT_MEDIA, entry[ 1 ] );\r\n      return merge( merged, entry[ 0 ] || {} );\r\n    }, merge( {}, initialOptions ) );\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    mount: noop,\r\n    destroy,\r\n  };\r\n}\r\n","import { slice } from '../slice/slice';\r\n\r\n\r\n/**\r\n * The find method for an array or array-like object, works in IE.\r\n * This method is not performant for a huge array.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param predicate - The predicate function to test each element in the object.\r\n *\r\n * @return A found value if available, or otherwise `undefined`.\r\n */\r\nexport function find<T>(\r\n  arrayLike: ArrayLike<T>,\r\n  predicate: ( value: T, index: number, array: T[] ) => any\r\n): T | undefined {\r\n  return slice( arrayLike ).filter( predicate )[ 0 ];\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_AUTOPLAY,\r\n  CLASS_CLONE,\r\n  CLASS_LIST,\r\n  CLASS_PAUSE,\r\n  CLASS_PLAY,\r\n  CLASS_PROGRESS,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_SLIDER,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  assert,\r\n  assign,\r\n  child,\r\n  children,\r\n  empty,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  uniqueId,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  slider: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows: HTMLElement;\r\n  prev: HTMLButtonElement;\r\n  next: HTMLButtonElement;\r\n  bar: HTMLElement;\r\n  autoplay: HTMLElement;\r\n  play: HTMLButtonElement;\r\n  pause: HTMLButtonElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport function Elements( Splide: Splide, Components: Components, options: Options ): ElementsComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let classes: string[];\r\n\r\n  /**\r\n   * The slider element that may be `undefined`.\r\n   */\r\n  let slider: HTMLElement;\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    addClass( root, ( classes = getClasses() ) );\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, setup );\r\n    on( EVENT_UPDATED, update );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    empty( slides );\r\n    removeClass( root, classes );\r\n    removeAttribute( [ root, track, list ], ALL_ATTRIBUTES.concat( 'style' ) );\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, classes );\r\n    addClass( root, ( classes = getClasses() ) );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    slider = child( root, `.${ CLASS_SLIDER }` );\r\n    track  = query( root, `.${ CLASS_TRACK }` );\r\n    list   = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    const autoplay = find( `.${ CLASS_AUTOPLAY }` );\r\n    const arrows   = find( `.${ CLASS_ARROWS }` );\r\n\r\n    assign( elements, {\r\n      root,\r\n      slider,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows,\r\n      autoplay,\r\n      prev : query( arrows, `.${ CLASS_ARROW_PREV }` ),\r\n      next : query( arrows, `.${ CLASS_ARROW_NEXT }` ),\r\n      bar  : query( find( `.${ CLASS_PROGRESS }` ), `.${ CLASS_PROGRESS_BAR }` ),\r\n      play : query( autoplay, `.${ CLASS_PLAY }` ),\r\n      pause: query( autoplay, `.${ CLASS_PAUSE }` ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   */\r\n  function init(): void {\r\n    const id = root.id || uniqueId( PROJECT_CODE );\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n\r\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\r\n    setAttribute( root, ROLE, root.tagName !== 'SECTION' && options.role || '' );\r\n    setAttribute( list, ROLE, 'none' );\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in children of the root or slider element.\r\n   *\r\n   * @return {Element} - A found element or undefined.\r\n   */\r\n  function find( selector: string ): HTMLElement {\r\n    return child( root, selector ) || child( slider, selector );\r\n  }\r\n\r\n  /**\r\n   * Return an array with classes for the root element.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses(): string[] {\r\n    return [\r\n      `${ CLASS_ROOT }--${ options.type }`,\r\n      `${ CLASS_ROOT }--${ options.direction }`,\r\n      options.drag && `${ CLASS_ROOT }--draggable`,\r\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\r\n      CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n}\r\n","import { EVENT_MOUNTED, EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append, apply,\r\n  before,\r\n  between,\r\n  empty,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  remove as removeNode,\r\n  toArray,\r\n} from '../../utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport function Slides( Splide: Splide, Components: Components, options: Options ): SlidesComponent {\r\n  const { on, emit, bind } = EventInterface( Splide );\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n      Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach( Slide => { Slide.update() } );\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( slide, ref ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n}\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface, Throttle } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, apply, assert, isObject, rect, style, unit } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize(): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component that layouts slider components and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport function Layout( Splide: Splide, Components: Components, options: Options ): LayoutComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( apply( emit, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    rootRect = null;\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize();\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the slider is resized.\r\n   */\r\n  function resize(): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( ! rootRect || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      styleSlides( resolve( 'marginRight' ), unit( options.gap ) );\r\n      styleSlides( 'width', cssSlideWidth() || null );\r\n      styleSlides( 'height', cssSlideHeight() || null, true );\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left' );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string {\r\n    return options.autoWidth ? '' : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? '' : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index?: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index || 0 );\r\n    return Slide\r\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n\r\n    if ( Slide ) {\r\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\r\n      const left  = rect( list )[ resolve( 'left' ) ];\r\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize(): number {\r\n    return totalSize( Splide.length - 1, true ) - totalSize( -1, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the gap value.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const Slide = getAt( 0 );\r\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style( track, resolve( `padding${ right ? 'Right' : 'Left' }` ) ) ) || 0;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { addClass, append, before, ceil, empty, pad, push, rect, remove } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport function Clones( Splide: Splide, Components: Components, options: Options ): ClonesComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Elements, Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n  }\r\n\r\n  /**\r\n   * Removes all clones if available, and generates new clones.\r\n   */\r\n  function init(): void {\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    remove( clones );\r\n    empty( clones );\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\r\n  function observe(): void {\r\n    if ( cloneCount < computeCloneCount() ) {\r\n      emit( EVENT_REFRESH );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( ! clones ) {\r\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ] && Components.Layout.slideSize( 0 );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      clones = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_REPOSITIONED,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, isUndefined, rect } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number, trimming?: boolean ): number;\r\n  getPosition(): number;\r\n  getLimit( max: boolean ): number;\r\n  isBusy(): boolean;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport function Move( Splide: Splide, Components: Components, options: Options ): MoveComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   * - Slide components listening to the internal repositioned event to update their visibility.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      emit( EVENT_REPOSITIONED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const { set } = Splide.state;\r\n      const position = getPosition();\r\n\r\n      if ( dest !== index ) {\r\n        Transition.cancel();\r\n        translate( shift( position, dest > index ), true );\r\n      }\r\n\r\n      set( MOVING );\r\n      emit( EVENT_MOVE, index, prev, dest );\r\n\r\n      Transition.start( index, () => {\r\n        set( IDLE );\r\n        emit( EVENT_MOVED, index, prev, dest );\r\n\r\n        if ( options.trimSpace === 'move' && dest !== prev && position === getPosition() ) {\r\n          Components.Controller.go( dest > prev ? '>' : '<', false, callback );\r\n        } else {\r\n          callback && callback();\r\n        }\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index.\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index, true ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      list.style.transform = `translate${ resolve( 'X' ) }(${ destination }px)`;\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds.\r\n   *\r\n   * @param position - A position to loop.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const diff        = orient( position - getPosition() );\r\n      const exceededMin = exceededLimit( false, position ) && diff < 0;\r\n      const exceededMax = exceededLimit( true, position ) && diff > 0;\r\n\r\n      if ( exceededMin || exceededMax ) {\r\n        position = shift( position, exceededMax );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the slider width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    translate( getPosition() );\r\n    Transition.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const Slides = Components.Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < Slides.length; i++ ) {\r\n      const slideIndex = Slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex, true ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number, trimming?: boolean ): number {\r\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\r\n    return trimming ? trim( position ) : position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\r\n  function trim( position: number ): number {\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize() - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider can move now or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return Splide.state.is( MOVING ) && options.waitForTransition;\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\r\n    position = isUndefined( position ) ? getPosition() : position;\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getLimit,\r\n    isBusy,\r\n    exceededLimit,\r\n    reposition,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { apply, approximatelyEqual, between, clamp, floor, isString, isUndefined, max } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\r\n  scroll( destination: number, useIndex?: boolean, snap?: boolean, duration?: number, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport function Controller( Splide: Splide, Components: Components, options: Options ): ControllerComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n  const getNext = apply( getAdjacent, false );\r\n  const getPrev = apply( getAdjacent, true );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the slides length since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n\r\n    const index = clamp( currIndex, 0, slideCount - 1 );\r\n\r\n    if ( index !== currIndex ) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\r\n   * @param callback       - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\r\n    const dest = parse( control );\r\n\r\n    if ( options.useScroll ) {\r\n      scroll( dest, true, true, options.speed, callback );\r\n    } else {\r\n      const index = loop( dest );\r\n\r\n      if ( index > -1 && ! Move.isBusy() && ( allowSameIndex || index !== currIndex ) ) {\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - A position or an index to scroll to.\r\n   * @param useIndex    - Optional. Whether to use an index as a destination or not.\r\n   * @param snap        - Optional. Whether to snap the closest slide or not.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    useIndex?: boolean,\r\n    snap?: boolean,\r\n    duration?: number,\r\n    callback?: AnyFunction\r\n  ): void {\r\n    const dest = useIndex ? destination : toDest( destination );\r\n\r\n    Components.Scroll.scroll( useIndex || snap ? Move.toPosition( dest, true ) : destination, duration, () => {\r\n      setIndex( Move.toIndex( Move.getPosition() ) );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): number {\r\n    let index = currIndex;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\r\n\r\n      if ( indicator === '+' || indicator === '-' ) {\r\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex, true );\r\n      } else if ( indicator === '>' ) {\r\n        index = number ? toIndex( +number ) : getNext( true );\r\n      } else if ( indicator === '<' ) {\r\n        index = getPrev( true );\r\n      }\r\n    } else {\r\n      index = isLoop ? control : clamp( control, 0, getEnd() );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : getEnd();\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\r\n   *\r\n   * @param dest        - The desired destination.\r\n   * @param from        - A base index.\r\n   * @param incremental - Optional. Whether the control is incremental or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, incremental?: boolean ): number {\r\n    if ( isEnough() ) {\r\n      const end = getEnd();\r\n\r\n      // Will overrun:\r\n      if ( dest < 0 || dest > end ) {\r\n        if ( between( 0, dest, from, true ) || between( end, from, dest, true ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = perMove || hasFocus()\r\n              ? dest\r\n              : dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? end : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( ! incremental && dest !== from ) {\r\n          dest = perMove ? dest : toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - perPage;\r\n\r\n    if ( hasFocus() || ( isLoop && perMove ) ) {\r\n      end = slideCount - 1;\r\n    }\r\n\r\n    return max( end, 0 );\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    if ( isLoop ) {\r\n      return isEnough() ? index % slideCount + ( index < 0 ? slideCount : 0 ) : -1;\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, getEnd() );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   */\r\n  function toPage( index: number ): number {\r\n    if ( ! hasFocus() ) {\r\n      index = between( index, slideCount - perPage, slideCount - 1 ) ? slideCount - 1 : index;\r\n      index = floor( index / perPage );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, getEnd() ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n  };\r\n}\r\n","import { abs } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the provided 2 numbers are approximately equal or not.\r\n *\r\n * @param x       - A number.\r\n * @param y       - Another number to compare.\r\n * @param epsilon - An accuracy that defines the approximation.\r\n *\r\n * @return `true` if 2 numbers are considered to be equal, or otherwise `false`.\r\n */\r\nexport function approximatelyEqual( x: number, y: number, epsilon: number ): boolean {\r\n  return abs( x - y ) < epsilon;\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  append,\r\n  apply,\r\n  before,\r\n  child,\r\n  create,\r\n  display,\r\n  parseHtml,\r\n  remove,\r\n  removeAttribute,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport function Arrows( Splide: Splide, Components: Components, options: Options ): ArrowsComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = Elements.arrows;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    if ( options.arrows ) {\r\n      if ( ! prev || ! next ) {\r\n        createArrows();\r\n      }\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      if ( ! arrows.prev ) {\r\n        setAttribute( [ prev, next ], ARIA_CONTROLS, Elements.list.id );\r\n\r\n        arrows.prev = prev;\r\n        arrows.next = next;\r\n\r\n        listen();\r\n\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n\r\n      display( wrapper, options.arrows === false ? 'none' : '' );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( created ) {\r\n      remove( wrapper );\r\n    } else {\r\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    const { go } = Controller;\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update );\r\n    bind( next, 'click', apply( go, '>', true, undefined ) );\r\n    bind( prev, 'click', apply( go, '<', true, undefined ) );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    before( wrapper, child( options.arrows === 'slider' && Elements.slider || Splide.root ) );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    const index     = Splide.index;\r\n    const prevIndex = Controller.getPrev();\r\n    const nextIndex = Controller.getNext();\r\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n    prev.disabled = prevIndex < 0;\r\n    next.disabled = nextIndex < 0;\r\n\r\n    setAttribute( prev, ARIA_LABEL, prevLabel );\r\n    setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n    emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { EventInterface, RequestInterval } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { getAttribute, setAttribute, style } from '../../utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for auto playing sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport function Autoplay( Splide: Splide, Components: Components, options: Options ): AutoplayComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), update );\r\n  const { isPaused } = interval;\r\n  const { Elements } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Turns into `true` when autoplay is manually paused.\r\n   */\r\n  let paused = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( autoplay ) {\r\n      initButton( true );\r\n      initButton( false );\r\n      listen();\r\n      ! paused && play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes a play/pause button.\r\n   *\r\n   * @param forPause - Determines whether to initialize a pause or play button.\r\n   */\r\n  function initButton( forPause: boolean ): void {\r\n    const prop   = forPause ? 'pause' : 'play';\r\n    const button = Elements[ prop ];\r\n\r\n    if ( button ) {\r\n      setAttribute( button, ARIA_CONTROLS, Elements.track.id );\r\n      setAttribute( button, ARIA_LABEL, options.i18n[ prop ] );\r\n      bind( button, 'click', forPause ? pause : play );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    const { root } = Elements;\r\n\r\n    if ( options.pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( options.pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, updateInterval );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! options.resetProgress );\r\n      focused = hovered = paused = false;\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param manual - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( manual = true ): void {\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n\r\n    paused = manual;\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! paused ) {\r\n      if ( ! hovered && ! focused ) {\r\n        play();\r\n      } else {\r\n        pause( false );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 to 1.\r\n   */\r\n  function update( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   */\r\n  function updateInterval(): void {\r\n    const Slide = Components.Slides.getAt( Splide.index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n}\r\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, child, display } from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Cover component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CoverComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Cover component object.\r\n */\r\nexport function Cover( Splide: Splide, Components: Components, options: Options ): CoverComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.cover ) {\r\n      on( EVENT_LAZYLOAD_LOADED, apply( toggle, true ) );\r\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply( cover, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\r\n  function cover( cover: boolean ): void {\r\n    Components.Slides.forEach( Slide => {\r\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\r\n\r\n      if ( img && img.src ) {\r\n        toggle( cover, img, Slide );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\r\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\r\n    Slide.style( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\r\n    display( img, cover ? 'none' : '' );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( cover, false ),\r\n  };\r\n}\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { EventInterface, RequestInterval, RequestIntervalInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { abs, between, max } from '../../utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport function Scroll( Splide: Splide, Components: Components, options: Options ): ScrollComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit } = Move;\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestIntervalInterface;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let scrollCallback: AnyFunction;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination        - The destination to scroll to.\r\n   * @param duration           - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param callback           - Optional. A callback invoked after scroll ends.\r\n   * @param suppressConstraint - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    callback?: AnyFunction,\r\n    suppressConstraint?: boolean\r\n  ): void {\r\n    const start = getPosition();\r\n    let friction = 1;\r\n\r\n    duration       = duration || computeDuration( abs( destination - start ) );\r\n    scrollCallback = callback;\r\n    clear();\r\n\r\n    interval = RequestInterval( duration, onScrolled, rate => {\r\n      const position = getPosition();\r\n      const target   = start + ( destination - start ) * easing( rate );\r\n      const diff     = ( target - getPosition() ) * friction;\r\n\r\n      Move.translate( position + diff );\r\n\r\n      if ( Splide.is( SLIDE ) && ! suppressConstraint && exceededLimit() ) {\r\n        friction *= FRICTION_FACTOR;\r\n\r\n        if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n          bounce( exceededLimit( false ) );\r\n        }\r\n      }\r\n    }, 1 );\r\n\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Triggers the bounce effect when the slider reaches bounds.\r\n   *\r\n   * @param backwards - The direction the slider is going towards.\r\n   */\r\n  function bounce( backwards: boolean ): void {\r\n    scroll( getLimit( ! backwards ), BOUNCE_DURATION, null, true );\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onScrolled(): void {\r\n    const position = getPosition();\r\n    const index = Move.toIndex( position );\r\n\r\n    if ( ! between( index, 0, Splide.length - 1 ) ) {\r\n      Move.translate( Move.shift( position, index > 0 ), true );\r\n    }\r\n\r\n    scrollCallback && scrollCallback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Computes the scroll duration by the distance and the base velocity.\r\n   *\r\n   * @param distance - Distance in pixel.\r\n   *\r\n   * @return The duration for scroll.\r\n   */\r\n  function computeDuration( distance: number ): number {\r\n    return max( distance / BASE_VELOCITY, MIN_DURATION );\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onScrolled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n}\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, isObject, matches, min, noop, prevent, sign, timeOf } from '../../utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport function Drag( Splide: Splide, Components: Components, options: Options ): DragComponent {\r\n  const { on, emit, bind, unbind } = EventInterface( Splide );\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller } = Components;\r\n  const { track } = Components.Elements;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const { noDrag } = options;\r\n      const isTouch     = isTouchEvent( e );\r\n      const isDraggable = ! noDrag || ! matches( e.target, noDrag );\r\n\r\n      if ( isDraggable && ( isTouch || ! e.button ) ) {\r\n        if ( ! Move.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( MOVING );\r\n          prevBaseEvent = null;\r\n\r\n          bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        if ( expired || hasExceeded ) {\r\n          save( e );\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    unbind( target, POINTER_MOVE_EVENTS, onPointerMove );\r\n    unbind( target, POINTER_UP_EVENTS, onPointerUp );\r\n    dragging = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Moves the slider according to the drag result.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n\r\n    if ( isFree ) {\r\n      Controller.scroll( destination );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      Controller.go( orient( sign( velocity ) ) < 0 ? ( rewind ? '<' : '-' ) : ( rewind ? '>' : '+' ) );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\r\n    } else {\r\n      Controller.go( Controller.toDest( destination ), true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return timeOf( e ) - timeOf( getBaseEvent( e ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n}\r\n","import { ROLE } from '../../constants/attributes';\r\nimport { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  child,\r\n  create,\r\n  display,\r\n  getAttribute,\r\n  queryAll,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The interface for all components.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadImagesData {\r\n  _img: HTMLImageElement;\r\n  _spinner: HTMLSpanElement;\r\n  _Slide: SlideComponent;\r\n  src: string | null;\r\n  srcset: string | null;\r\n}\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport function LazyLoad( Splide: Splide, Components: Components, options: Options ): LazyLoadComponent {\r\n  const { on, off, bind, emit } = EventInterface( Splide );\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let images: LazyLoadImagesData[] = [];\r\n\r\n  /**\r\n   * The current index of images.\r\n   */\r\n  let index = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, destroy );\r\n      on( EVENT_REFRESH, init );\r\n\r\n      if ( ! isSequential ) {\r\n        on( [ EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED, EVENT_SCROLLED ], observe );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images that contain specific data attributes.\r\n   */\r\n  function init() {\r\n    Components.Slides.forEach( _Slide => {\r\n      queryAll<HTMLImageElement>( _Slide.slide, IMAGE_SELECTOR ).forEach( _img => {\r\n        const src    = getAttribute( _img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( _img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== _img.src || srcset !== _img.srcset ) {\r\n          const className = options.classes.spinner;\r\n          const parent    = _img.parentElement;\r\n          const _spinner  = child( parent, `.${ className }` ) || create( 'span', className, parent );\r\n\r\n          setAttribute( _spinner, ROLE, 'presentation' );\r\n          images.push( { _img, _Slide, src, srcset, _spinner } );\r\n          ! _img.src && display( _img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy() {\r\n    index  = 0;\r\n    images = [];\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function observe(): void {\r\n    images = images.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n\r\n      if ( data._Slide.isWithin( Splide.index, distance ) ) {\r\n        return load( data );\r\n      }\r\n\r\n      return true;\r\n    } );\r\n\r\n    if ( ! images.length ) {\r\n      off( EVENT_MOVED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the data.\r\n   *\r\n   * @param data - A LazyLoadImagesData object.\r\n   */\r\n  function load( data: LazyLoadImagesData ): void {\r\n    const { _img } = data;\r\n\r\n    addClass( data._Slide.slide, CLASS_LOADING );\r\n    bind( _img, 'load error', e => { onLoad( data, e.type === 'error' ) } );\r\n\r\n    [ 'srcset', 'src' ].forEach( name => {\r\n      if ( data[ name ] ) {\r\n        setAttribute( _img, name, data[ name ] );\r\n        removeAttribute( _img, name === 'src' ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data  - A LazyLoadImagesData object.\r\n   * @param error - `true` if this method is called on error.\r\n   */\r\n  function onLoad( data: LazyLoadImagesData, error: boolean ): void {\r\n    const { _Slide } = data;\r\n\r\n    removeClass( _Slide.slide, CLASS_LOADING );\r\n\r\n    if ( ! error ) {\r\n      remove( data._spinner );\r\n      display( data._img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, data._img, _Slide );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    if ( index < images.length ) {\r\n      load( images[ index++ ] );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  empty,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { normalizeKey } from '../../utils/dom/normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  list: HTMLUListElement;\r\n  items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  li: HTMLLIElement;\r\n  button: HTMLButtonElement;\r\n  page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @link https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/#grouped-carousel-elements\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport function Pagination( Splide: Splide, Components: Components, options: Options ): PaginationComponent {\r\n  const { on, emit, bind, unbind } = EventInterface( Splide );\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( [ EVENT_MOVE, EVENT_SCROLLED ], update );\r\n  }\r\n\r\n  /**\r\n   * Initializes the pagination.\r\n   */\r\n  function init(): void {\r\n    destroy();\r\n\r\n    if ( options.pagination && Slides.isEnough() ) {\r\n      createPagination();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      remove( list );\r\n      items.forEach( item => { unbind( item.button, 'click keydown focus' ) } );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage } = options;\r\n    const parent = options.pagination === 'slider' && Elements.slider || Elements.root;\r\n    const max    = hasFocus() ? length : ceil( length / perPage );\r\n\r\n    list = create( 'ul', classes.pagination, parent );\r\n\r\n    setAttribute( list, ROLE, 'tablist' );\r\n    setAttribute( list, ARIA_LABEL, i18n.select );\r\n    setAttribute( list, ARIA_ORIENTATION, options.direction === TTB ? 'vertical' : '' );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', apply( onClick, i ) );\r\n      bind( button, 'keydown', apply( onKeydown, i ) );\r\n\r\n      setAttribute( li, ROLE, 'none' );\r\n      setAttribute( button, ROLE, 'tab' );\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks each pagination dot.\r\n   * Moves the focus to the active slide for accessibility.\r\n   *\r\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\r\n   *\r\n   * @param page - A clicked page index.\r\n   */\r\n  function onClick( page: number ): void {\r\n    go( `>${ page }`, true );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @todo option?\r\n   * @link https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( page: number, e: KeyboardEvent ): void {\r\n    const { length } = items;\r\n    const key = normalizeKey( e );\r\n\r\n    let nextPage = -1;\r\n\r\n    if ( key === resolve( 'ArrowRight' ) ) {\r\n      nextPage = ++page % length;\r\n    } else if ( key === resolve( 'ArrowLeft' ) ) {\r\n      nextPage = ( --page + length ) % length;\r\n    } else if ( key === 'Home' ) {\r\n      nextPage = 0;\r\n    } else if ( key === 'End' ) {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[ nextPage ];\r\n\r\n    if ( item ) {\r\n      focus( item.button );\r\n      go( `>${ nextPage }` );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      const { button } = prev;\r\n      removeClass( button, CLASS_ACTIVE );\r\n      removeAttribute( button, ARIA_SELECTED );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n    }\r\n\r\n    if ( curr ) {\r\n      const { button } = curr;\r\n      addClass( button, CLASS_ACTIVE );\r\n      setAttribute( button, ARIA_SELECTED, true );\r\n      setAttribute( button, TAB_INDEX, '' );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n}\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, isObject, prevent, timeOf } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel( Splide: Splide, Components: Components, options: Options ): WheelComponent {\r\n  const { bind } = EventInterface( Splide );\r\n  const { wheel: wheelOption } = options;\r\n  const wheel = isObject( wheelOption ) ? wheelOption : wheelOption && {};\r\n\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( wheel ) {\r\n      bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const { deltaY } = e;\r\n      const backwards = deltaY < 0;\r\n      const timeStamp = timeOf( e );\r\n\r\n      if ( abs( deltaY ) > ( wheel.min || 0 ) && timeStamp - lastTime > ( wheel.sleep || 0 ) ) {\r\n        Splide.go( backwards ? '<' : '>' );\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent( backwards ) && prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","import { ARIA_ATOMIC, ARIA_LIVE } from '../../constants/attributes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, setAttribute } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 3.7.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 3.7.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport function Live( Splide: Splide, Components: Components, options: Options ): LiveComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { list } = Components.Elements;\r\n  const { live } = options;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = live && ! options.isNavigation;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * Explicitly sets `aria-atomic` to avoid SR from reading the content twice.\r\n   *\r\n   * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-atomic\r\n   */\r\n  function mount(): void {\r\n    if ( enabled ) {\r\n      setAttribute( list, ARIA_ATOMIC, false );\r\n      disable( ! Components.Autoplay.isPaused() );\r\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\r\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable( disabled: boolean ): void {\r\n    if ( enabled ) {\r\n      setAttribute( list, ARIA_LIVE, disabled ? 'off' : 'polite' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n  };\r\n}","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type             : 'slide',\r\n  role             : 'region',\r\n  speed            : 400,\r\n  waitForTransition: true,\r\n  perPage          : 1,\r\n  cloneStatus      : true,\r\n  arrows           : true,\r\n  pagination       : true,\r\n  interval         : 5000,\r\n  pauseOnHover     : true,\r\n  pauseOnFocus     : true,\r\n  resetProgress    : true,\r\n  keyboard         : true,\r\n  easing           : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag             : true,\r\n  direction        : 'ltr',\r\n  slideFocus       : true,\r\n  trimSpace        : true,\r\n  focusableNodes   : 'a, button, textarea, input, select, iframe',\r\n  live             : true,\r\n  classes          : CLASSES,\r\n  i18n             : I18N,\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { nextTick, noop, rect, unit, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Fade( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * The nextTick disables the initial fade transition of the first slide.\r\n   */\r\n  function mount(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n      nextTick( () => {\r\n        Components.Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * Explicitly sets the track height to avoid it will collapse in Safari.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const { track } = Components.Elements;\r\n    style( track, 'height', unit( rect( track ).height ) );\r\n\r\n    nextTick( () => {\r\n      done();\r\n      style( track, 'height', '' );\r\n    } );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n}\r\n","import { SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Slide( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { bind } = EventInterface( Splide );\r\n  const { Move, Controller } = Components;\r\n  const { list } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      apply( `transform ${ speed }ms ${ options.easing }` );\r\n      Move.translate( destination, true );\r\n      endCallback = done;\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    apply( '' );\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  /**\r\n   * Applies the transition CSS property to the list element.\r\n   *\r\n   * @param transition - A transition CSS value.\r\n   */\r\n  function apply( transition: string ): void {\r\n    style( list, 'transition', transition );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n}\r\n","import * as ComponentConstructors from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { EventInterface, EventInterfaceObject, State, StateObject } from '../../constructors';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport { addClass, assert, assign, empty, forOwn, getAttribute, isString, merge, query, slice } from '../../utils';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event: EventInterfaceObject = EventInterface();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state: StateObject = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The collection of options.\r\n   */\r\n  private readonly _options: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _Components: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _Extensions: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _Transition: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options?: Options ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    options = merge( {}, DEFAULTS, Splide.defaults, options || {} );\r\n\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, 'Invalid JSON' );\r\n    }\r\n\r\n    this._options = options;\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._Components = Components;\r\n    this._Transition = Transition || this._Transition || ( this.is( FADE ) ? Fade : Slide );\r\n    this._Extensions = Extensions || this._Extensions;\r\n\r\n    const Constructors = assign( {}, ComponentConstructors, this._Extensions, { Transition: this._Transition } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._options );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var primary   = new Splide();\r\n   * var secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._Components.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the slider with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._Components.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this {\r\n    this.event.on( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): this {\r\n    this.event.off( events );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string ): this {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    this.event.emit( event, ...slice( arguments, 1 ) );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._Components.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._Components.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._options.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      EventInterface( this ).on( EVENT_READY, this.destroy.bind( this, completely ) );\r\n    } else {\r\n      forOwn( this._Components, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._options;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    const { _options } = this;\r\n    merge( _options, options );\r\n\r\n    if ( ! this.state.is( CREATED ) ) {\r\n      this.emit( EVENT_UPDATED, _options );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._Components.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._Components.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["EVENT_MOUNTED","EVENT_READY","EVENT_MOVE","EVENT_MOVED","EVENT_SHIFTED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_SLIDE_KEYDOWN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_REPOSITIONED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_DESTROY","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","STATES","CREATED","MOUNTED","IDLE","MOVING","DRAGGING","DESTROYED","empty","array","length","slice","arrayLike","start","end","Array","prototype","call","apply","func","bind","arguments","noop","nextTick","setTimeout","raf","requestAnimationFrame","typeOf","type","subject","isObject","isNull","isArray","isFunction","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","forEach","values","iteratee","includes","indexOf","push","items","toggleClass","elm","classes","add","name","classList","addClass","split","append","parent","children","appendChild","before","nodes","ref","node","parentNode","insertBefore","matches","selector","filter","child","firstElementChild","forOwn","object","right","keys","Object","reverse","i","key","assign","source","merge","removeAttribute","elms","attrs","attr","setAttribute","value2","String","create","tag","document","createElement","style","prop","getComputedStyle","style2","display","display2","focus","preventScroll","getAttribute","hasClass","className","contains","rect","target","getBoundingClientRect","remove","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","e","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","timeOf","timeStamp","unit","PROJECT_CODE","DATA_ATTRIBUTE","assert","condition","message","Error","min","Math","max","floor","ceil","abs","between","number","minOrMax","maxOrMin","exclusive","minimum","maximum","clamp","x","y","sign","format","string","replacements","replacement","replace","pad","ids","EventBinder","listeners","forEachEvent","targets","events","events2","eventNS","fragment","callback","options","event","namespace","isEventTarget","remover","removeEventListener","addEventListener","unbind","listener","dispatch","detail","CustomEvent","bubbles","createEvent","initEvent","dispatchEvent","destroy","data","EventInterface","Splide2","bus","createDocumentFragment","binder","on","join","off","emit","RequestInterval","interval","onInterval","onUpdate","limit","startTime","id","now","Date","rate","paused","count","update","elapsed","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","Throttle","duration","args","_this","TTB","ORIENTATION_MAP","marginRight","autoWidth","fixedWidth","paddingLeft","paddingRight","width","left","X","Y","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_PREFIX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_ATOMIC","ARIA_LIVE","ALL_ATTRIBUTES","CLASS_ROOT","CLASS_SLIDER","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PROGRESS","CLASS_PROGRESS_BAR","CLASS_AUTOPLAY","CLASS_PLAY","CLASS_PAUSE","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","STATUS_CLASSES","SLIDE","LOOP","FADE","Slide","index","slideIndex","slide","destroyed","destroyEvents","Components","root","isNavigation","updateOnMove","i18n","pagination","resolve","Direction","styles","isClone","container","initNavigation","controls","splides","map","Slide2","splide","Slides","getAt","slideX","updateActivity","isActive","onMove","curr","visible","hidden","activeElement","forwardFocus","slideFocus","focusableNodes","self","updateVisibility","trackRect","Elements","track","slideRect","isVisible","active","cloneStatus","mount","slideLabel","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","NORMALIZATION_MAP","Spacebar","Right","Left","Up","Down","normalizeKey","KEYBOARD_EVENT","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","Components2","breakpoints","initialOptions","queries","completely","register","entries","entry","matchMedia","options2","reduce","merged","predicate","entry2","_destroy","setup","isMin","mediaQuery","sort","n","m","speed","autoplay","axisOnly","direction","orient","slider","list","elements","slides","find","arrows","prev","next","bar","play","collect","prefix","uniqueId","carousel","tagName","role","getClasses","concat","drag","Slides2","init","get","excludeClones","matcher","Slide1","getIn","page","Controller","toIndex","hasFocus","perPage","forEachItem","images","img","removeNode","getLength","isEnough","vertical","rootRect","styleSlides","cssPadding","resize","newRect","height","cssHeight","cssTrackHeight","gap","cssSlideSize","fixedHeight","autoHeight","padding","heightRatio","totalSize","withoutGap","getGap","parseFloat","window","listSize","slideSize","sliderSize","getPadding","cloneCount","clones","computeCloneCount","isHead","clone","cloneNode","cloneDeep","generate","observe","fixedSize","clones2","Layout","Transition","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMin","exceededMax","getPosition","exceededLimit","shift","loop","transform","backwards","excess","getLimit","size","trimming","trimSpace","trim","getEnd","waitForTransition","move","dest","go","minDistance","Infinity","slideCount","perMove","Move","isLoop","isSlide","getNext","getAdjacent","getPrev","currIndex","prevIndex","scroll","useIndex","snap","toDest","setIndex","computeDestIndex","epsilon","incremental","toPage","closest","control","allowSameIndex","indicator","match","parse","useScroll","getIndex","created","wrapper","createArrow","prev2","arrow","arrowPath","nextIndex","prevLabel","last","nextLabel","first","disabled","hovered","focused","initButton","forPause","button","resetProgress","manual","autoToggle","updateInterval","pauseOnHover","pauseOnFocus","listen","cover","cover2","src","toggle","scrollCallback","suppressConstraint","friction","clear","onScrolled","t","easingFunc","pow","basePosition","baseEvent","prevBaseEvent","isFree","dragging","clickPrevented","exceeded","disable","onPointerDown","noDrag","isTouch","isTouchEvent","onPointerMove","onPointerUp","save","thresholds","isObj","cancelable","diffCoord","expired","diffTime","hasExceeded","dragMinThreshold","mouse","touch","velocity","computeVelocity","flickPower","flickMaxPages","computeDestination","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","changedTouches","TouchEvent","isDragging","keyboard","onKeydown","_disabled","isSequential","lazyLoad","_Slide","_img","_spinner","srcset","spinner","parentElement","loadNext","preloadPages","load","error","onLoad","select","li","class","text","pageX","createPagination","item","nextPage","isParent","instance","remount","wheelOption","wheel","lastTime","onWheel","deltaY","sleep","releaseWheel","enabled","live","Autoplay","DEFAULTS","easing","Fade","done","endCallback","transition","rewindSpeed","getSpeed","Splide","_options","_Extensions","_Splide","defaults","JSON","Extensions","this","_Components","_Transition","ComponentConstructors","Component","component","_this2","sync","Sync","refresh"],"mappings":"ujBAAaA,EAAgB,UAChBC,EAAc,QACdC,EAAa,OACbC,EAAc,QACdC,EAAgB,UAChBC,EAAc,QACdC,EAAe,SACfC,EAAiB,WACjBC,EAAgB,UAChBC,EAAe,SACfC,EAAsB,gBACtBC,EAAgB,UAChBC,EAAgB,UAEhBC,EAAe,SACfC,EAAgB,UAChBC,EAAqB,eAIrBC,EAAe,SACfC,EAAiB,WACjBC,EAAgB,UAKhBC,EAA2B,qBAC3BC,EAAsB,gBAEtBC,EAAuB,iBACvBC,EAAwB,kBCzBxBC,EAAS,CACpBC,QAPqB,EAQrBC,QAPqB,EAQrBC,KAPkB,EAQlBC,OAPoB,EAQpBC,SAPsB,EAQtBC,UAPuB,YCLTC,EAAMC,GACpBA,EAAMC,OAAS,WCDDC,EAAMC,EAAWC,EAAOC,UAC/BC,MAAMC,UAAUL,MAAMM,KAAKL,EAAWC,EAAOC,YCAtCI,EAAMC,UACbA,EAAKC,WAALD,GAAU,aAASR,EAAMU,UAAW,KCFzB,SAAPC,SCAAC,EAAWC,oBCARC,EAAIN,UACXO,sBAAsBP,YCAtBQ,EAAOC,EAAMC,iBACNA,IAAYD,WAEZE,EAASD,UACfE,EAAOF,IAAYF,EAAO,SAAUE,OAEjCG,EAAUjB,MAAMiB,QAChBC,EAAaf,EAAMS,EAAQ,YAC3BO,EAAWhB,EAAMS,EAAQ,UACzBQ,EAAcjB,EAAMS,EAAQ,sBACzBI,EAAOF,UACF,OAAZA,WAEOO,EAAcP,UACrBA,aAAmBQ,qBCdZC,EAAQC,UACfP,EAAQO,GAASA,EAAQ,CAACA,YCDnBC,EAAQC,EAAQC,GAC9BJ,EAAQG,GAAQD,QAAQE,YCFVC,EAASlC,EAAO8B,UACC,EAAxB9B,EAAMmC,QAAQL,YCAPM,EAAKpC,EAAOqC,UAC1BrC,EAAMoC,WAANpC,EAAc6B,EAAQQ,IACfrC,WCFOsC,EAAYC,EAAKC,EAASC,GACpCF,GACFR,EAAQS,EAAS,SAACE,GACZA,GACFH,EAAII,UAAUF,EAAM,MAAQ,UAAUC,cCH9BE,EAASL,EAAKC,GAC5BF,EAAYC,EAAKd,EAASe,GAAWA,EAAQK,MAAM,KAAOL,GAAS,YCFrDM,EAAOC,EAAQC,GAC7BjB,EAAQiB,EAAUD,EAAOE,YAAYtC,KAAKoC,aCD5BG,EAAOC,EAAOC,GAC5BrB,EAAQoB,EAAO,SAACE,OACRN,EAASK,EAAIE,WACfP,GACFA,EAAOQ,aAAaF,EAAMD,cCJhBI,GAAQjB,EAAKkB,UACpB9B,EAAcY,KAASA,EAAG,mBAAyBA,EAAIiB,SAAShD,KAAK+B,EAAKkB,YCAnET,GAASD,EAAQU,UACxBV,EAAS7C,EAAM6C,EAAOC,UAAUU,OAAO,SAACC,UAAUH,GAAQG,EAAOF,KAAa,YCFvEE,GAAMZ,EAAQU,UACrBA,EAAWT,GAASD,EAAQU,GAAU,GAAKV,EAAOa,2BCF3CC,EAAOC,EAAQ7B,EAAU8B,MACnCD,UACEE,EAAOC,OAAOD,KAAKF,GACvBE,EAAOD,EAAQC,EAAKE,UAAYF,EACvBG,EAAI,EAAGA,EAAIH,EAAK/D,OAAQkE,IAAK,KAC9BC,EAAMJ,EAAKG,MACL,cAARC,IACiC,IAA/BnC,EAAS6B,EAAOM,GAAMA,gBAMzBN,WCXOO,GAAOP,UACrB5D,EAAMU,UAAW,GAAGmB,QAAQ,SAACuC,GAC3BT,EAAOS,EAAQ,SAACxC,EAAOsC,GACrBN,EAAOM,GAAOE,EAAOF,OAGlBN,WCLOS,EAAMT,UACpB5D,EAAMU,WAAWmB,QAAQ,SAACuC,GACxBT,EAAOS,EAAQ,SAACxC,EAAOsC,GACjB7C,EAAQO,GACVgC,EAAOM,GAAOtC,EAAM5B,QACXmB,EAASS,GAClBgC,EAAOM,GAAOG,EAAMlD,EAASyC,EAAOM,IAAQN,EAAOM,GAAO,GAAItC,GAE9DgC,EAAOM,GAAOtC,MAIbgC,WCdOU,GAAgBC,EAAMC,GACpC3C,EAAQ0C,EAAM,SAAClC,GACbR,EAAQ2C,EAAO,SAACC,GACdpC,GAAOA,EAAIiC,gBAAgBG,gBCAjBC,GAAaH,EAAMC,EAAO5C,GACpCT,EAASqD,GACXb,EAAOa,EAAO,SAACG,EAAQnC,GACrBkC,GAAaH,EAAM/B,EAAMmC,KAG3B9C,EAAQ0C,EAAM,SAAClC,GACbjB,EAAOQ,IAAoB,KAAVA,EAAe0C,GAAgBjC,EAAKmC,GAASnC,EAAIqC,aAAaF,EAAOI,OAAOhD,eCPnFiD,GAAOC,EAAKN,EAAO3B,GAC3BR,EAAM0C,SAASC,cAAcF,UAC/BN,IACFjD,EAASiD,GAAS9B,EAAuBgC,IAAdrC,EAAKmC,GAElC3B,GAAUD,EAAOC,EAAQR,GAClBA,WCTO4C,GAAM5C,EAAK6C,EAAMtD,MAC3BJ,EAAYI,UACPuD,iBAAiB9C,GAAK6C,GAE1B9D,EAAOQ,KACKwD,EAAW/C,EAAlB4C,OAEGC,MADXtD,KAAWA,KAETwD,EAAOF,GAAQtD,YCRLyD,GAAQhD,EAAKiD,GAC3BL,GAAM5C,EAAK,UAAWiD,YCFRC,GAAMlD,GACpBA,EAAG,WAAiBA,EAAG,aAAmBA,EAAIkD,MAAM,CAAEC,eAAe,aCDvDC,GAAapD,EAAKoC,UACzBpC,EAAIoD,aAAahB,YCDViB,GAASrD,EAAKsD,UACrBtD,GAAOA,EAAII,UAAUmD,SAASD,YCDvBE,GAAKC,UACZA,EAAOC,iCCAAC,GAAO/C,GACrBpB,EAAQoB,EAAO,SAACE,GACVA,GAAQA,EAAKC,YACfD,EAAKC,WAAW6C,YAAY9C,cCHlB+C,GAAUC,UACjB1C,IAAM,IAAI2C,WAAYC,gBAAgBF,EAAM,aAAaG,eCFlDC,GAAQC,EAAGC,GACzBD,EAAEE,iBACED,IACFD,EAAEC,kBACFD,EAAEG,qCCJUC,GAAM/D,EAAQU,UACrBV,GAAUA,EAAOgE,cAActD,YCAxBuD,GAASjE,EAAQU,UACxBA,EAAWvD,EAAM6C,EAAOkE,iBAAiBxD,IAAa,YCD/CyD,GAAY3E,EAAKC,GAC/BF,EAAYC,EAAKC,GAAS,YCFZ2E,GAAOT,UACdA,EAAEU,mBCAKC,GAAKvF,UACZL,EAASK,GAASA,EAAQA,EAAWA,OAAY,OCF7CwF,GAAe,SACfC,UAAyBD,YCAtBE,GAAOC,EAAWC,OAC3BD,QACG,IAAIE,UAAUL,SAAiBI,GAAW,SCHrCE,GAA+BC,KAA/BD,IAAKE,GAA0BD,KAA1BC,IAAKC,GAAqBF,KAArBE,MAAOC,GAAcH,KAAdG,KAAMC,GAAQJ,KAARI,aCCtBC,GAAQC,EAAQC,EAAUC,EAAUC,OAC5CC,EAAUX,GAAIQ,EAAUC,GACxBG,EAAUV,GAAIM,EAAUC,UACvBC,EAAYC,EAAUJ,GAAUA,EAASK,EAAUD,GAAWJ,GAAUA,GAAUK,WCH3EC,GAAMN,EAAQO,EAAGC,OACzBJ,EAAUX,GAAIc,EAAGC,GACjBH,EAAUV,GAAIY,EAAGC,UAChBf,GAAIE,GAAIS,EAASJ,GAASK,YCJnBI,GAAKF,UACN,EAAJA,IAAWA,EAAI,YCAVG,GAAOC,EAAQC,UAC7BhH,EAAQgH,EAAc,SAACC,GACrBF,EAASA,EAAOG,QAAQ,QAASD,KAE5BF,WCLOI,GAAIf,UACXA,EAAS,OAASA,KAAcA,MCAnCgB,GAAM,YCAIC,QACVC,EAAY,YAgCPC,EAAaC,EAASC,EAAQvH,GACrCF,EAAQwH,EAAS,SAACvD,GAChBA,GAAUjE,EAAQyH,EAAQ,SAACC,GACzBA,EAAQ5G,MAAM,KAAKd,QAAQ,SAAC2H,GACpBC,EAAWD,EAAQ7G,MAAM,KAC/BZ,EAAS+D,EAAQ2D,EAAS,GAAIA,EAAS,gBAWxC,CACLhJ,cAhDY4I,EAASC,EAAQI,EAAUC,GACvCP,EAAaC,EAASC,EAAQ,SAACxD,EAAQ8D,EAAOC,OACtCC,EAAgB,qBAAsBhE,EACtCiE,EAAUD,EAAgBhE,EAAOkE,oBAAoBvJ,KAAKqF,EAAQ8D,EAAOF,EAAUC,GAAW7D,EAAM,eAAmBrF,KAAKqF,EAAQ4D,GAC1II,EAAgBhE,EAAOmE,iBAAiBL,EAAOF,EAAUC,GAAW7D,EAAM,YAAgB4D,GAC1FP,EAAUjH,KAAK,CAAC4D,EAAQ8D,EAAOC,EAAWH,EAAUK,OA4CtDG,gBAzCcb,EAASC,EAAQI,GAC/BN,EAAaC,EAASC,EAAQ,SAACxD,EAAQ8D,EAAOC,GAC5CV,EAAYA,EAAU3F,OAAO,SAAC2G,YACxBA,EAAS,KAAOrE,GAAUqE,EAAS,KAAOP,GAASO,EAAS,KAAON,GAAeH,GAAYS,EAAS,KAAOT,KAChHS,EAAS,MACF,QAqCbC,kBA/BgBtE,EAAQ7E,EAAMoJ,OAC1B7D,QAEuB,mBAAhB8D,YACT9D,EAAI,IAAI8D,YAAYrJ,EAAM,CAAEsJ,SAFd,EAEuBF,OAAAA,KAErC7D,EAAIzB,SAASyF,YAAY,gBACvBC,UAAUxJ,GALE,GAKa,GAE7B6E,EAAO4E,cAAclE,GACdA,GAsBPmE,mBATAxB,EAAUtH,QAAQ,SAAC+I,GACjBA,EAAK,OAEP/K,EAAMsJ,cC7CM0B,GAAeC,OACvBC,EAAMD,EAAUA,EAAQlB,MAAMmB,IAAMhG,SAASiG,yBAC7CC,EAAS/B,WASX4B,GACFA,EAAQlB,MAAMsB,GAAGjM,EAAegM,EAAON,SAElCxG,GAAO8G,EAAQ,CACpBF,IAAAA,EACAG,YAbU5B,EAAQI,GAClBuB,EAAOxK,KAAKsK,EAAKpJ,EAAQ2H,GAAQ6B,KAAK,KAAM,SAAC3E,GAC3CkD,EAASnJ,MAAMmJ,EAAUrI,EAAQmF,EAAE6D,QAAU7D,EAAE6D,OAAS,OAY1De,IAAK7K,EAAM0K,EAAOf,OAAQa,GAC1BM,cAVYzB,GACZqB,EAAOb,SAASW,EAAKnB,EAAO5J,EAAMU,UAAW,gBCXjC4K,GAAgBC,EAAUC,EAAYC,EAAUC,OAE1DC,EAEAC,EAHIC,EAAQC,KAARD,IAEJE,EAAO,EAEPC,GAAS,EACTC,EAAQ,WACHC,QACFF,EAAQ,KACLG,EAAUN,IAAQF,KACTJ,GAAXY,GACFJ,EAAO,EACPJ,EAAYE,KAEZE,EAAOI,EAAUZ,EAEfE,GACFA,EAASM,GAEE,IAATA,IACFP,IACIE,KAAWO,GAASP,UACfU,IAGXtL,EAAIoL,aASCE,IACPJ,GAAS,WASFK,IACPC,qBAAqBV,GAGrBI,IADAJ,EADAG,EAAO,SAUF,CACL7L,eA7BaqM,GACZA,GAAUF,IACXV,EAAYE,KAASU,EAASR,EAAOR,EAAW,GAChDS,GAAS,EACTlL,EAAIoL,IA0BJM,kBApBAb,EAAYE,IACZE,EAAO,EACHN,GACFA,EAASM,IAkBXK,MAAAA,EACAC,OAAAA,EACAI,aAXWC,GACXnB,EAAWmB,GAWXC,2BAROX,aCtDKY,EAAMC,OAChBC,EAAQD,QAOL,CAAEJ,aANI7K,GACXkL,EAAQlL,GAKImL,YAHFC,UACHhL,EAASL,EAAQqL,GAASF,cCLrBG,GAASzM,EAAM0M,OACzB3B,wBAGM4B,SADH5B,IACG4B,EAAOnN,EAAMU,YACnB6K,EAAWD,GAAgB4B,GAAY,EAAG,WACxC1M,EAAKD,MAAM6M,EAAMD,GACjB5B,EAAW,MACV,KAAM,IACArL,cCTFmN,GAAM,MCDNC,EAAkB,CAC7BC,YAAa,CAAC,eAAgB,cAC9BC,UAAW,CAAC,cACZC,WAAY,CAAC,eACbC,YAAa,CAAC,aAAc,gBAC5BC,aAAc,CAAC,gBAAiB,eAChCC,MAAO,CAAC,UACRC,KAAM,CAAC,MAAO,SACdhK,MAAO,CAAC,SAAU,QAClB2E,EAAG,CAAC,KACJsF,EAAG,CAAC,KACJC,EAAG,CAAC,KACJC,UAAW,CAAC,UAAW,cACvBC,WAAY,CAAC,YAAa,kBCdfC,GAAO,OACPC,GAAY,WAEZC,EAAc,QACdC,GAAmBD,aACnBE,GAAkBF,YAClBG,GAAmBH,aACnBI,GAAgBJ,UAChBK,GAAiBL,WACjBM,GAAsBN,gBACtBO,GAA0BP,oBAC1BQ,EAAiBR,WACjBS,GAAeT,SACfU,GAAiB,CAC5BZ,GACAC,GAbsB,WAetBE,GACAC,GACAE,GACAC,GACAC,GACAC,GACAC,EACAC,ICvBWE,GAAa3H,GACb4H,GAAkB5H,cAClB6H,GAAiB7H,aACjB8H,GAAgB9H,YAChB+H,GAAiB/H,aACjBgI,GAAiBD,aACjBE,GAAqBF,iBACrBG,GAAkBlI,cAClBmI,GAAiBnI,aACjBoI,GAAsBD,YACtBE,GAAsBF,YACtBG,EAAsBtI,kBAEtBuI,GAAoBvI,gBACpBwI,GAAwBD,WACxBE,GAAoBzI,gBACpB0I,GAAgB1I,YAChB2I,GAAiB3I,aAGjB4I,GAAe,YACfC,GAAa,UACbC,GAAa,UACbC,GAAgB,aAChBC,GAAgB,aAChBC,GAAiB,CAACL,GAAcG,GAAeF,GAAYC,GAAYE,QC1BvEE,GAAQ,QACRC,GAAO,OACPC,GAAO,gBCqDJC,GAAM3F,EAAS4F,EAAOC,EAAYC,OAQ5CC,IAP+ChG,GAAeC,GAA1DI,IAAAA,GAAIG,IAAAA,KAAM5K,IAAAA,KAAeqQ,IAATnG,QAChBoG,EAA8BjG,EAA9BiG,WAAYC,EAAkBlG,EAAlBkG,KAAMrH,EAAYmB,EAAZnB,QAClBsH,EAAiDtH,EAAjDsH,aAAcC,EAAmCvH,EAAnCuH,aAAcC,EAAqBxH,EAArBwH,KAAMC,EAAezH,EAAfyH,WAClCC,EAAYN,EAAWO,UAAvBD,QACFE,EAAS9L,GAAamL,EAAO,SAC7BY,GAAwB,EAAdb,EACVc,EAAYhO,GAAMmN,MAAWvB,aA4B1BqC,QACDC,EAAW7G,EAAQ8G,QAAQC,IAAI,SAAC/L,GAC9BgM,EAAShM,EAAOiM,OAAOhB,WAAWiB,OAAOC,MAAMvB,UAC9CoB,EAASA,EAAOlB,MAAMhF,GAAK,KACjCT,KAAK,KACRzG,GAAakM,EAAOpC,GAAY7F,GAAOwI,EAAKe,QAASV,EAAUb,EAAaD,GAAS,IACrFhM,GAAakM,EAAOvC,GAAesD,GACnCQ,EAAeC,cAERC,IACFxB,GACH3E,aAGKA,QAEUoG,EADZzB,IACYyB,EAASxH,EAAhB4F,MACRyB,EAAeC,cAaOG,OAClBC,GAAUD,KAAaH,KAAcZ,GACvCzM,SAAS0N,gBAAkB7B,GAAS4B,GACtC5R,EAAS8R,GAEXhO,GAAakM,EAAOnC,GAAa+D,GAAU,IAC3C9N,GAAakM,EAAOzC,IAAYqE,GAAU7I,EAAQgJ,WAAa,EAAI,IACnEjO,GAAaoC,GAAS8J,EAAOjH,EAAQiJ,gBAAkB,IAAKzE,GAAWqE,GAAU,EAAI,IACjFD,IAAY7M,GAASkL,EAAOT,MAC9B/N,EAAYwO,EAAOT,GAAeoC,GAClClH,EAAKkH,EAAUhU,EAAgBC,EAAcqU,IAtB7CC,eAuCEhI,EAAQiC,GAAGyD,WACN4B,QAEHW,EAAYlN,GAAKkL,EAAWiC,SAASC,OACrCC,EAAYrN,GAAK+K,GACjB/C,EAAOwD,EAAQ,QACfxN,EAAQwN,EAAQ,gBACfxJ,GAAMkL,EAAUlF,KAAU/F,GAAKoL,EAAUrF,KAAUhG,GAAMqL,EAAUrP,KAAWiE,GAAKiL,EAAUlP,IA9CjFsP,IACjB/Q,EAAYwO,EAAOX,GAAYS,IAAU4B,EAAO,GAChDlQ,EAAYwO,EAAOV,GAAYQ,IAAU4B,EAAO,aAG3CH,EAAeiB,GAClBA,IAAW1N,GAASkL,EAAOZ,MAC7B5N,EAAYwO,EAAOZ,GAAcoD,GACjC1O,GAAakM,EAAOtC,GAAc2C,GAAgBmC,GAAU,IAC5D/H,EAAK+H,EAAS/U,EAAeC,EAAgBuU,aAgBxCH,QACDZ,EAASf,EAAWiB,OAAOC,MAAMnH,EAAQ4F,OAC3CoB,GACFvM,GAAMuM,EAAOlB,gBAMRwB,QACQE,EAASxH,EAAhB4F,aACD4B,IAAS5B,GAAS/G,EAAQ0J,aAAef,IAAS3B,MAmBrDkC,EAAO,CACXnC,MAAAA,EACAC,WAAAA,EACAC,MAAAA,EACAa,UAAAA,EACAD,QAAAA,EACA8B,iBAxGK9B,IACHZ,EAAMhF,GAAQoF,EAAKpF,YAAW5C,GAAI0H,EAAQ,GAC1ChM,GAAakM,EAAO1C,GAAMkD,EAAa,WAAa,SACpD1M,GAAakM,EAAOjC,GAAsByC,EAAa,GAAKD,EAAKP,OACjElM,GAAakM,EAAOpC,GAAY7F,GAAOwI,EAAKoC,WAAY,CAAC7C,EAAQ,EAAG5F,EAAQ/K,WAK9EU,EAAKmQ,EAAO,gBAAiB,SAACpK,GAC5B6E,EAAgB,UAAX7E,EAAEvF,KAAmB7C,EAAcK,EAAqBoU,EAAMrM,KAErE0E,EAAG,CAACxM,EAAeI,EAAoBX,EAAeD,EAAac,GAAiBkN,GACpFhB,EAAGhM,EAA0BwS,GACzBR,GACFhG,EAAGjN,EAAYoU,IA0FjB1H,mBAtFAkG,GAAY,EACZC,IACA9J,GAAY4J,EAAOP,IACnB/L,GAAgBsM,EAAO9B,IACvBpK,GAAakM,EAAO,QAASW,IAmF7BrF,OAAAA,iBAhCahH,EAAMtD,EAAO4R,GAC1BC,GAAOD,GAAgB/B,GAAab,EAAO1L,EAAMtD,IAiCjD8R,kBAjBgBC,EAAMC,UAClBC,EAAO9L,GAAI4L,EAAOjD,IAEpBmD,GADGrC,IAAY7H,EAAQ6C,QAAU1B,EAAQiC,GAAGwD,KACrC7I,GAAImM,EAAM/I,EAAQ/K,OAAS8T,GAE7BA,IAAQD,WAcVf,MC9KIiB,GAA6BzM,kBCD7B0M,GAA0B,CAAEC,SAAS,EAAOC,SAAS,GCGrDC,GAAsB,sBACtBC,GAAoB,mCCHpBC,GAAoB,CAC/BC,SAAU,IACVC,MAAO,aACPC,KAAM,YACNC,GAAI,UACJC,KAAM,sBAEQC,GAAaxQ,UAC3BA,EAAM3C,EAAS2C,GAAOA,EAAMA,EAAIA,IACzBkQ,GAAkBlQ,IAAQA,MCL7ByQ,GAAiB,cCJVC,GAAwBvN,UACxBwN,GAA2BD,aAC3BE,OAAqBF,UAAyBC,WCWrDE,GAAe,CAAC,IAAK,6DCVLjK,EAASkK,EAAarL,OACpCsB,EAAS/B,IACT+L,EAActL,EAAQsL,aAAe,GACrCC,EAAiB7Q,EAAM,GAAIsF,GAC3BwL,EAAU,YAUPxK,EAAQyK,GACXA,GACFnK,EAAON,mBAGF0K,EAASC,GAChBH,EAAQjT,KAAKoT,EAAQzD,IAAI,SAAC0D,OAClB3O,EAAQ4O,WAAWD,EAAM,WAC/BtK,EAAOxK,KAAKmG,EAAO,SAAUsF,GACtB,CAACqJ,EAAM,GAAI3O,eAGbsF,QACDuJ,EAaCN,EAAQO,OAAO,SAACC,EAAQL,OACvBC,GC5CoBK,ED4CE,SAACC,UAAWA,EAAO,GAAGvS,SC3C/CtD,ED2CgBsV,GC3CC9R,OAAOoS,GAAW,ID2CwB,WAC9DL,EAAM,IAAMzK,EAAQO,KnEjCC,QmEiCiBkK,EAAM,IACrClR,EAAMsR,EAAQJ,EAAM,IAAM,KAChClR,EAAM,GAAI6Q,IAhBIY,EAAaL,EAAtB9K,QACJmL,GACFhL,EAAQnB,QAAUuL,EAClBpK,EAAQH,QAAqB,eAAbmL,IACPhL,EAAQgC,MAAMC,GlE/BJ,IkEgCnBpC,GAAQ,GACRG,EAAQwI,SAERxI,EAAQnB,QAAU8L,QAUf,CACLM,qBAzCMC,EAA+B,QAAvBrM,EAAQsM,WACtBZ,EAAStR,OAAOD,KAAKmR,GAAaiB,KAAK,SAACC,EAAGC,UAAMJ,GAASI,GAAKD,GAAKA,GAAKC,IAAGvE,IAAI,SAAC3N,SAAQ,CAAC+Q,EAAY/Q,QAAU8R,EAAQ,MAAQ,iBAAe9R,YAC/ImR,EAAS,CAAC,CAAC,CACTgB,MAAO,EACPC,SAAU,SACT,sCACHpK,KAoCAoH,MAAO3S,EACPgK,QAAAA,uBZrCsBG,EAASkK,EAAarL,SASvC,CACL0H,iBATenM,EAAMqR,OACbC,EAAc7M,EAAd6M,iBAEDlJ,EAAgBpI,GDnBR,QCkBDsR,GAAsBD,EAAeC,IAAcnJ,GAAM,GAAK,EAA7B,IACRnI,GAOvCuR,gBALc7U,UACPA,GDtBQ,QCsBC+H,EAAQ6M,UAAoB,GAAK,wBcY5B1L,EAASkK,EAAarL,OAMzCrH,EACAoU,EACAzD,EACA0D,EARIzL,EAAOL,GAAeC,GAAtBI,GACA8F,EAASlG,EAATkG,KACAG,EAASxH,EAATwH,KACFyF,EAAW,GACXC,EAAS,YAKNd,QA2CDnK,cAvBN8K,EAASjT,GAAMuN,MAAUhC,IACzBiE,EAAQrM,GAAMoK,MAAU/B,IACxB0H,EAAOlT,GAAMwP,MAAW/D,IACxB5H,GAAO2L,GAAS0D,EAAM,oCACtBzU,EAAK2U,EAAQ/T,GAAS6T,MAAUxH,YAAoBC,aAC9CkH,EAAWQ,MAASjH,IACpBkH,EAASD,MAASxH,IACxBnL,GAAOyS,EAAU,CACf5F,KAAAA,EACA0F,OAAAA,EACAzD,MAAAA,EACA0D,KAAAA,EACAE,OAAAA,EACAE,OAAAA,EACAT,SAAAA,EACAU,KAAMpQ,GAAMmQ,MAAYvH,IACxByH,KAAMrQ,GAAMmQ,MAAYtH,IACxByH,IAAKtQ,GAAMkQ,MAASnH,QAAuBC,IAC3CuH,KAAMvQ,GAAM0P,MAAcxG,IAC1B1D,MAAOxF,GAAM0P,MAAcvG,MAtC7BqH,GA0CMxL,EAAKoF,EAAKpF,arBtFKyL,YACbA,EAASrO,GAAIC,GAAIoO,IAAWpO,GAAIoO,IAAW,GAAK,GqBqFlCC,CAASlQ,IAC/B4J,EAAKpF,GAAKA,EACVqH,EAAMrH,GAAKqH,EAAMrH,IAASA,WAC1B+K,EAAK/K,GAAK+K,EAAK/K,IAASA,UACxBlH,GAAasM,EAAMrC,GAAsBwC,EAAKoG,UAC9C7S,GAAasM,EAAM9C,GAAuB,YAAjB8C,EAAKwG,SAAyB7N,EAAQ8N,MAAQ,IACvE/S,GAAaiS,EAAMzI,GAAM,QA9CzBxL,EAASsO,EAAM1O,EAAUoV,cAOlB/M,IACP9K,EAAMgX,GACN7P,GAAYgK,EAAM1O,GAClBgC,GAAgB,CAAC0M,EAAMiC,EAAO0D,GAAO7H,GAAe6I,OAAO,mBAEpDzL,IACPlF,GAAYgK,EAAM1O,GAClBI,EAASsO,EAAM1O,EAAUoV,cAkClBZ,EAAKvT,UACLE,GAAMuN,EAAMzN,IAAaE,GAAMiT,EAAQnT,YAEvCmU,UACA,CACF3I,QAAepF,EAAQ1I,KACvB8N,QAAepF,EAAQ6M,UAC1B7M,EAAQiO,MAAW7I,iBACnBpF,EAAQsH,cAAmBlC,WAC3BiB,WAGG7L,GAAOyS,EAAU,CACtBb,MAAAA,EACAzC,iBA3DApI,EAAGxM,EAAeiM,GAClBO,EAAGxM,EAAeqX,GAClB7K,EAAGvM,EAAeuN,IA0DlBvB,QAAAA,qBC1FmBG,EAASkK,EAAarL,SAChBkB,GAAeC,GAAlCI,IAAAA,GAAIG,IAAAA,KAAM5K,IAAAA,KACVoW,KAAiB7B,EAAYhC,UAA7B6D,OAAQF,IAAAA,KACVkB,EAAU,YASPC,IACPjB,EAAOhV,QAAQ,SAAC+O,EAAOF,GACrB2E,EAASzE,EAAOF,GAAQ,cAGnB/F,IACP9I,EAAQ,SAACiQ,GACPA,EAAOnH,YAET9K,EAAMgY,YAOCxC,EAASzE,EAAOF,EAAOC,GACxB/M,EAAS6M,GAAM3F,EAAS4F,EAAOC,EAAYC,GACjDhN,EAAO0P,QACPuE,EAAQ3V,KAAK0B,YAENmU,EAAIC,UACJA,EAAgBxU,EAAO,SAACsO,UAAYA,EAAON,UAAWqG,WA6BtDhW,EAAQE,EAAUiW,GACzBD,EAAIC,GAAenW,QAAQE,YAEpByB,EAAOyU,UACPJ,EAAQrU,OAAOlC,EAAW2W,GAAWA,EAAU,SAACnG,UAAWvQ,EAAS0W,GAAW3U,GAAQwO,EAAOlB,MAAOqH,GAAWjW,EAASL,EAAQsW,GAAUnG,EAAOpB,eA4BpJ,CACL4C,iBA3FAwE,IACA5M,EAAGxM,EAAeiM,GAClBO,EAAGxM,EAAeoZ,GAClB5M,EAAG,CAACnN,EAAeW,GAAgB,WACjCmZ,EAAQ3B,KAAK,SAACgC,EAAQpG,UAAWoG,EAAOxH,MAAQoB,EAAOpB,WAwFzD/F,QAAAA,EACAuB,kBA1EArK,EAAQ,SAACiQ,GACPA,EAAO5F,YA0ETmJ,SAAAA,EACA0C,IAAAA,EACAI,eAjEaC,OACLC,EAAerD,EAAfqD,WACF3H,EAAQ2H,EAAWC,QAAQF,GAC3BxQ,EAAMyQ,EAAWE,WAAa,EAAI5O,EAAQ6O,eACzChV,EAAO,SAACsO,UAAW9J,GAAQ8J,EAAOpB,MAAOA,EAAOA,EAAQ9I,EAAM,MA8DrEqK,eA5DavB,UACNlN,EAAOkN,GAAO,IA4DrBnO,aA1DWJ,EAAOuO,GAClB+H,EAAYtW,EAAO,SAACyO,OAKV1N,EAuBgBwG,EAEpB3J,EA1BA0B,EAFFmP,EADErP,EAASqP,GACH1K,GAAU0K,GAEFA,MACV1N,EAAM2T,EAAOnG,IACb1N,EAAO4N,EAAO1N,GAAON,EAAO+T,EAAM/F,GACxClO,EAASkO,EAAOjH,EAAQrH,QAAQsO,OAqBfvO,EApBHuO,EAoBQlH,EApBDnJ,EAAM8K,EAAMzM,GAqB/B8Z,EAAS5R,GAASzE,EAAK,QACvBtC,EAAW2Y,EAAX3Y,QAEJ2Y,EAAO7W,QAAQ,SAAC8W,GACdlY,EAAKkY,EAAK,aAAc,aACf5Y,GACL2J,QAKNA,OA7BF2B,EAAK3M,oBAESuZ,GACdW,GAAWpV,EAAOyU,GAASpG,IAAI,SAACC,UAAWA,EAAOlB,SAClDvF,EAAK3M,YA4CLmD,EACA2B,OAAAA,EACAyB,eAtCaC,EAAMtD,EAAO4R,GAC1B3R,EAAQ,SAACiQ,GACPA,EAAO7M,MAAMC,EAAMtD,EAAO4R,MAqC5BqF,mBAnBiBb,UACVA,EAAgBnB,EAAgBgB,GAAT9X,QAmB9B+Y,2BAhBOjB,EAAQ9X,OAAS4J,EAAQ6O,2BC9Gb1N,EAASkK,EAAarL,OAMvCoP,EACAC,EANI9N,KAAmBL,GAAeC,IAAlCI,GAAIzK,IAAAA,KAAM4K,IAAAA,KACV2G,EAAWgD,EAAXhD,OACAX,EAAY2D,EAAY1D,UAAxBD,QACAL,KAAsBgE,EAAYhC,UAAlChC,KAAMiC,IAAAA,MAAO0D,IAAAA,KACb1E,EAA8BD,EAA9BC,MAAcgH,EAAgBjH,EAAvB/M,eASN6S,IACPkB,EAAW,KACXD,EAAWpP,EAAQ6M,YAAcnJ,GACjCpI,GAAM+L,EAAM,WAAY7J,GAAKwC,EAAQiE,QACrC3I,GAAMgO,EAAO5B,EAAQ,eAAgB6H,GAAW,IAChDjU,GAAMgO,EAAO5B,EAAQ,gBAAiB6H,GAAW,IACjDC,aAEOA,QACDC,EAAUvT,GAAKmL,GAChBgI,GAAYA,EAASpL,QAAUwL,EAAQxL,OAASoL,EAASK,SAAWD,EAAQC,SAC/EpU,GAAMgO,EAAO,wBAcXoG,EAAS,GACTN,IAEFzR,GADA+R,EAASC,IACM,qCACfD,UAAiBA,QAAYH,GAAW,SAAYA,GAAW,eAE1DG,EApBkBE,IACvBN,EAAY5H,EAAQ,eAAgBlK,GAAKwC,EAAQ6P,MACjDP,EAAY,SAwBPtP,EAAQ6D,UAAY,GAAKrG,GAAKwC,EAAQ8D,cAAgBsL,EAAW,GAAKU,OAxBnC,MACxCR,EAAY,SA0BP9R,GAAKwC,EAAQ+P,eAAiBX,EAAWpP,EAAQgQ,WAAa,GAAKF,IAAiBH,MA1B/C,MAAM,GAChDN,EAAWI,EACX/N,EAAKxM,aAGAqa,EAAWrV,OACV+V,EAAYjQ,EAAZiQ,QACF1U,EAAOmM,EAAQxN,EAAQ,QAAU,eAChC+V,GAAWzS,GAAKyS,EAAQ1U,KAAU/D,EAASyY,GAAW,EAAIA,KAAa,eAWvEN,WACAnS,GAAKwC,EAAQ0P,QAAUxT,GAAK8Q,GAAM/I,MAAQjE,EAAQkQ,sBAQlDJ,QACDD,EAAMrS,GAAKwC,EAAQ6P,yBACLA,SAAaA,SAAU7P,EAAQ6O,SAAW,IAAIgB,SAAaA,gBASxEM,EAAUpJ,EAAOqJ,OAClBtJ,EAAQwB,EAAMvB,MAChBD,EAAO,CACH5M,EAAQgC,GAAK4K,EAAMG,OAAOS,EAAQ,UAClCxD,EAAOhI,GAAK8Q,GAAMtF,EAAQ,gBACzBtJ,GAAIlE,EAAQgK,IAASkM,EAAa,EAAIC,YAExC,WAKAA,QACDvJ,EAAQwB,EAAM,UACbxB,GAASwJ,WAAWhV,GAAMwL,EAAMG,MAAOS,EAAQ,kBAAoB,QAKrE,CACLiC,iBA9EAwE,IACArX,EAAKyZ,OAAQ,cAAejN,GAAS1M,EAAM8K,EAAMzM,KACjDsM,EAAG,CAACvM,EAAeD,GAAgBoZ,GACnC5M,EAAGtM,EAAcua,IA4EjBgB,2BA3BOtU,GAAK8Q,GAAMtF,EAAQ,WA4B1B+I,mBA1BiB1J,EAAOqJ,UAClBtJ,EAAQwB,EAAMvB,GAAS,IACd7K,GAAK4K,EAAMG,OAAOS,EAAQ,WAAa0I,EAAa,EAAIC,KAAY,GAyBnFK,6BAbOP,EAAUhP,EAAQ/K,OAAS,GAAG,GAAQ+Z,GAAW,GAAG,IAc3DA,UAAAA,EACAQ,oBATkBzW,UACXoW,WAAWhV,GAAMgO,EAAO5B,aAAkBxN,EAAQ,QAAU,YAAe,qBCpF/DiH,EAASkK,EAAarL,OAKvC4Q,IAJiB1P,GAAeC,GAA5BI,IAAAA,GAAIG,IAAAA,KACJ2H,EAAqBgC,EAArBhC,SAAUhB,EAAWgD,EAAXhD,OACVX,EAAY2D,EAAY1D,UAAxBD,QACFmJ,EAAS,YAQN1C,KACHyC,EAAaE,gBAcDxO,OACV4K,EAAS7E,EAAO+F,MAAM/X,QACpBD,EAAW8W,EAAX9W,UACJA,EAAQ,MACH8W,EAAO9W,OAASkM,GACrB/J,EAAK2U,EAAQA,GAEf3U,EAAK2U,EAAO7W,OAAOiM,GAAQ4K,EAAO7W,MAAM,EAAGiM,IAAQpK,QAAQ,SAAC4O,EAAOC,OAC3DgK,EAAShK,EAAQzE,EACjB0O,WAOOtY,EAAKqO,GAChBiK,EAAQtY,EAAIuY,WAAU,UAC5BlY,EAASiY,EAAOhR,EAAQrH,QAAQqY,OAChCA,EAAM/O,GAAQd,EAAQkG,KAAKpF,YAAW5C,GAAI0H,EAAQ,GAC3CiK,EAXWE,CAAUpK,EAAMG,MAAOF,GACrCgK,EAAS1X,EAAO2X,EAAO9D,EAAO,GAAGjG,OAAShO,EAAOoQ,EAAS2D,KAAMgE,GAChEzY,EAAKsY,EAAQG,GACb3I,EAAOqD,SAASsF,EAAOjK,EAAQzE,GAASyO,EAAS,EAAI3a,GAAS0Q,EAAMC,UAzBtEoK,CAASP,GACTlP,EAAKzM,aAGA+L,IACP3E,GAAOwU,GACP3a,EAAM2a,YAECO,IACHR,EAAaE,KACfpP,EAAK3M,YAyBA+b,QAKCO,EAJMC,EAAYtR,EAApB6Q,cACD1P,EAAQiC,GAAGwD,IAEJ0K,IAGVA,GAFMD,EAAYrR,EAAQ0H,EAAQ,gBAAkB2D,EAAYkG,OAAOd,UAAU,KACjDtS,GAAKjC,GAAKmN,EAASC,OAAO5B,EAAQ,UAAY2J,IACtDrR,EAAQ0H,EAAQ,eAAiBvG,EAAQ/K,QAAU4J,EAAQ6O,SAJnFyC,EAAU,EAMLA,QAEF,CACL3H,iBAtDAwE,IACA5M,EAAGxM,EAAeiM,GAClBO,EAAGxM,EAAeoZ,GAClB5M,EAAG,CAACvM,EAAeC,GAAemc,IAoDlCpQ,QAAAA,kBCpDiBG,EAASkK,EAAarL,OAKrCwR,IAJiBtQ,GAAeC,GAA5BI,IAAAA,GAAIG,IAAAA,KACJ+O,KAA2DpF,EAAYkG,QAAvEd,UAAWE,IAAAA,WAAYR,IAAAA,UAAWK,IAAAA,SAAUE,IAAAA,WAC5ChJ,KAAoB2D,EAAY1D,WAAhCD,QAASoF,IAAAA,OACTE,KAAgB3B,EAAYhC,UAA5B2D,KAAM1D,IAAAA,eAMLmI,IACFC,MACHrG,EAAYsG,OAAOjP,SACnBkP,EAAKzQ,EAAQ4F,OACbrF,EAAKvM,aAwBAyc,EAAK7K,GACZ8K,EAAUC,EAAW/K,GAAO,aAErB8K,EAAUE,EAAUC,GACtB7Q,EAAQiC,GAAGyD,MACRoL,EAAcD,EAAcD,WAKxBA,QAGJG,EACAC,EAHJhR,EAAQiC,GAAGwD,MACPsD,EAAO4C,EAAOiF,EAAWK,KACzBF,EAAcG,GAAc,EAAON,IAAa7H,EAAO,EACvDiI,EAAcE,GAAc,EAAMN,IAAoB,EAAP7H,GACjDgI,GAAeC,KACjBJ,EAAWO,EAAMP,EAAUI,YAGxBJ,EAdwCQ,CAAKR,GAClD/E,EAAK1R,MAAMkX,sBAAwB9K,EAAQ,SAAQuK,QACnDF,IAAaE,GAAevQ,EAAKlN,aAc5B8d,EAAMP,EAAUU,OACjBC,EAASX,EAAWY,EAASF,GAC7BG,EAAOlC,WACbqB,GAAYjF,EAAO8F,GAAQzU,GAAKC,GAAIsU,GAAUE,IAAS,KAAOH,EAAY,GAAK,YAuBxEX,EAAW/K,EAAO8L,OACnBd,EAAWjF,EAAOqD,EAAUpJ,EAAQ,IAa5BA,EAbwCA,EAerC,YADTnL,EAAUoE,EAAVpE,QACqB4U,IAAaC,EAAU1J,GAAO,IAAS,GAAKnL,EAAQ6U,EAAU1J,IAAU,WAd9F8L,WAMKd,GACR/R,EAAQ8S,WAAa3R,EAAQiC,GAAGuD,MAClCoL,EAAWnT,GAAMmT,EAAU,EAAGjF,EAAO4D,IAAeF,cAE/CuB,EAVWgB,CAAKhB,GAAYA,WAE5BK,QACDlO,EAAOwD,EAAQ,eACdxL,GAAK8Q,GAAM9I,GAAQhI,GAAKoN,GAAOpF,GAAQ4I,EAAO6D,GAAW,aAYzDgC,EAAS1U,UACT6T,EAAW7T,EAAMoN,EAAYqD,WAAWsE,SAAW,IAAKhT,EAAQ8S,oBAEhEpB,WACAvQ,EAAQgC,MAAMC,GxEtHH,IwEsHiBpD,EAAQiT,2BAEpCZ,EAAcpU,EAAK8T,GAC1BA,EAAWla,EAAYka,GAAYK,IAAgBL,MAC7CG,GAAsB,IAARjU,GAAgB6O,EAAOiF,GAAYjF,EAAO6F,GAAS,IACjER,GAAsB,IAARlU,GAAiB6O,EAAOiF,GAAYjF,EAAO6F,GAAS,WACjET,GAAeC,QAEjB,CACLxI,iBA7GA6H,EAAanG,EAAYmG,WACzBjQ,EAAG,CAACnN,EAAec,EAAeF,EAAeD,GAAgB0c,IA6GjEyB,cApGYC,EAAMpM,EAAOsG,EAAMtN,OAErB+C,EACFiP,EAFHL,MACK5O,EAAQ3B,EAAQgC,MAAhBL,IACFiP,EAAWK,IACbe,IAASpM,IACXyK,EAAW9O,SACXmP,EAAUS,EAAMP,EAAiBhL,EAAPoM,IAAe,IAE3CrQ,ExEpCgB,GwEqChBpB,EAAKpN,EAAYyS,EAAOsG,EAAM8F,GAC9B3B,EAAWjb,MAAMwQ,EAAO,WACtBjE,ExExCY,GwEyCZpB,EAAKnN,EAAawS,EAAOsG,EAAM8F,GACL,SAAtBnT,EAAQ8S,WAAwBK,IAAS9F,GAAQ0E,IAAaK,IAChE/G,EAAYqD,WAAW0E,GAAU/F,EAAP8F,EAAc,IAAM,KAAK,EAAOpT,GAE1DA,GAAYA,QAqFlB6R,KAAAA,EACAC,UAAAA,EACAS,MAAAA,EACA5P,kBAvDAmP,EAAUO,KACVZ,EAAW9O,UAuDXiM,iBArDeoD,WACT1J,EAASgD,EAAYhD,OAAO+F,MAC9BrH,EAAQ,EACRsM,EAAcC,EAAAA,EACThZ,EAAI,EAAGA,EAAI+N,EAAOjS,OAAQkE,IAAK,KAChC0M,EAAaqB,EAAO/N,GAAGyM,MACvBkD,EAAW7L,GAAI0T,EAAW9K,GAAY,GAAQ+K,QAChD9H,GAAYoJ,SACdA,EAAcpJ,EACdlD,EAAQC,SAKLD,GAwCP+K,WAAAA,EACAM,YAAAA,EACAO,SAAAA,EACAjB,OAAAA,EACAW,cAAAA,EACAZ,WAAAA,wBC1IuBtQ,EAASkK,EAAarL,OAW3CuT,EACAC,EACA3E,EAZItN,EAAOL,GAAeC,GAAtBI,GACAkS,EAASpI,EAAToI,KACArB,EAA0BqB,EAA1BrB,YAAaO,EAAac,EAAbd,WACWtH,EAAYhD,OAApC8G,IAAAA,SAAUD,IAAAA,UACZwE,EAASvS,EAAQiC,GAAGwD,IACpB+M,EAAUxS,EAAQiC,GAAGuD,IACrBiN,EAAUhd,EAAMid,GAAa,GAC7BC,EAAUld,EAAMid,GAAa,GAC/BE,EAAY/T,EAAQzJ,OAAS,EAC7Byd,EAAYD,WAQP5F,IACPoF,EAAarE,GAAU,GACvBsE,EAAUxT,EAAQwT,QAClB3E,EAAU7O,EAAQ6O,YACZ9H,EAAQnI,GAAMmV,EAAW,EAAGR,EAAa,GAC3CxM,IAAUgN,IACZA,EAAYhN,EACZ0M,EAAKhC,uBAeAwC,EAAOhC,EAAaiC,EAAUC,EAAM5Q,EAAUxD,OAC/CoT,EAAOe,EAAWjC,EAAcmC,EAAOnC,GAC7C5G,EAAYsG,OAAOsC,OAAOC,GAAYC,EAAOV,EAAK3B,WAAWqB,GAAM,GAAQlB,EAAa1O,EAAU,WAChG8Q,EAASZ,EAAK9E,QAAQ8E,EAAKrB,gBAC3BrS,GAAYA,eAmBP8T,EAAYxG,EAAM4E,OClEMpT,EAAGC,EDmE5BR,EAASkV,IAAY5E,IAAa,EAAIC,GACtCsE,EAAOmB,EAAiBP,EAAYzV,GAAU+O,GAAQ,EAAI,GAAI0G,UACtD,IAAVZ,IAAeQ,ICrEY9U,EDsELuT,ICtEQtT,EDsEO6T,GAAUtF,GCtEdkH,EDsEqB,ECrErDnW,GAAIS,EAAIC,GAAKyV,GDyEXtC,EAAckB,EAAOZ,EAAKY,GAHtB9F,EAAO,EAAI2F,aAKfsB,EAAiBnB,EAAMnJ,EAAMwK,OAE5Bhe,SADJ2Y,KACI3Y,EAAMwc,IACRG,EAAO,GAAY3c,EAAP2c,EAEZA,EADE9U,GAAQ,EAAG8U,EAAMnJ,GAAM,IAAS3L,GAAQ7H,EAAKwT,EAAMmJ,GAAM,GACpDxE,EAAQ8F,EAAOtB,IAElBO,EACKF,GAAW5E,IAAauE,EAAOA,EAAO,IAAMI,EAAa1E,GAAWA,GAAW0E,EAC7EvT,EAAQ6C,OACVsQ,EAAO,EAAI3c,EAAM,GAEhB,EAIPge,GAAerB,IAASnJ,IAC3BmJ,EAAOK,EAAUL,EAAOxE,EAAQ8F,EAAOzK,IAASmJ,EAAOnJ,GAAQ,EAAI,MAIvEmJ,GAAQ,EAEHA,WAEAH,QACHxc,EAAM+c,EAAa1E,SACnBD,KAAc8E,GAAUF,KAC1Bhd,EAAM+c,EAAa,GAEdtV,GAAIzH,EAAK,YAET+b,EAAKxL,UACR2M,EACKvE,IAAapI,EAAQwM,GAAcxM,EAAQ,EAAIwM,EAAa,IAAM,EAEpExM,WAEA4H,EAAQF,UACR7P,GAAMgQ,IAAaH,EAAOI,EAAUJ,EAAM,EAAGuE,cAE7CyB,EAAO1N,UACT6H,MACH7H,EAAQ1I,GAAQ0I,EAAOwM,EAAa1E,EAAS0E,EAAa,GAAKA,EAAa,EAAIxM,EAChFA,EAAQ7I,GAAM6I,EAAQ8H,IAEjB9H,WAEAqN,EAAOnC,GACRyC,EAAUjB,EAAK9E,QAAQsD,UACtB0B,EAAU/U,GAAM8V,EAAS,EAAG1B,KAAY0B,WAExCL,EAAStN,GACZA,IAAUgN,IACZC,EAAYD,EACZA,EAAYhN,YAMP6H,WACC/W,EAAYmI,EAAQpE,QAAUoE,EAAQsH,mBAEzC,CACLqC,iBA3HAwE,IACA5M,EAAG,CAACvM,EAAeD,GAAgBoZ,IA2HnCiF,YA/GUuB,EAASC,EAAgB7U,OAC7BoT,WAkBOwB,OACT5N,EAAQgN,OAEDc,EAAWvW,EADlB1G,EAAS+c,MACmBA,EAAQG,MAAM,oBAAsB,GAAzDD,OAAWvW,OACF,MAAduW,GAAmC,MAAdA,EACvB9N,EAAQuN,EAAiBP,QAAgBc,IAAavW,GAAU,IAAKyV,GAAW,GACzD,MAAdc,EACT9N,EAAQzI,EAASqQ,GAASrQ,GAAUsV,GAAQ,GACrB,MAAdiB,IACT9N,EAAQ+M,GAAQ,KAGlB/M,EAAQ2M,EAASiB,EAAU/V,GAAM+V,EAAS,EAAG3B,YAExCjM,EAhCMgO,CAAMJ,GACf3U,EAAQgV,UACVf,EAAOd,GAAM,GAAM,EAAMnT,EAAQ0M,MAAO3M,IAG3B,GADPgH,EAAQwL,EAAKY,MACAM,EAAK/B,WAAakD,GAAkB7N,IAAUgN,KAC/DM,EAAStN,GACT0M,EAAKP,KAAKC,EAAMpM,EAAOiN,EAAWjU,KAwGtCkU,OAAAA,EACAL,QAAAA,EACAE,QAAAA,EACAD,YAAAA,EACAb,OAAAA,EACAqB,SAAAA,EACAY,kBAfgB5H,UACTA,EAAO2G,EAAYD,GAe1BpF,QAAAA,EACA8F,OAAAA,EACAL,OAAAA,EACAxF,SAAAA,oBElImBzN,EAASkK,EAAarL,OAOvCkV,IANuBhU,GAAeC,GAAlCI,IAAAA,GAAIzK,IAAAA,KAAM4K,IAAAA,KACV/I,EAAkBqH,EAAlBrH,QAAS6O,EAASxH,EAATwH,KACT6B,EAAyBgC,EAAzBhC,SAAUqF,EAAerD,EAAfqD,WACdyG,EAAU9L,EAAS+D,OACnBC,EAAOhE,EAASgE,KAChBC,EAAOjE,EAASiE,KAEdF,EAAS,YAKNe,QAyBCiF,EAxBJpT,EAAQoN,SACLC,GAASC,IA6BhB6H,EAAUja,GAAO,MAAOvC,EAAQyU,QAChCC,EAAO+H,GAAY,GACnB9H,EAAO8H,GAAY,GACnBF,GAAU,EACVjc,EAAOkc,EAAS,CAAC9H,EAAMC,IACvBjU,EAAO8b,EAASrb,GAAyB,WAAnBkG,EAAQoN,QAAuB/D,EAAS0D,QAAU5L,EAAQkG,SA9B5EgG,GAAQC,IACLF,EAAOC,OACVtS,GAAa,CAACsS,EAAMC,GAAO5I,GAAe2E,EAAS2D,KAAK/K,IACxDmL,EAAOC,KAAOA,EACdD,EAAOE,KAAOA,EAeV8F,EAAO1E,EAAP0E,GACR7R,EAAG,CAACnN,EAAeG,EAAaS,EAAeD,EAAeM,GAAiBkN,GAC/EzL,EAAKwW,EAAM,QAAS1W,EAAMwc,EAAI,KAAK,OAAM,IACzCtc,EAAKuW,EAAM,QAASzW,EAAMwc,EAAI,KAAK,OAAM,IAhBrC1R,E5E1B4B,iB4E0BD2L,EAAMC,IAEnC5R,GAAQyZ,GAA4B,IAAnBnV,EAAQoN,OAAmB,OAAS,cAwBhDgI,EAAYC,UAEZ9Y,qBADyB5D,EAAQ2c,WAASD,EAAQ1c,EAAQ0U,KAAO1U,EAAQ2U,sHAA8HtN,EAAQuV,WC3EtM,0GD8EThT,QACDwE,EAAQ5F,EAAQ4F,MAChBiN,EAAYtF,EAAWoF,UACvB0B,EAAY9G,EAAWkF,UACvB6B,GAAyB,EAAbzB,GAAkBjN,EAAQiN,EAAYxM,EAAKkO,KAAOlO,EAAK6F,KACnEsI,GAAyB,EAAbH,GAA0BA,EAARzO,EAAoBS,EAAKoO,MAAQpO,EAAK8F,KAC1ED,EAAKwI,SAAW7B,EAAY,EAC5B1G,EAAKuI,SAAWL,EAAY,EAC5Bza,GAAasS,EAAMxI,GAAY4Q,GAC/B1a,GAAauS,EAAMzI,GAAY8Q,GAC/BjU,E5EjEgC,iB4EiEL2L,EAAMC,EAAM0G,EAAWwB,SAE7C,CACLpI,OAAAA,EACAzD,iBA3DAwE,IACA5M,EAAGvM,EAAemZ,IA2DlBnN,mBAvCIkU,EACF7Y,GAAO8Y,GAEPxa,GAAgB,CAAC0S,EAAMC,GAAOnI,yBE9CXhE,EAASkK,EAAarL,OAMzC8V,EACAC,IANuB7U,GAAeC,GAAlCI,IAAAA,GAAIzK,IAAAA,KAAM4K,IAAAA,KACZE,EAAWD,GAAgB3B,EAAQ4B,SAAUT,EAAQiS,GAAGtc,KAAKqK,EAAS,cAgE5DiB,OACNmL,EAAQlE,EAARkE,IACRA,GAAOjS,GAAMiS,EAAK,QAAmB,IAAPnL,OAC9BV,E9EpDkC,mB8EoDLU,KAlEvBY,EAAapB,EAAboB,SACAqG,EAAagC,EAAbhC,SACAsD,EAAa3M,EAAb2M,SAGJtK,EAAsB,UAAbsK,WASJqJ,EAAWC,OACZ1a,EAAO0a,EAAW,QAAU,OAC5BC,EAAS7M,EAAS9N,GACpB2a,IACFnb,GAAamb,EAAQxR,GAAe2E,EAASC,MAAMrH,IACnDlH,GAAamb,EAAQrR,GAAY7E,EAAQwH,KAAKjM,IAC9CzE,EAAKof,EAAQ,QAASD,EAAWxT,EAAQ+K,aAoBpCA,IACHxK,KAAcqI,EAAYhD,OAAO8G,aACnCvN,EAASrL,OAAOyJ,EAAQmW,eACxBJ,EAAUD,EAAUzT,GAAS,EAC7BX,EAAKlM,aAGAiN,EAAM2T,YAAAA,IAAAA,GAAS,GACjBpT,MACHpB,EAASa,QACTf,EAAKjM,IAEP4M,EAAS+T,WAEFC,IACFhU,IACEyT,GAAYC,EAGftT,GAAM,GAFN+K,cAWG8I,QACDxP,EAAQuE,EAAYhD,OAAOC,MAAMnH,EAAQ4F,OAC/CnF,EAASkB,IAAIgE,IAAUhL,GAAagL,EAAMG,MAAOkD,KAA4BnK,EAAQ4B,gBAEhF,CACL+H,iBAlEIgD,IACFqJ,GAAW,GACXA,GAAW,kBAeL3O,EAASgC,EAAThC,KACJrH,EAAQuW,cACVzf,EAAKuQ,EAAM,wBAAyB,SAACxK,GACnCiZ,EAAqB,eAAXjZ,EAAEvF,KACZ+e,MAGArW,EAAQwW,cACV1f,EAAKuQ,EAAM,mBAAoB,SAACxK,GAC9BkZ,EAAqB,YAAXlZ,EAAEvF,KACZ+e,MAGJ9U,EAAG,CAACjN,EAAYc,EAAcL,GAAgB6M,EAASiB,QACvDtB,EAAGjN,EAAYgiB,GA5BbG,GACCpU,GAAUmL,MA+DbxM,QAASY,EAASc,OAClB8K,KAAAA,EACA/K,MAAAA,EACAO,SAAAA,mBCzFkB7B,EAASkK,EAAarL,OAClCuB,EAAOL,GAAeC,GAAtBI,YAOCmV,EAAMC,GACbtL,EAAYhD,OAAOnQ,QAAQ,SAAC4O,OACpBkI,EAAMlV,GAAMgN,EAAMgB,WAAahB,EAAMG,MAAO,OAC9C+H,GAAOA,EAAI4H,KACbC,EAAOF,EAAQ3H,EAAKlI,cAIjB+P,EAAOF,EAAQ3H,EAAKlI,GAC3BA,EAAMxL,MAAM,aAAcqb,iCAAwC3H,EAAI4H,SAAU,IAAI,GACpFlb,GAAQsT,EAAK2H,EAAS,OAAS,UAE1B,CACLhN,iBAlBI3J,EAAQ0W,QACVnV,EAAG7L,EAAuBkB,EAAMigB,GAAQ,IACxCtV,EAAG,CAACnN,EAAeY,EAAeD,GAAgB6B,EAAM8f,GAAO,MAiBjE1V,QAASpK,EAAM8f,GAAO,qBCpBHvV,EAASkK,EAAarL,OAIvC4B,EACAkV,IAJiB5V,GAAeC,GAA5BI,IAAAA,GAAIG,IAAAA,KACJ+R,EAASpI,EAAToI,KACArB,EAAyCqB,EAAzCrB,YAAaO,EAA4Bc,EAA5Bd,SAAUN,EAAkBoB,EAAlBpB,uBAOtB4B,EAAOhC,EAAa1O,EAAUxD,EAAUgX,OAiCxB9M,EAhCjB1T,EAAQ6b,IACV4E,EAAW,EACfzT,EAAWA,IA8BY0G,EA9BgB7L,GAAI6T,EAAc1b,GA+BlD0H,GAAIgM,EC9Cc,IACD,MDexB6M,EAAiB/W,EACjBkX,IACArV,EAAWD,GAAgB4B,EAAU2T,EAAY,SAAC9U,OAC1C2P,EAAWK,IAEXlI,GADS3T,GAAS0b,EAAc1b,IAuC1B4gB,EAvC0C/U,GAwChDgV,EAAepX,EAAfoX,YACYA,EAAWD,GAAK,EAAInZ,KAAKqZ,IAAI,EAAIF,EAAG,IAxC/B/E,KAAiB4E,EACxCvD,EAAK5B,UAAUE,EAAW7H,GACtB/I,EAAQiC,GAAGuD,MAAWoQ,GAAsB1E,MAC9C2E,GCzBuB,GD0BnB5Y,GAAI8L,GC5BqB,KDoCnBuI,EAPDJ,GAAc,GAQ3B4B,EAAOtB,GAAUF,GCpCU,IDoCmB,MAAM,MALjD,GACH/Q,EAAKtM,GACLwM,EAASrL,iBAKF2gB,QACDnF,EAAWK,IACXrL,EAAQ0M,EAAK9E,QAAQoD,GACtB1T,GAAQ0I,EAAO,EAAG5F,EAAQ/K,OAAS,IACtCqd,EAAK5B,UAAU4B,EAAKnB,MAAMP,EAAkB,EAARhL,IAAY,GAElD+P,GAAkBA,IAClBpV,EAAKrM,YAKE4hB,IACHrV,GACFA,EAASc,kBAGJA,IACHd,IAAaA,EAASoB,aACxBiU,IACAC,WAOG,CACLvN,iBAvDApI,EAAGjN,EAAY2iB,GACf1V,EAAG,CAACvM,EAAeD,GAAgB2N,IAuDnC1B,QAASiW,EACThD,OAAAA,EACAvR,OAAAA,kBE/DiBvB,EAASkK,EAAarL,OAOrCsX,EACAC,EACAC,EACAC,EACAC,EAEAC,EACA9B,EACA1Z,IAd+B+E,GAAeC,GAA1CI,IAAAA,GAAIG,IAAAA,KAAM5K,IAAAA,KAAMyJ,IAAAA,OAChB4C,EAAUhC,EAAVgC,MACAsQ,EAA6BpI,EAA7BoI,KAAM9B,EAAuBtG,EAAvBsG,OAAQjD,EAAerD,EAAfqD,WACdpF,EAAU+B,EAAYhC,SAAtBC,MACA5B,KAAoB2D,EAAY1D,WAAhCD,QAASoF,IAAAA,OACTsF,EAA+BqB,EAA/BrB,YAAaC,EAAkBoB,EAAlBpB,cAMjBuF,GAAW,WAYNzJ,QACCF,EAASjO,EAATiO,KACR4J,GAAS5J,GACTwJ,EAAkB,SAATxJ,WAEF6J,EAAcjb,OAGXkb,EACFC,EAHRL,GAAiB,EACZ9B,IACKkC,EAAW/X,EAAX+X,OACFC,EAAUC,EAAapb,MACRkb,IAAWpe,GAAQkD,EAAEV,OAAQ4b,MAC9BC,GAAYnb,EAAEqZ,SAC3BzC,EAAK/B,SAUR9U,GAAQC,GAAG,IATXV,EAAS6b,EAAU1O,EAAQiH,OAC3BmH,EAAWvU,EAAMC,GjF1CL,GiF2CZoU,EAAgB,KAChB1gB,EAAKqF,EAAQoO,GAAqB2N,EAAe9N,IACjDtT,EAAKqF,EAAQqO,GAAmB2N,EAAa/N,IAC7CqJ,EAAK/Q,SACLiP,EAAOjP,SACP0V,EAAKvb,eAOJqb,EAAcrb,OA2DFA,EACOwb,EACpBC,EAKmBzb,EAjEpBsG,EAAMC,GjFvDS,KiFwDlBD,EAAML,IjFxDY,GiFyDlBpB,ElF5CoB,SkF8ClB7E,EAAE0b,aACAb,GACFjE,EAAK5B,UAAUyF,EAAyBkB,EAAU3b,IAuFvC+a,GAAYzW,EAAQiC,GAAGuD,IpBxJlB,EoBwJsC,IAtFhD8R,EpBjEc,IoBiEJC,EAAS7b,GACnB8b,EAAcf,KAAcA,EAAWvF,MACzCoG,GAAWE,IACbP,EAAKvb,GAEP8a,GAAiB,EACjBjW,ElFtDsB,YkFuDtB9E,GAAQC,IAoDLuB,GAAIoa,EADc3b,EAlDMA,IAmDJuB,GAAIoa,EAAU3b,GAAG,MARzBA,EA1CQA,EA2CDwb,EAAerY,EAAjC4Y,iBACFN,EAAQ9gB,EAAS6gB,GACjBQ,EAAQP,GAASD,EAAWQ,OAAS,EACrCC,GAASR,EAAQD,EAAWS,OAAST,IAAe,GA9CtDX,EA+CGtZ,GAAIoa,EAAU3b,KAAOob,EAAapb,GAAKic,EAAQD,GA9ClDjc,GAAQC,cAILsb,EAAYtb,OAuBPA,EACNkc,EACA9G,EAxBF9O,EAAMC,GjF7EU,KiF8ElBD,EAAML,IjFhFQ,GiFiFdpB,ElFhEuB,YkFkErBgW,IAmBEqB,WAuBiBlc,MACnBsE,EAAQiC,GAAGwD,MAAUgR,EAAU,KAC3B7U,EAAO2V,EAAS7b,MAClBkG,GAAQA,EpBjIU,WoBkIbyV,EAAU3b,GAAKkG,SAGnB,EA9BUiW,CADLnc,EAjBLA,GAmBDoV,WA+BoB8G,UACnB3G,IAAgBrT,GAAKga,GAAYhb,GAAIK,GAAI2a,IAAa/Y,EAAQiZ,YAAc,KAAMxB,EAASnE,EAAAA,EAAWjI,EAAYkG,OAAOf,YAAcxQ,EAAQkZ,eAAiB,IAhCnJC,CAAmBJ,GACjClW,EAAS7C,EAAQ6C,QAAU7C,EAAQoZ,aACrC3B,EACF/I,EAAWuF,OAAOhC,GACT9Q,EAAQiC,GAAGyD,IACpB6H,EAAW0E,GAAGtG,EAAO/N,GAAKga,IAAa,EAAIlW,EAAS,IAAM,IAAMA,EAAS,IAAM,KACtE1B,EAAQiC,GAAGuD,KAAUiR,GAAY/U,EAC1C6L,EAAW0E,GAAGf,GAAc,GAAQ,IAAM,KAE1C3D,EAAW0E,GAAG1E,EAAW0F,OAAOnC,IAAc,GA3B9CrV,GAAQC,IAEV0D,EAAOpE,EAAQoO,GAAqB2N,GACpC3X,EAAOpE,EAAQqO,GAAmB2N,GAClCT,GAAW,WAEJ2B,EAAQxc,IACVgZ,GAAY8B,GACf/a,GAAQC,GAAG,YAGNub,EAAKvb,GACZ2a,EAAgBD,EAChBA,EAAY1a,EACZya,EAAelF,aAsCRoG,EAAU3b,EAAGyc,UACbC,EAAQ1c,EAAGyc,GAAcC,EAAQC,EAAa3c,GAAIyc,YAElDZ,EAAS7b,UACTS,GAAOT,GAAKS,GAAOkc,EAAa3c,aAEhC2c,EAAa3c,UACb0a,IAAc1a,GAAK2a,GAAiBD,WAEpCgC,EAAQ1c,EAAGyc,UACVrB,EAAapb,GAAKA,EAAE4c,eAAe,GAAK5c,UAAU6K,EAAQ4R,EAAa,IAAM,eAK9ErB,EAAapb,SACS,oBAAf6c,YAA8B7c,aAAa6c,oBAKlD7B,EAAQ5f,GACf4d,EAAW5d,QAEN,CACL0R,iBA5IA7S,EAAKwS,EAAOiB,GAAqBvT,EAAMoT,IACvCtT,EAAKwS,EAAOkB,GAAmBxT,EAAMoT,IACrCtT,EAAKwS,EpBxB0B,uBoBwBEwO,EAAe1N,IAChDtT,EAAKwS,EAAO,QAAS+P,EAAS,CAAE/O,SAAS,IACzCxT,EAAKwS,EAAO,YAAa1M,IACzB2E,EAAG,CAACnN,EAAeY,GAAgBmZ,IAwInC0J,QAAAA,EACA8B,6BAROjC,uBlBxJcvW,EAASkK,EAAarL,OAIzC7D,EACA0Z,IAJyB3U,GAAeC,GAApCI,IAAAA,GAAIzK,IAAAA,KAAMyJ,IAAAA,OACV8G,EAASlG,EAATkG,KACAK,EAAY2D,EAAY1D,UAAxBD,iBASCyG,QACCyL,EAAa5Z,EAAb4Z,SACJA,IACe,YAAbA,EAEF7e,GADAoB,EAASkL,EACU7C,GAAW,GAE9BrI,EAASoU,OAEXzZ,EAAKqF,EAAQ6O,GAAgB6O,aAGxB7Y,IACPT,EAAOpE,EAAQ6O,aAKRtC,QACDoR,EAAYjE,EAClBA,GAAW,EACX5e,EAAS,WACP4e,EAAWiE,aAGND,EAAUhd,GACZgZ,KACGtb,EAAMwQ,GAAalO,MACb6K,EAAQ,aAClBvG,EAAQiS,GAAG,KACF7Y,IAAQmN,EAAQ,eACzBvG,EAAQiS,GAAG,YAIV,CACLzJ,iBAzCAwE,IACA5M,EAAGvM,EAAegM,GAClBO,EAAGvM,EAAemZ,GAClB5M,EAAGjN,EAAYoU,IAuCf1H,QAAAA,EACA6W,iBAvBe5f,GACf4d,EAAW5d,uBmBVUkJ,EAASkK,EAAarL,SACbkB,GAAeC,GAAvCI,IAAAA,GAAIE,IAAAA,IAAK3K,IAAAA,KAAM4K,IAAAA,KACjBqY,EAAoC,eAArB/Z,EAAQga,SACzBjL,EAAS,GACThI,EAAQ,WAWHoH,IACP9C,EAAYhD,OAAOnQ,QAAQ,SAAC+hB,GAC1B9c,GAAS8c,EAAOhT,MAAOkE,IAAgBjT,QAAQ,SAACgiB,OAItCle,EAEAme,EALFvD,EAAM9a,GAAaoe,EAAMjP,IACzBmP,EAASte,GAAaoe,EAAMhP,IAC9B0L,IAAQsD,EAAKtD,KAAOwD,IAAWF,EAAKE,SAChCpe,EAAYgE,EAAQrH,QAAQ0hB,QAGlCtf,GADMof,EAAWrgB,GADXZ,EAASghB,EAAKI,kBACete,IAAgBd,GAAO,OAAQc,EAAW9C,GACtDqL,GAAM,gBAC7BwK,EAAOxW,KAAK,CAAE2hB,KAAAA,EAAMD,OAAAA,EAAQrD,IAAAA,EAAKwD,OAAAA,EAAQD,SAAAA,IACxCD,EAAKtD,KAAOlb,GAAQwe,EAAM,aAI7BH,GACFQ,aAGKvZ,IACP+F,EAAQ,EACRgI,EAAS,YAEFqC,KACPrC,EAASA,EAAOlV,OAAO,SAACoH,OAChBgJ,EAAWjK,EAAQ6O,UAAY7O,EAAQwa,cAAgB,GAAK,GAAK,SACnEvZ,EAAKgZ,OAAOlQ,SAAS5I,EAAQ4F,MAAOkD,IAC/BwQ,EAAKxZ,MAIJ7K,QACVqL,EAAIlN,YAGCkmB,EAAKxZ,OACJiZ,EAASjZ,EAATiZ,KACRnhB,EAASkI,EAAKgZ,OAAOhT,MAAOR,IAC5B3P,EAAKojB,EAAM,aAAc,SAACrd,aAUZoE,EAAMyZ,OACZT,EAAWhZ,EAAXgZ,OACR5c,GAAY4c,EAAOhT,MAAOR,IACrBiU,IACHre,GAAO4E,EAAKkZ,UACZze,GAAQuF,EAAKiZ,KAAM,IACnBxY,EAAKhM,EAAuBuL,EAAKiZ,KAAMD,GACvCvY,EAAKzM,IAEH8kB,GACFQ,IAnBAI,CAAO1Z,EAAiB,UAAXpE,EAAEvF,SAEhB,SAAU,OAAOY,QAAQ,SAACW,GACrBoI,EAAKpI,KACPkC,GAAamf,EAAMrhB,EAAMoI,EAAKpI,IAC9B8B,GAAgBuf,EAAe,QAATrhB,EAAiBoS,GAAqBC,gBAiBzDqP,IACHxT,EAAQgI,EAAO3Y,QACjBqkB,EAAK1L,EAAOhI,YAGT,CACL4C,iBA5EI3J,EAAQga,WACV7L,IACA5M,EAAGxM,EAAeiM,GAClBO,EAAGxM,EAAeoZ,GACb4L,GACHxY,EAAG,CAACnN,EAAeW,EAAeR,EAAac,GAAiB+b,KAwEpEpQ,QAAAA,wBCzEuBG,EAASkK,EAAarL,OAM3CgN,IAL+B9L,GAAeC,GAA1CI,IAAAA,GAAIG,IAAAA,KAAM5K,IAAAA,KAAMyJ,IAAAA,OAChB8H,EAAiCgD,EAAjChD,OAAQgB,EAAyBgC,EAAzBhC,SAAUqF,EAAerD,EAAfqD,WAClBE,EAA2BF,EAA3BE,SAAUqG,EAAiBvG,EAAjBuG,SAAU7B,EAAO1E,EAAP0E,GACpB1L,EAAY2D,EAAY1D,UAAxBD,QACFlP,EAAQ,YAOL2V,IACPnN,IACIhB,EAAQyH,YAAcY,EAAO8G,4BAiBzB/Y,EAAW+K,EAAX/K,OACAuC,EAA2BqH,EAA3BrH,QAAS6O,EAAkBxH,EAAlBwH,KAAMqH,EAAY7O,EAAZ6O,QACjB3V,EAAgC,WAAvB8G,EAAQyH,YAA2B4B,EAAS0D,QAAU1D,EAAShC,KACxEpJ,EAAM2Q,IAAaxY,EAAS+H,GAAK/H,EAASyY,GAEhD9T,GADAiS,EAAO9R,GAAO,KAAMvC,EAAQ8O,WAAYvO,GACrBqL,GAAM,WACzBxJ,GAAaiS,EAAMnI,GAAY2C,EAAKoT,QACpC7f,GAAaiS,EAAMjI,GAAkB/E,EAAQ6M,YAAcnJ,GAAM,WAAa,QACzE,IAAIpJ,EAAI,EAAGA,EAAI2D,EAAK3D,IAAK,KACtBugB,EAAK3f,GAAO,KAAM,KAAM8R,GACxBkJ,EAAShb,GAAO,SAAU,CAAE4f,MAAOniB,EAAQ8V,KAAMnX,KAAM,UAAYujB,GACnE7S,EAAWK,EAAOmG,MAAMlU,GAAG4N,IAAI,SAACpB,UAAUA,EAAMG,MAAMhF,KACtD8Y,GAAQnM,KAAwB,EAAVC,EAAcrH,EAAKwT,MAAQxT,EAAKe,OAC5DzR,EAAKof,EAAQ,QAAStf,EAAMyiB,EAAS/e,IACrCxD,EAAKof,EAAQ,UAAWtf,EAAMijB,EAAWvf,IACzCS,GAAa8f,EAAItW,GAAM,QACvBxJ,GAAamb,EAAQ3R,GAAM,OAC3BxJ,GAAamb,EAAQxR,GAAesD,EAASxG,KAAK,MAClDzG,GAAamb,EAAQrR,GAAY7F,GAAO+b,EAAMzgB,EAAI,IAClDS,GAAamb,EAAQ1R,IAAY,GACjChM,EAAMD,KAAK,CAAEsiB,GAAAA,EAAI3E,OAAAA,EAAQzH,KAAMnU,KApC/B2gB,GACAvZ,EpFzBkC,qBoFyBH,CAAEsL,KAAAA,EAAMxU,MAAAA,GAAS8P,EAAMnH,EAAQ4F,QAC9DxE,cAGKvB,IACHgM,IACF3Q,GAAO2Q,GACPxU,EAAMN,QAAQ,SAACgjB,GACb3a,EAAO2a,EAAKhF,OAAQ,yBAEtBhgB,EAAMsC,GACNwU,EAAO,eA2BFqM,EAAQ5K,GACf2E,MAAO3E,GAAQ,YAERoL,EAAUpL,EAAM5R,OACfzG,EAAWoC,EAAXpC,OACFmE,EAAMwQ,GAAalO,GACrBse,GAAY,EACZ5gB,IAAQmN,EAAQ,cAClByT,IAAa1M,EAAOrY,EACXmE,IAAQmN,EAAQ,aACzByT,KAAc1M,EAAOrY,GAAUA,EACd,SAARmE,EACT4gB,EAAW,EACM,QAAR5gB,IACT4gB,EAAW/kB,EAAS,GAEhB8kB,EAAO1iB,EAAM2iB,GACfD,IACFtf,GAAMsf,EAAKhF,QACX9C,MAAO+H,GACPve,GAAQC,GAAG,aAGNyL,EAAMvB,UACNvO,EAAMkW,EAAW+F,OAAO1N,aAExBxE,QAUG2T,EATJ7I,EAAO/E,EAAM2M,GAAS,IACtBtM,EAAOL,EAAM2M,KACf5H,IAEFhQ,GADQ6Y,EAAW7I,EAAX6I,OACY7P,IACpB1L,GAAgBub,EAAQtR,IACxB7J,GAAamb,EAAQ1R,IAAY,IAE/BmE,IAEF5P,EADQmd,EAAWvN,EAAXuN,OACS7P,IACjBtL,GAAamb,EAAQtR,IAAe,GACpC7J,GAAamb,EAAQ1R,GAAW,KAElC9C,EpFvGoC,qBoFuGL,CAAEsL,KAAAA,EAAMxU,MAAAA,GAAS6U,EAAM1E,SAEjD,CACLnQ,MAAAA,EACAmR,iBA3FAwE,IACA5M,EAAG,CAACvM,EAAeD,GAAgBoZ,GACnC5M,EAAG,CAACjN,EAAYe,GAAiBkN,IA0FjCvB,QAAAA,EACAsH,MAAAA,EACA/F,OAAAA,kBlBzHiBpB,EAASkK,EAAarL,OACjCgN,EAAS3B,EAAYhC,SAArB2D,KACFrN,EAAS,YACNgK,QA6BD1J,EACEsB,EA7BRJ,EAAQ8G,QAAQ/P,QAAQ,SAACiE,OAiBbiM,EAhBTjM,EAAOif,WAgBEhT,EAhBejM,EAAOiM,QAiBjCjH,EAASiH,GAAQlQ,QAAQ,SAACmjB,OACnBpb,EAAQiB,GAAema,GACvBlf,EAASkf,IAAala,EAAUiH,EAASjH,EAC/ClB,EAAMsB,GAAGjN,EAAY,SAACyS,EAAOsG,EAAM8F,GACjChX,EAAOiX,GAAGjX,EAAOiH,GAAGwD,IAAQuM,EAAOpM,KAErCpH,EAAOpH,KAAK0H,QArBVD,EAAQsH,eAyBNrH,EAAQiB,GAAeC,IACrBI,EAAOtB,EAAPsB,IACL9M,EAAa4kB,GAChB9X,EAAGzM,EAAqB+kB,GACxBtY,EAAG,CAACnN,EAAeY,GAAgBuN,GACnC5C,EAAOpH,KAAK0H,GACZA,EAAMyB,KAAKnM,EAA0B4L,EAAQ8G,mBA3BtCjH,IACPrB,EAAOzH,QAAQ,SAAC+H,GACdA,EAAMe,YAER9K,EAAMyJ,YAyBC4C,IACPxH,GAAaiS,EAAMjI,GAAkB/E,EAAQ6M,YAAcnJ,GAAM,WAAa,aAEvE2V,EAAQvS,GACf3F,EAAQiS,GAAGtM,EAAMC,gBAEV8S,EAAU/S,EAAOjK,GACpBxE,EAAS+S,GAAcL,GAAalO,MACtCwc,EAAQvS,GACRlK,GAAQC,UAGL,CACL8M,MAAAA,EACA3I,QAAAA,EACAsa,mBArCAta,IACA2I,sBmB9BkBxI,EAASkK,EAAarL,OAClClJ,EAASoK,GAAeC,GAAxBrK,KACOykB,EAAgBvb,EAAvBwb,MACFA,EAAQhkB,EAAS+jB,GAAeA,EAAcA,GAAe,GAC/DE,EAAW,WAMNC,EAAQ7e,OAEL8e,EAEFpe,EAQakV,EAXjB5V,EAAE0b,aAEE9F,GADEkJ,EAAW9e,EAAX8e,QACmB,EACrBpe,EAAYD,GAAOT,GACrBuB,GAAIud,IAAWH,EAAMzd,KAAO,IAAMR,EAAYke,GAAYD,EAAMI,OAAS,KAC3Eza,EAAQiS,GAAGX,EAAY,IAAM,KAC7BgJ,EAAWle,GAKMkV,EAHLA,EAIRzS,EAAQ6b,eAAgB1a,EAAQgC,MAAMC,GpFxB5B,KoFwB6F,IAAnDiI,EAAYqD,WAAWmF,YAAYpB,IAJjE7V,GAAQC,UAMjC,CACL8M,iBApBI6R,GACF1kB,EAAKuU,EAAYhC,SAASC,MAAO,QAASoS,EAAStR,qBCPpCjJ,EAASkK,EAAarL,OACjCuB,EAAOL,GAAeC,GAAtBI,GACAyL,EAAS3B,EAAYhC,SAArB2D,KAEF8O,EADW9b,EAAT+b,OACiB/b,EAAQsH,sBASxBuQ,EAAQhC,GACXiG,GACF/gB,GAAaiS,EAAM9H,GAAW2Q,EAAW,MAAQ,gBAG9C,CACLlM,iBAbImS,IACF/gB,GAAaiS,EAAM/H,GAAa,GAChC4S,GAASxM,EAAY2Q,SAAShZ,YAC9BzB,EAAG/L,EAAqBoB,EAAMihB,GAAS,IACvCtW,EAAG9L,EAAsBmB,EAAMihB,GAAS,MAU1CA,QAAAA,MCtBSoE,GAAW,CACtB3kB,KAAM,QACNwW,KAAM,SACNpB,MAAO,IACPuG,mBAAmB,EACnBpE,QAAS,EACTnF,aAAa,EACb0D,QAAQ,EACR3F,YAAY,EACZ7F,SAAU,IACV2U,cAAc,EACdC,cAAc,EACdL,eAAe,EACfyD,UAAU,EACVsC,OAAQ,gCACRjO,MAAM,EACNpB,UAAW,MACX7D,YAAY,EACZ8J,WAAW,EACX7J,eAAgB,6CAChB8S,MAAM,EACNpjB,Q9BIqB,CACrBsO,MAAOzB,GACPwL,MAAOvL,GACP2H,OAAQzH,GACR2P,MAAO1P,GACPyH,KAAMxH,GACNyH,KAAMxH,GACN2B,WAAY1B,EACZ0I,KAtBsC1I,WAuBtCsU,QAjB8B5c,gB8BK9B+J,KCxBkB,CAClB6F,KAAM,iBACNC,KAAM,aACNsI,MAAO,oBACPF,KAAM,mBACNnN,OAAQ,iBACRyS,MAAO,gBACPxN,KAAM,iBACN/K,MAAO,iBACPmL,SAAU,WACV3G,MAAO,QACP2T,OAAQ,uBACRhR,WAAY,sBCTEuS,GAAKhb,EAASkK,EAAarL,OACjCuB,EAAOL,GAAeC,GAAtBI,SAgBD,CACLoI,iBAfApI,EAAG,CAACnN,EAAeW,GAAgB,WACjCkC,EAAS,WACPoU,EAAYhD,OAAO/M,MAAM,wBAAyB0E,EAAQ0M,YAAW1M,EAAQkc,aAcjF3lB,eAVawQ,EAAOqV,OACZ9S,EAAU+B,EAAYhC,SAAtBC,MACRhO,GAAMgO,EAAO,SAAU9L,GAAKtB,GAAKoN,GAAOoG,SACxCzY,EAAS,WACPmlB,IACA9gB,GAAMgO,EAAO,SAAU,OAMzB5G,OAAQ1L,YCpBI8P,GAAM3F,EAASkK,EAAarL,OAItCqc,EAHIvlB,EAASoK,GAAeC,GAAxBrK,KACA2c,EAAqBpI,EAArBoI,KAAM/E,EAAerD,EAAfqD,WACN1B,EAAS3B,EAAYhC,SAArB2D,cAuBCtK,IACP9L,EAAM,aAaCA,EAAM0lB,GACbhhB,GAAM0R,EAAM,aAAcsP,SAErB,CACL3S,iBAtCA7S,EAAKkW,EAAM,gBAAiB,SAACnQ,GACvBA,EAAEV,SAAW6Q,GAAQqP,IACvB3Z,IACA2Z,QAoCJ9lB,eAhCawQ,EAAOqV,OACdnK,EAAcwB,EAAK3B,WAAW/K,GAAO,GACrCgL,EAAW0B,EAAKrB,cAChB1F,WAaU3F,OACRwV,EAAgBvc,EAAhBuc,eACJpb,EAAQiC,GAAGuD,KAAU4V,EAAa,KAC9BlP,EAAOqB,EAAWuG,UAAS,GAC3Bze,EAAMkY,EAAWsE,YACV,IAAT3F,GAAuB7W,GAATuQ,GAAwBvQ,GAAR6W,GAAyB,IAAVtG,SACxCwV,SAGJvc,EAAQ0M,MAtBD8P,CAASzV,GACY,GAA/B3I,GAAI6T,EAAcF,IAA2B,GAATrF,GACtC9V,eAAmB8V,QAAW1M,EAAQkc,QACtCzI,EAAK5B,UAAUI,GAAa,GAC5BoK,EAAcD,IAEd3I,EAAK7B,KAAK7K,GACVqV,MAuBF1Z,OAAAA,GC0EO+Z,wBAhHGtgB,EAAQ6D,QACbC,MAAQiB,UACRkG,WAAa,QACbjE,MAAQF,E1FdM,Q0FedgF,QAAU,QACVyU,SAAW,QACXC,YAAc,GACbtV,EAAOzP,EAASuE,GAAUc,GAAM7B,SAAUe,GAAUA,EAC1DwB,GAAO0J,EAASA,uBACXA,KAAOA,EACZrH,EAAUtF,EAAM,GAAIuhB,GAAUW,EAAQC,SAAU7c,GAAW,QAEzDtF,EAAMsF,EAAS8c,KAAK/H,MAAMjZ,GAAauL,EAAM3J,KAC7C,MAAOb,GACPc,IAAO,EAAO,qBAEX+e,SAAW1c,6BAElB2J,MAAA,SAAMoT,EAAYvL,cACRrO,EAAmC6Z,KAAnC7Z,MAAmBkI,EAAgB2R,KAA5B5V,kBACfzJ,GAAOwF,EAAMC,GAAG,C1F/BG,EAKE,I0F0BkB,oBACvCD,EAAML,I1FhCa,Q0FiCdma,YAAc5R,OACd6R,YAAc1L,GAAcwL,KAAKE,cAAgBF,KAAK5Z,GAAGyD,IAAQsV,GAAOrV,SACxE6V,YAAcI,GAAcC,KAAKL,YAEtC3iB,EADqBQ,GAAO,GAAI2iB,GAAuBH,KAAKL,YAAa,CAAEnL,WAAYwL,KAAKE,cACvE,SAACE,EAAW7iB,GACzB8iB,EAAYD,EAAUE,EAAMjS,EAAaiS,EAAKZ,WACpDrR,EAAY9Q,GAAO8iB,GACTjR,OAASiR,EAAUjR,UAE/BpS,EAAOqR,EAAa,SAACgS,GACnBA,EAAU1T,OAAS0T,EAAU1T,eAE1BjI,KAAKtN,GACV2E,EAASikB,KAAK3V,KlC1Be,kBkC2B7BlE,EAAML,I1F7CU,Q0F8CXpB,KAAKrN,GACH2oB,QAETO,KAAA,SAAKnV,eACEH,QAAQ1P,KAAK,CAAE6P,OAAAA,IACpBA,EAAOH,QAAQ1P,KAAK,CAAE6P,OAAQ4U,KAAM5B,UAAU,IAC1C4B,KAAK7Z,MAAMC,G1FpDC,U0FqDT6Z,YAAYO,KAAKlC,UACtBlT,EAAOhB,WAAWoW,KAAKlC,WAElB0B,QAET5J,GAAA,SAAGuB,eACIsI,YAAYvO,WAAW0E,GAAGuB,GACxBqI,QAETzb,GAAA,SAAG5B,EAAQI,eACJE,MAAMsB,GAAG5B,EAAQI,GACfid,QAETvb,IAAA,SAAI9B,eACGM,MAAMwB,IAAI9B,GACRqd,QAETtb,KAAA,SAAKzB,uBACEA,OAAMyB,cAAKzB,UAAU5J,EAAMU,UAAW,KACpCimB,QAETpkB,IAAA,SAAIsU,EAAQnG,eACLkW,YAAY5U,OAAOzP,IAAIsU,EAAQnG,GAC7BiW,QAET3gB,OAAA,SAAOiS,eACA2O,YAAY5U,OAAOhM,OAAOiS,GACxB0O,QAET5Z,GAAA,SAAG9L,UACM0lB,KAAKN,SAASplB,OAASA,KAEhCmmB,QAAA,uBACO/b,KAAK3M,GACHioB,QAEThc,QAAA,SAAQyK,YAAAA,IAAAA,GAAa,OACXxL,EAAiB+c,KAAjB/c,MAAOkD,EAAU6Z,KAAV7Z,aACXA,EAAMC,G1F7FS,G0F8FjBlC,GAAe8b,MAAMzb,GAAGlN,EAAa2oB,KAAKhc,QAAQlK,KAAKkmB,KAAMvR,KAE7DzR,EAAOgjB,KAAKC,YAAa,SAACI,GACxBA,EAAUrc,SAAWqc,EAAUrc,QAAQyK,KACtC,GACHxL,EAAMyB,KAAKpM,GACX2K,EAAMe,UACNyK,GAAcvV,EAAM8mB,KAAK/U,SACzB9E,EAAML,I1FjGa,I0FmGdka,yCAET,kBACSA,KAAKN,cAEd,SAAY1c,OACF0c,EAAaM,KAAbN,SACRhiB,EAAMgiB,EAAU1c,GACXgd,KAAK7Z,MAAMC,G1FhHG,S0FiHZ1B,KAAK1M,EAAe0nB,uBAG7B,kBACSM,KAAKC,YAAY5U,OAAO6G,WAAU,sBAE3C,kBACS8N,KAAKC,YAAYvO,WAAWuG,2BAIvCwH,EAAOI,SAAW,GAClBJ,EAAO9mB,OAASA"}